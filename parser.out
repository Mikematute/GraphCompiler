Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body
Rule 2     vars -> VAR type vars_1 SCOLO vars
Rule 3     vars -> empty
Rule 4     vars_1 -> ID np_var_2 vars_2
Rule 5     vars_1 -> ID np_var_2 vars_2 COMA vars_1
Rule 6     vars_2 -> array_declare
Rule 7     vars_2 -> empty
Rule 8     function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
Rule 9     function -> empty
Rule 10    function_t -> VOID np_var_1
Rule 11    function_t -> t_number
Rule 12    function_t -> t_string
Rule 13    function_t -> t_bool
Rule 14    function_t -> t_graph
Rule 15    function_v -> function_v1
Rule 16    function_v -> empty
Rule 17    function_v1 -> type np_var_b4 ID np_var_b5
Rule 18    function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1
Rule 19    function_v1 -> type np_var_b4 ID np_var_b5 array_declare
Rule 20    function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1
Rule 21    body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3
Rule 22    type -> t_number
Rule 23    type -> t_string
Rule 24    type -> t_bool
Rule 25    type -> t_graph
Rule 26    t_number -> INT np_var_1
Rule 27    t_number -> FLOAT np_var_1
Rule 28    t_string -> STRING np_var_1
Rule 29    t_string -> CHAR np_var_1
Rule 30    t_bool -> BOOL np_var_1
Rule 31    t_graph -> NODE np_var_1
Rule 32    t_graph -> ARC np_var_1
Rule 33    t_graph -> UNDIRECTED np_var_1
Rule 34    t_graph -> DIRECTED np_var_1
Rule 35    array_declare -> np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7
Rule 36    array_declare_1 -> np_var_5 LCORCH CTE_INT np_var_6 RCORCH
Rule 37    array_declare_1 -> empty
Rule 38    statutes -> statutes_1 statutes
Rule 39    statutes -> empty
Rule 40    statutes_1 -> assignation
Rule 41    statutes_1 -> writing
Rule 42    statutes_1 -> condition
Rule 43    statutes_1 -> cycle
Rule 44    statutes_1 -> function_call SCOLO
Rule 45    statutes_1 -> method
Rule 46    statutes_1 -> return
Rule 47    assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
Rule 48    assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
Rule 49    writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
Rule 50    writing_1 -> expression
Rule 51    writing_2 -> expression SUMA np_quad_b writing_1 np_quad_c2
Rule 52    condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
Rule 53    condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK
Rule 54    condition_1 -> empty
Rule 55    cycle -> c_while
Rule 56    cycle -> c_do
Rule 57    cycle -> c_for
Rule 58    cycle -> c_forin
Rule 59    c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
Rule 60    c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
Rule 61    c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
Rule 62    c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK
Rule 63    function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub
Rule 64    function_call -> ID LPAREN np_era RPAREN np_gosub
Rule 65    function_call_1 -> expression np_param
Rule 66    function_call_1 -> expression np_param COMA function_call_1
Rule 67    return -> RETURN expression np_return SCOLO
Rule 68    expression -> exp_lv1
Rule 69    expression -> exp_lv1 AND np_quad_b expression np_quad_c0
Rule 70    expression -> exp_lv1 OR np_quad_b expression np_quad_c0
Rule 71    exp_lv1 -> exp_lv2 exp_lv1_1
Rule 72    exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1
Rule 73    exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1
Rule 74    exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1
Rule 75    exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1
Rule 76    exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1
Rule 77    exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1
Rule 78    exp_lv1_1 -> empty
Rule 79    exp_lv2 -> exp_lv3
Rule 80    exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
Rule 81    exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
Rule 82    exp_lv3 -> exp_lv4
Rule 83    exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
Rule 84    exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
Rule 85    exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
Rule 86    exp_lv4 -> exp_lv5
Rule 87    exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4
Rule 88    exp_lv5 -> RPAREN expression LPAREN
Rule 89    exp_lv5 -> var_cte
Rule 90    exp_lv5 -> function_call
Rule 91    exp_lv5 -> ID np_quad_a2
Rule 92    exp_lv5 -> ID np_quad_a2 array_access
Rule 93    array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5
Rule 94    arrary_access_1 -> CTE_INT np_quad_a1_int
Rule 95    arrary_access_1 -> ID np_quad_a2
Rule 96    arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH
Rule 97    arrary_access_2 -> empty
Rule 98    var_cte -> CTE_INT np_quad_a1_int
Rule 99    var_cte -> CTE_FLO np_quad_a1_flt
Rule 100   var_cte -> CTE_BOO np_quad_a1_bol
Rule 101   var_cte -> CTE_STRING np_quad_a1_str
Rule 102   var_cte -> CTE_CHAR np_quad_a1_chr
Rule 103   method -> ID CTE_INT DOT method_t
Rule 104   method_t -> DEG
Rule 105   method_t -> SHORTPATH
Rule 106   method_t -> DIAMETER
Rule 107   method_t -> ADDNODE LPAREN expression RPAREN
Rule 108   method_t -> DELETE
Rule 109   method_t -> ARC
Rule 110   np_var_a1 -> empty
Rule 111   np_var_a2 -> empty
Rule 112   np_var_b1 -> empty
Rule 113   np_var_b2 -> empty
Rule 114   np_var_b3 -> empty
Rule 115   np_var_b4 -> empty
Rule 116   np_var_b5 -> empty
Rule 117   np_var_b6 -> empty
Rule 118   np_var_c1 -> empty
Rule 119   np_var_c2 -> empty
Rule 120   np_var_c3 -> empty
Rule 121   np_var_1 -> empty
Rule 122   np_var_2 -> empty
Rule 123   np_var_3 -> empty
Rule 124   np_var_4 -> empty
Rule 125   np_var_5 -> empty
Rule 126   np_var_6 -> empty
Rule 127   np_var_7 -> empty
Rule 128   np_quad_a1_int -> empty
Rule 129   np_quad_a1_flt -> empty
Rule 130   np_quad_a1_chr -> empty
Rule 131   np_quad_a1_str -> empty
Rule 132   np_quad_a1_bol -> empty
Rule 133   np_quad_a2 -> empty
Rule 134   np_quad_b -> empty
Rule 135   np_quad_c0 -> empty
Rule 136   np_quad_c1 -> empty
Rule 137   np_quad_c2 -> empty
Rule 138   np_quad_c3 -> empty
Rule 139   np_quad_c4 -> empty
Rule 140   np_quad_d1 -> empty
Rule 141   np_quad_d2 -> empty
Rule 142   np_quad_d3 -> empty
Rule 143   np_quad_d4 -> empty
Rule 144   np_quad_d5 -> empty
Rule 145   np_quad_print -> empty
Rule 146   np_quad_assign -> empty
Rule 147   np_statutes_a1 -> empty
Rule 148   np_statutes_a2 -> empty
Rule 149   np_statutes_a3 -> empty
Rule 150   np_statutes_b1 -> empty
Rule 151   np_statutes_b2 -> empty
Rule 152   np_statutes_b3 -> empty
Rule 153   np_statutes_c1 -> empty
Rule 154   np_statutes_c2 -> empty
Rule 155   np_statutes_d1 -> empty
Rule 156   np_statutes_d2 -> empty
Rule 157   np_statutes_d3 -> empty
Rule 158   np_statutes_d4 -> empty
Rule 159   np_goto_main -> empty
Rule 160   np_era -> empty
Rule 161   np_gosub -> empty
Rule 162   np_param -> empty
Rule 163   np_return -> empty
Rule 164   debug -> empty
Rule 165   np_eof -> empty
Rule 166   empty -> <empty>

Terminals, with rules where they appear

ADDNODE              : 107
AND                  : 69
ARC                  : 32 109
BOOL                 : 30
CHAR                 : 29
COLON                : 
COMA                 : 5 18 20 66
CTE_BOO              : 100
CTE_CHAR             : 102
CTE_FLO              : 99
CTE_INT              : 35 36 94 98 103
CTE_STRING           : 101
DEG                  : 104
DELETE               : 108
DIAMETER             : 106
DIRECTED             : 34
DIV                  : 84
DO                   : 60
DOT                  : 103
ELSE                 : 53
EQL                  : 47 48
EQUALTO              : 76
FLOAT                : 27
FOR                  : 61 62
ID                   : 1 4 5 8 17 18 19 20 47 48 61 62 62 63 64 91 92 95 103
IF                   : 52
IN                   : 62
INT                  : 26
LBRACK               : 8 21 52 53 59 60 61 62
LCORCH               : 35 36 93 96
LESSEQUAL            : 74
LESST                : 72
LPAREN               : 8 21 49 52 59 60 61 62 63 64 88 107
MAIN                 : 21
MOREEQUAL            : 75
MORET                : 73
MUL                  : 83
NODE                 : 31
NOT                  : 87
NOTEQUALTO           : 77
OR                   : 70
PRINT                : 49
PROGRAM              : 1
RBRACK               : 8 21 52 53 59 60 61 62
RCORCH               : 35 36 93 96
RESD                 : 85
RETURN               : 67
RPAREN               : 8 21 49 52 59 60 61 62 63 64 88 107
SCOLO                : 1 2 44 47 48 49 60 61 61 67
SHORTPATH            : 105
STRING               : 28
SUB                  : 81
SUMA                 : 51 80
UNDIRECTED           : 33
VAR                  : 2
VOID                 : 10
WHILE                : 59 60
error                : 

Nonterminals, with rules where they appear

arrary_access_1      : 93 96
arrary_access_2      : 93
array_access         : 48 92
array_declare        : 6 19 20
array_declare_1      : 35
assignation          : 40 61
body                 : 1
c_do                 : 56
c_for                : 57
c_forin              : 58
c_while              : 55
condition            : 42
condition_1          : 52
cycle                : 43
debug                : 21
empty                : 3 7 9 16 37 39 54 78 97 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165
exp_lv1              : 68 69 70
exp_lv1_1            : 71
exp_lv2              : 71 72 73 74 75 76 77 80 81
exp_lv3              : 79 80 81 83 84 85
exp_lv4              : 82 83 84 85
exp_lv5              : 86 87
expression           : 47 48 50 51 52 59 60 61 65 66 67 69 70 88 107
function             : 1 8
function_call        : 44 90
function_call_1      : 63 66
function_t           : 8
function_v           : 8
function_v1          : 15 18 20
method               : 45
method_t             : 103
np_eof               : 21
np_era               : 63 64
np_gosub             : 63 64
np_goto_main         : 1
np_param             : 65 66
np_quad_a1_bol       : 100
np_quad_a1_chr       : 102
np_quad_a1_flt       : 99
np_quad_a1_int       : 94 98
np_quad_a1_str       : 101
np_quad_a2           : 47 48 91 92 95
np_quad_assign       : 47 48
np_quad_b            : 47 48 49 51 69 70 72 73 74 75 76 77 80 81 83 84 85 87
np_quad_c0           : 69 70
np_quad_c1           : 72 73 74 75 76 77
np_quad_c2           : 51 80 81
np_quad_c3           : 83 84 85
np_quad_c4           : 87
np_quad_d1           : 93
np_quad_d2           : 93
np_quad_d3           : 96
np_quad_d4           : 96
np_quad_d5           : 93
np_quad_print        : 49
np_return            : 67
np_statutes_a1       : 52
np_statutes_a2       : 53
np_statutes_a3       : 52
np_statutes_b1       : 59
np_statutes_b2       : 59
np_statutes_b3       : 59
np_statutes_c1       : 60
np_statutes_c2       : 60
np_statutes_d1       : 61
np_statutes_d2       : 61
np_statutes_d3       : 61
np_statutes_d4       : 61
np_var_1             : 10 26 27 28 29 30 31 32 33 34
np_var_2             : 4 5
np_var_3             : 35
np_var_4             : 35
np_var_5             : 36
np_var_6             : 36
np_var_7             : 35
np_var_a1            : 1
np_var_a2            : 1
np_var_b1            : 
np_var_b2            : 8
np_var_b3            : 8
np_var_b4            : 17 18 19 20
np_var_b5            : 17 18 19 20
np_var_b6            : 8
np_var_c1            : 21
np_var_c2            : 21
np_var_c3            : 21
program              : 0
return               : 46
statutes             : 8 21 38 52 53 59 60 61 62
statutes_1           : 38
t_bool               : 13 24
t_graph              : 14 25
t_number             : 11 22
t_string             : 12 23
type                 : 2 17 18 19 20
var_cte              : 89
vars                 : 1 2 8 21
vars_1               : 2 5
vars_2               : 4 5
writing              : 41
writing_1            : 49 51
writing_2            : 

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . np_var_a1 SCOLO np_var_a2 vars np_goto_main function body
    (110) np_var_a1 -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)

    np_var_a1                      shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) program -> PROGRAM ID np_var_a1 . SCOLO np_var_a2 vars np_goto_main function body

    SCOLO           shift and go to state 6


state 5

    (110) np_var_a1 -> empty .

    SCOLO           reduce using rule 110 (np_var_a1 -> empty .)


state 6

    (1) program -> PROGRAM ID np_var_a1 SCOLO . np_var_a2 vars np_goto_main function body
    (111) np_var_a2 -> . empty
    (166) empty -> .

    VAR             reduce using rule 166 (empty -> .)
    VOID            reduce using rule 166 (empty -> .)
    INT             reduce using rule 166 (empty -> .)
    FLOAT           reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    BOOL            reduce using rule 166 (empty -> .)
    NODE            reduce using rule 166 (empty -> .)
    ARC             reduce using rule 166 (empty -> .)
    UNDIRECTED      reduce using rule 166 (empty -> .)
    DIRECTED        reduce using rule 166 (empty -> .)
    MAIN            reduce using rule 166 (empty -> .)

    np_var_a2                      shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 . vars np_goto_main function body
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (166) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 166 (empty -> .)
    INT             reduce using rule 166 (empty -> .)
    FLOAT           reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    BOOL            reduce using rule 166 (empty -> .)
    NODE            reduce using rule 166 (empty -> .)
    ARC             reduce using rule 166 (empty -> .)
    UNDIRECTED      reduce using rule 166 (empty -> .)
    DIRECTED        reduce using rule 166 (empty -> .)
    MAIN            reduce using rule 166 (empty -> .)

    vars                           shift and go to state 9
    empty                          shift and go to state 11

state 8

    (111) np_var_a2 -> empty .

    VAR             reduce using rule 111 (np_var_a2 -> empty .)
    VOID            reduce using rule 111 (np_var_a2 -> empty .)
    INT             reduce using rule 111 (np_var_a2 -> empty .)
    FLOAT           reduce using rule 111 (np_var_a2 -> empty .)
    STRING          reduce using rule 111 (np_var_a2 -> empty .)
    CHAR            reduce using rule 111 (np_var_a2 -> empty .)
    BOOL            reduce using rule 111 (np_var_a2 -> empty .)
    NODE            reduce using rule 111 (np_var_a2 -> empty .)
    ARC             reduce using rule 111 (np_var_a2 -> empty .)
    UNDIRECTED      reduce using rule 111 (np_var_a2 -> empty .)
    DIRECTED        reduce using rule 111 (np_var_a2 -> empty .)
    MAIN            reduce using rule 111 (np_var_a2 -> empty .)


state 9

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars . np_goto_main function body
    (159) np_goto_main -> . empty
    (166) empty -> .

    VOID            reduce using rule 166 (empty -> .)
    INT             reduce using rule 166 (empty -> .)
    FLOAT           reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    BOOL            reduce using rule 166 (empty -> .)
    NODE            reduce using rule 166 (empty -> .)
    ARC             reduce using rule 166 (empty -> .)
    UNDIRECTED      reduce using rule 166 (empty -> .)
    DIRECTED        reduce using rule 166 (empty -> .)
    MAIN            reduce using rule 166 (empty -> .)

    np_goto_main                   shift and go to state 12
    empty                          shift and go to state 13

state 10

    (2) vars -> VAR . type vars_1 SCOLO vars
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    type                           shift and go to state 14
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 11

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    INT             reduce using rule 3 (vars -> empty .)
    FLOAT           reduce using rule 3 (vars -> empty .)
    STRING          reduce using rule 3 (vars -> empty .)
    CHAR            reduce using rule 3 (vars -> empty .)
    BOOL            reduce using rule 3 (vars -> empty .)
    NODE            reduce using rule 3 (vars -> empty .)
    ARC             reduce using rule 3 (vars -> empty .)
    UNDIRECTED      reduce using rule 3 (vars -> empty .)
    DIRECTED        reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)
    ID              reduce using rule 3 (vars -> empty .)
    PRINT           reduce using rule 3 (vars -> empty .)
    IF              reduce using rule 3 (vars -> empty .)
    RETURN          reduce using rule 3 (vars -> empty .)
    WHILE           reduce using rule 3 (vars -> empty .)
    DO              reduce using rule 3 (vars -> empty .)
    FOR             reduce using rule 3 (vars -> empty .)
    RBRACK          reduce using rule 3 (vars -> empty .)


state 12

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main . function body
    (8) function -> . function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (9) function -> . empty
    (10) function_t -> . VOID np_var_1
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (166) empty -> .
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    VOID            shift and go to state 31
    MAIN            reduce using rule 166 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    function                       shift and go to state 28
    function_t                     shift and go to state 29
    empty                          shift and go to state 30
    t_number                       shift and go to state 32
    t_string                       shift and go to state 33
    t_bool                         shift and go to state 34
    t_graph                        shift and go to state 35

state 13

    (159) np_goto_main -> empty .

    VOID            reduce using rule 159 (np_goto_main -> empty .)
    INT             reduce using rule 159 (np_goto_main -> empty .)
    FLOAT           reduce using rule 159 (np_goto_main -> empty .)
    STRING          reduce using rule 159 (np_goto_main -> empty .)
    CHAR            reduce using rule 159 (np_goto_main -> empty .)
    BOOL            reduce using rule 159 (np_goto_main -> empty .)
    NODE            reduce using rule 159 (np_goto_main -> empty .)
    ARC             reduce using rule 159 (np_goto_main -> empty .)
    UNDIRECTED      reduce using rule 159 (np_goto_main -> empty .)
    DIRECTED        reduce using rule 159 (np_goto_main -> empty .)
    MAIN            reduce using rule 159 (np_goto_main -> empty .)


state 14

    (2) vars -> VAR type . vars_1 SCOLO vars
    (4) vars_1 -> . ID np_var_2 vars_2
    (5) vars_1 -> . ID np_var_2 vars_2 COMA vars_1

    ID              shift and go to state 37

    vars_1                         shift and go to state 36

state 15

    (22) type -> t_number .

    ID              reduce using rule 22 (type -> t_number .)


state 16

    (23) type -> t_string .

    ID              reduce using rule 23 (type -> t_string .)


state 17

    (24) type -> t_bool .

    ID              reduce using rule 24 (type -> t_bool .)


state 18

    (25) type -> t_graph .

    ID              reduce using rule 25 (type -> t_graph .)


state 19

    (26) t_number -> INT . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 38
    empty                          shift and go to state 39

state 20

    (27) t_number -> FLOAT . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 40
    empty                          shift and go to state 39

state 21

    (28) t_string -> STRING . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 41
    empty                          shift and go to state 39

state 22

    (29) t_string -> CHAR . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 42
    empty                          shift and go to state 39

state 23

    (30) t_bool -> BOOL . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 43
    empty                          shift and go to state 39

state 24

    (31) t_graph -> NODE . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 44
    empty                          shift and go to state 39

state 25

    (32) t_graph -> ARC . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 45
    empty                          shift and go to state 39

state 26

    (33) t_graph -> UNDIRECTED . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 46
    empty                          shift and go to state 39

state 27

    (34) t_graph -> DIRECTED . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 47
    empty                          shift and go to state 39

state 28

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function . body
    (21) body -> . MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    MAIN            shift and go to state 49

    body                           shift and go to state 48

state 29

    (8) function -> function_t . ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function

    ID              shift and go to state 50


state 30

    (9) function -> empty .

    MAIN            reduce using rule 9 (function -> empty .)


state 31

    (10) function_t -> VOID . np_var_1
    (121) np_var_1 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_1                       shift and go to state 51
    empty                          shift and go to state 39

state 32

    (11) function_t -> t_number .

    ID              reduce using rule 11 (function_t -> t_number .)


state 33

    (12) function_t -> t_string .

    ID              reduce using rule 12 (function_t -> t_string .)


state 34

    (13) function_t -> t_bool .

    ID              reduce using rule 13 (function_t -> t_bool .)


state 35

    (14) function_t -> t_graph .

    ID              reduce using rule 14 (function_t -> t_graph .)


state 36

    (2) vars -> VAR type vars_1 . SCOLO vars

    SCOLO           shift and go to state 52


state 37

    (4) vars_1 -> ID . np_var_2 vars_2
    (5) vars_1 -> ID . np_var_2 vars_2 COMA vars_1
    (122) np_var_2 -> . empty
    (166) empty -> .

    COMA            reduce using rule 166 (empty -> .)
    LCORCH          reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)

    np_var_2                       shift and go to state 53
    empty                          shift and go to state 54

state 38

    (26) t_number -> INT np_var_1 .

    ID              reduce using rule 26 (t_number -> INT np_var_1 .)


state 39

    (121) np_var_1 -> empty .

    ID              reduce using rule 121 (np_var_1 -> empty .)


state 40

    (27) t_number -> FLOAT np_var_1 .

    ID              reduce using rule 27 (t_number -> FLOAT np_var_1 .)


state 41

    (28) t_string -> STRING np_var_1 .

    ID              reduce using rule 28 (t_string -> STRING np_var_1 .)


state 42

    (29) t_string -> CHAR np_var_1 .

    ID              reduce using rule 29 (t_string -> CHAR np_var_1 .)


state 43

    (30) t_bool -> BOOL np_var_1 .

    ID              reduce using rule 30 (t_bool -> BOOL np_var_1 .)


state 44

    (31) t_graph -> NODE np_var_1 .

    ID              reduce using rule 31 (t_graph -> NODE np_var_1 .)


state 45

    (32) t_graph -> ARC np_var_1 .

    ID              reduce using rule 32 (t_graph -> ARC np_var_1 .)


state 46

    (33) t_graph -> UNDIRECTED np_var_1 .

    ID              reduce using rule 33 (t_graph -> UNDIRECTED np_var_1 .)


state 47

    (34) t_graph -> DIRECTED np_var_1 .

    ID              reduce using rule 34 (t_graph -> DIRECTED np_var_1 .)


state 48

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body .

    $end            reduce using rule 1 (program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body .)


state 49

    (21) body -> MAIN . np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3
    (118) np_var_c1 -> . empty
    (166) empty -> .

    LPAREN          reduce using rule 166 (empty -> .)

    np_var_c1                      shift and go to state 55
    empty                          shift and go to state 56

state 50

    (8) function -> function_t ID . np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (113) np_var_b2 -> . empty
    (166) empty -> .

    LPAREN          reduce using rule 166 (empty -> .)

    np_var_b2                      shift and go to state 57
    empty                          shift and go to state 58

state 51

    (10) function_t -> VOID np_var_1 .

    ID              reduce using rule 10 (function_t -> VOID np_var_1 .)


state 52

    (2) vars -> VAR type vars_1 SCOLO . vars
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (166) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 166 (empty -> .)
    INT             reduce using rule 166 (empty -> .)
    FLOAT           reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    BOOL            reduce using rule 166 (empty -> .)
    NODE            reduce using rule 166 (empty -> .)
    ARC             reduce using rule 166 (empty -> .)
    UNDIRECTED      reduce using rule 166 (empty -> .)
    DIRECTED        reduce using rule 166 (empty -> .)
    MAIN            reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    vars                           shift and go to state 59
    empty                          shift and go to state 11

state 53

    (4) vars_1 -> ID np_var_2 . vars_2
    (5) vars_1 -> ID np_var_2 . vars_2 COMA vars_1
    (6) vars_2 -> . array_declare
    (7) vars_2 -> . empty
    (35) array_declare -> . np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7
    (166) empty -> .
    (123) np_var_3 -> . empty

    COMA            reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    LCORCH          reduce using rule 166 (empty -> .)

    vars_2                         shift and go to state 60
    array_declare                  shift and go to state 61
    empty                          shift and go to state 62
    np_var_3                       shift and go to state 63

state 54

    (122) np_var_2 -> empty .

    COMA            reduce using rule 122 (np_var_2 -> empty .)
    LCORCH          reduce using rule 122 (np_var_2 -> empty .)
    SCOLO           reduce using rule 122 (np_var_2 -> empty .)


state 55

    (21) body -> MAIN np_var_c1 . LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    LPAREN          shift and go to state 64


state 56

    (118) np_var_c1 -> empty .

    LPAREN          reduce using rule 118 (np_var_c1 -> empty .)


state 57

    (8) function -> function_t ID np_var_b2 . np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (114) np_var_b3 -> . empty
    (166) empty -> .

    LPAREN          reduce using rule 166 (empty -> .)

    np_var_b3                      shift and go to state 65
    empty                          shift and go to state 66

state 58

    (113) np_var_b2 -> empty .

    LPAREN          reduce using rule 113 (np_var_b2 -> empty .)


state 59

    (2) vars -> VAR type vars_1 SCOLO vars .

    VOID            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    INT             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FLOAT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    STRING          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    CHAR            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    BOOL            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    NODE            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ARC             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    UNDIRECTED      reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DIRECTED        reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    MAIN            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ID              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    PRINT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    IF              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    RETURN          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    WHILE           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DO              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FOR             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    RBRACK          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)


state 60

    (4) vars_1 -> ID np_var_2 vars_2 .
    (5) vars_1 -> ID np_var_2 vars_2 . COMA vars_1

    SCOLO           reduce using rule 4 (vars_1 -> ID np_var_2 vars_2 .)
    COMA            shift and go to state 67


state 61

    (6) vars_2 -> array_declare .

    COMA            reduce using rule 6 (vars_2 -> array_declare .)
    SCOLO           reduce using rule 6 (vars_2 -> array_declare .)


state 62

    (7) vars_2 -> empty .
    (123) np_var_3 -> empty .

    COMA            reduce using rule 7 (vars_2 -> empty .)
    SCOLO           reduce using rule 7 (vars_2 -> empty .)
    LCORCH          reduce using rule 123 (np_var_3 -> empty .)


state 63

    (35) array_declare -> np_var_3 . LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7

    LCORCH          shift and go to state 68


state 64

    (21) body -> MAIN np_var_c1 LPAREN . RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    RPAREN          shift and go to state 69


state 65

    (8) function -> function_t ID np_var_b2 np_var_b3 . LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function

    LPAREN          shift and go to state 70


state 66

    (114) np_var_b3 -> empty .

    LPAREN          reduce using rule 114 (np_var_b3 -> empty .)


state 67

    (5) vars_1 -> ID np_var_2 vars_2 COMA . vars_1
    (4) vars_1 -> . ID np_var_2 vars_2
    (5) vars_1 -> . ID np_var_2 vars_2 COMA vars_1

    ID              shift and go to state 37

    vars_1                         shift and go to state 71

state 68

    (35) array_declare -> np_var_3 LCORCH . CTE_INT np_var_4 RCORCH array_declare_1 np_var_7

    CTE_INT         shift and go to state 72


state 69

    (21) body -> MAIN np_var_c1 LPAREN RPAREN . LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    LBRACK          shift and go to state 73


state 70

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN . function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (15) function_v -> . function_v1
    (16) function_v -> . empty
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (166) empty -> .
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    RPAREN          reduce using rule 166 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    function_v                     shift and go to state 74
    function_v1                    shift and go to state 75
    empty                          shift and go to state 76
    type                           shift and go to state 77
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 71

    (5) vars_1 -> ID np_var_2 vars_2 COMA vars_1 .

    SCOLO           reduce using rule 5 (vars_1 -> ID np_var_2 vars_2 COMA vars_1 .)


state 72

    (35) array_declare -> np_var_3 LCORCH CTE_INT . np_var_4 RCORCH array_declare_1 np_var_7
    (124) np_var_4 -> . empty
    (166) empty -> .

    RCORCH          reduce using rule 166 (empty -> .)

    np_var_4                       shift and go to state 78
    empty                          shift and go to state 79

state 73

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK . np_var_c2 vars statutes RBRACK np_eof debug np_var_c3
    (119) np_var_c2 -> . empty
    (166) empty -> .

    VAR             reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    np_var_c2                      shift and go to state 80
    empty                          shift and go to state 81

state 74

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v . RPAREN LBRACK vars statutes RBRACK np_var_b6 function

    RPAREN          shift and go to state 82


state 75

    (15) function_v -> function_v1 .

    RPAREN          reduce using rule 15 (function_v -> function_v1 .)


state 76

    (16) function_v -> empty .

    RPAREN          reduce using rule 16 (function_v -> empty .)


state 77

    (17) function_v1 -> type . np_var_b4 ID np_var_b5
    (18) function_v1 -> type . np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> type . np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> type . np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (115) np_var_b4 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)

    np_var_b4                      shift and go to state 83
    empty                          shift and go to state 84

state 78

    (35) array_declare -> np_var_3 LCORCH CTE_INT np_var_4 . RCORCH array_declare_1 np_var_7

    RCORCH          shift and go to state 85


state 79

    (124) np_var_4 -> empty .

    RCORCH          reduce using rule 124 (np_var_4 -> empty .)


state 80

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 . vars statutes RBRACK np_eof debug np_var_c3
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (166) empty -> .

    VAR             shift and go to state 10
    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    vars                           shift and go to state 86
    empty                          shift and go to state 11

state 81

    (119) np_var_c2 -> empty .

    VAR             reduce using rule 119 (np_var_c2 -> empty .)
    ID              reduce using rule 119 (np_var_c2 -> empty .)
    PRINT           reduce using rule 119 (np_var_c2 -> empty .)
    IF              reduce using rule 119 (np_var_c2 -> empty .)
    RETURN          reduce using rule 119 (np_var_c2 -> empty .)
    WHILE           reduce using rule 119 (np_var_c2 -> empty .)
    DO              reduce using rule 119 (np_var_c2 -> empty .)
    FOR             reduce using rule 119 (np_var_c2 -> empty .)
    RBRACK          reduce using rule 119 (np_var_c2 -> empty .)


state 82

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN . LBRACK vars statutes RBRACK np_var_b6 function

    LBRACK          shift and go to state 87


state 83

    (17) function_v1 -> type np_var_b4 . ID np_var_b5
    (18) function_v1 -> type np_var_b4 . ID np_var_b5 COMA function_v1
    (19) function_v1 -> type np_var_b4 . ID np_var_b5 array_declare
    (20) function_v1 -> type np_var_b4 . ID np_var_b5 array_declare COMA function_v1

    ID              shift and go to state 88


state 84

    (115) np_var_b4 -> empty .

    ID              reduce using rule 115 (np_var_b4 -> empty .)


state 85

    (35) array_declare -> np_var_3 LCORCH CTE_INT np_var_4 RCORCH . array_declare_1 np_var_7
    (36) array_declare_1 -> . np_var_5 LCORCH CTE_INT np_var_6 RCORCH
    (37) array_declare_1 -> . empty
    (125) np_var_5 -> . empty
    (166) empty -> .

    COMA            reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LCORCH          reduce using rule 166 (empty -> .)

    array_declare_1                shift and go to state 89
    np_var_5                       shift and go to state 90
    empty                          shift and go to state 91

state 86

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars . statutes RBRACK np_eof debug np_var_c3
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes                       shift and go to state 92
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 87

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK . vars statutes RBRACK np_var_b6 function
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (166) empty -> .

    VAR             shift and go to state 10
    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    vars                           shift and go to state 113
    empty                          shift and go to state 11

state 88

    (17) function_v1 -> type np_var_b4 ID . np_var_b5
    (18) function_v1 -> type np_var_b4 ID . np_var_b5 COMA function_v1
    (19) function_v1 -> type np_var_b4 ID . np_var_b5 array_declare
    (20) function_v1 -> type np_var_b4 ID . np_var_b5 array_declare COMA function_v1
    (116) np_var_b5 -> . empty
    (166) empty -> .

    COMA            reduce using rule 166 (empty -> .)
    LCORCH          reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)

    np_var_b5                      shift and go to state 114
    empty                          shift and go to state 115

state 89

    (35) array_declare -> np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 . np_var_7
    (127) np_var_7 -> . empty
    (166) empty -> .

    COMA            reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)

    np_var_7                       shift and go to state 116
    empty                          shift and go to state 117

state 90

    (36) array_declare_1 -> np_var_5 . LCORCH CTE_INT np_var_6 RCORCH

    LCORCH          shift and go to state 118


state 91

    (37) array_declare_1 -> empty .
    (125) np_var_5 -> empty .

    COMA            reduce using rule 37 (array_declare_1 -> empty .)
    SCOLO           reduce using rule 37 (array_declare_1 -> empty .)
    RPAREN          reduce using rule 37 (array_declare_1 -> empty .)
    LCORCH          reduce using rule 125 (np_var_5 -> empty .)


state 92

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes . RBRACK np_eof debug np_var_c3

    RBRACK          shift and go to state 119


state 93

    (38) statutes -> statutes_1 . statutes
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes_1                     shift and go to state 93
    statutes                       shift and go to state 120
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 94

    (39) statutes -> empty .

    RBRACK          reduce using rule 39 (statutes -> empty .)


state 95

    (40) statutes_1 -> assignation .

    ID              reduce using rule 40 (statutes_1 -> assignation .)
    PRINT           reduce using rule 40 (statutes_1 -> assignation .)
    IF              reduce using rule 40 (statutes_1 -> assignation .)
    RETURN          reduce using rule 40 (statutes_1 -> assignation .)
    WHILE           reduce using rule 40 (statutes_1 -> assignation .)
    DO              reduce using rule 40 (statutes_1 -> assignation .)
    FOR             reduce using rule 40 (statutes_1 -> assignation .)
    RBRACK          reduce using rule 40 (statutes_1 -> assignation .)


state 96

    (41) statutes_1 -> writing .

    ID              reduce using rule 41 (statutes_1 -> writing .)
    PRINT           reduce using rule 41 (statutes_1 -> writing .)
    IF              reduce using rule 41 (statutes_1 -> writing .)
    RETURN          reduce using rule 41 (statutes_1 -> writing .)
    WHILE           reduce using rule 41 (statutes_1 -> writing .)
    DO              reduce using rule 41 (statutes_1 -> writing .)
    FOR             reduce using rule 41 (statutes_1 -> writing .)
    RBRACK          reduce using rule 41 (statutes_1 -> writing .)


state 97

    (42) statutes_1 -> condition .

    ID              reduce using rule 42 (statutes_1 -> condition .)
    PRINT           reduce using rule 42 (statutes_1 -> condition .)
    IF              reduce using rule 42 (statutes_1 -> condition .)
    RETURN          reduce using rule 42 (statutes_1 -> condition .)
    WHILE           reduce using rule 42 (statutes_1 -> condition .)
    DO              reduce using rule 42 (statutes_1 -> condition .)
    FOR             reduce using rule 42 (statutes_1 -> condition .)
    RBRACK          reduce using rule 42 (statutes_1 -> condition .)


state 98

    (43) statutes_1 -> cycle .

    ID              reduce using rule 43 (statutes_1 -> cycle .)
    PRINT           reduce using rule 43 (statutes_1 -> cycle .)
    IF              reduce using rule 43 (statutes_1 -> cycle .)
    RETURN          reduce using rule 43 (statutes_1 -> cycle .)
    WHILE           reduce using rule 43 (statutes_1 -> cycle .)
    DO              reduce using rule 43 (statutes_1 -> cycle .)
    FOR             reduce using rule 43 (statutes_1 -> cycle .)
    RBRACK          reduce using rule 43 (statutes_1 -> cycle .)


state 99

    (44) statutes_1 -> function_call . SCOLO

    SCOLO           shift and go to state 121


state 100

    (45) statutes_1 -> method .

    ID              reduce using rule 45 (statutes_1 -> method .)
    PRINT           reduce using rule 45 (statutes_1 -> method .)
    IF              reduce using rule 45 (statutes_1 -> method .)
    RETURN          reduce using rule 45 (statutes_1 -> method .)
    WHILE           reduce using rule 45 (statutes_1 -> method .)
    DO              reduce using rule 45 (statutes_1 -> method .)
    FOR             reduce using rule 45 (statutes_1 -> method .)
    RBRACK          reduce using rule 45 (statutes_1 -> method .)


state 101

    (46) statutes_1 -> return .

    ID              reduce using rule 46 (statutes_1 -> return .)
    PRINT           reduce using rule 46 (statutes_1 -> return .)
    IF              reduce using rule 46 (statutes_1 -> return .)
    RETURN          reduce using rule 46 (statutes_1 -> return .)
    WHILE           reduce using rule 46 (statutes_1 -> return .)
    DO              reduce using rule 46 (statutes_1 -> return .)
    FOR             reduce using rule 46 (statutes_1 -> return .)
    RBRACK          reduce using rule 46 (statutes_1 -> return .)


state 102

    (47) assignation -> ID . np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> ID . np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (63) function_call -> ID . LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> ID . LPAREN np_era RPAREN np_gosub
    (103) method -> ID . CTE_INT DOT method_t
    (133) np_quad_a2 -> . empty
    (166) empty -> .

    LPAREN          shift and go to state 123
    CTE_INT         shift and go to state 124
    EQL             reduce using rule 166 (empty -> .)
    LCORCH          reduce using rule 166 (empty -> .)

    np_quad_a2                     shift and go to state 122
    empty                          shift and go to state 125

state 103

    (49) writing -> PRINT . np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (134) np_quad_b -> . empty
    (166) empty -> .

    LPAREN          reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 126
    empty                          shift and go to state 127

state 104

    (52) condition -> IF . LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3

    LPAREN          shift and go to state 128


state 105

    (55) cycle -> c_while .

    ID              reduce using rule 55 (cycle -> c_while .)
    PRINT           reduce using rule 55 (cycle -> c_while .)
    IF              reduce using rule 55 (cycle -> c_while .)
    RETURN          reduce using rule 55 (cycle -> c_while .)
    WHILE           reduce using rule 55 (cycle -> c_while .)
    DO              reduce using rule 55 (cycle -> c_while .)
    FOR             reduce using rule 55 (cycle -> c_while .)
    RBRACK          reduce using rule 55 (cycle -> c_while .)


state 106

    (56) cycle -> c_do .

    ID              reduce using rule 56 (cycle -> c_do .)
    PRINT           reduce using rule 56 (cycle -> c_do .)
    IF              reduce using rule 56 (cycle -> c_do .)
    RETURN          reduce using rule 56 (cycle -> c_do .)
    WHILE           reduce using rule 56 (cycle -> c_do .)
    DO              reduce using rule 56 (cycle -> c_do .)
    FOR             reduce using rule 56 (cycle -> c_do .)
    RBRACK          reduce using rule 56 (cycle -> c_do .)


state 107

    (57) cycle -> c_for .

    ID              reduce using rule 57 (cycle -> c_for .)
    PRINT           reduce using rule 57 (cycle -> c_for .)
    IF              reduce using rule 57 (cycle -> c_for .)
    RETURN          reduce using rule 57 (cycle -> c_for .)
    WHILE           reduce using rule 57 (cycle -> c_for .)
    DO              reduce using rule 57 (cycle -> c_for .)
    FOR             reduce using rule 57 (cycle -> c_for .)
    RBRACK          reduce using rule 57 (cycle -> c_for .)


state 108

    (58) cycle -> c_forin .

    ID              reduce using rule 58 (cycle -> c_forin .)
    PRINT           reduce using rule 58 (cycle -> c_forin .)
    IF              reduce using rule 58 (cycle -> c_forin .)
    RETURN          reduce using rule 58 (cycle -> c_forin .)
    WHILE           reduce using rule 58 (cycle -> c_forin .)
    DO              reduce using rule 58 (cycle -> c_forin .)
    FOR             reduce using rule 58 (cycle -> c_forin .)
    RBRACK          reduce using rule 58 (cycle -> c_forin .)


state 109

    (67) return -> RETURN . expression np_return SCOLO
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 129
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 110

    (59) c_while -> WHILE . np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (150) np_statutes_b1 -> . empty
    (166) empty -> .

    LPAREN          reduce using rule 166 (empty -> .)

    np_statutes_b1                 shift and go to state 145
    empty                          shift and go to state 146

state 111

    (60) c_do -> DO . np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (153) np_statutes_c1 -> . empty
    (166) empty -> .

    LBRACK          reduce using rule 166 (empty -> .)

    np_statutes_c1                 shift and go to state 147
    empty                          shift and go to state 148

state 112

    (61) c_for -> FOR . LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> FOR . LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    LPAREN          shift and go to state 149


state 113

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars . statutes RBRACK np_var_b6 function
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes                       shift and go to state 150
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 114

    (17) function_v1 -> type np_var_b4 ID np_var_b5 .
    (18) function_v1 -> type np_var_b4 ID np_var_b5 . COMA function_v1
    (19) function_v1 -> type np_var_b4 ID np_var_b5 . array_declare
    (20) function_v1 -> type np_var_b4 ID np_var_b5 . array_declare COMA function_v1
    (35) array_declare -> . np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7
    (123) np_var_3 -> . empty
    (166) empty -> .

    RPAREN          reduce using rule 17 (function_v1 -> type np_var_b4 ID np_var_b5 .)
    COMA            shift and go to state 151
    LCORCH          reduce using rule 166 (empty -> .)

    array_declare                  shift and go to state 152
    np_var_3                       shift and go to state 63
    empty                          shift and go to state 153

state 115

    (116) np_var_b5 -> empty .

    COMA            reduce using rule 116 (np_var_b5 -> empty .)
    LCORCH          reduce using rule 116 (np_var_b5 -> empty .)
    RPAREN          reduce using rule 116 (np_var_b5 -> empty .)


state 116

    (35) array_declare -> np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7 .

    COMA            reduce using rule 35 (array_declare -> np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7 .)
    SCOLO           reduce using rule 35 (array_declare -> np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7 .)
    RPAREN          reduce using rule 35 (array_declare -> np_var_3 LCORCH CTE_INT np_var_4 RCORCH array_declare_1 np_var_7 .)


state 117

    (127) np_var_7 -> empty .

    COMA            reduce using rule 127 (np_var_7 -> empty .)
    SCOLO           reduce using rule 127 (np_var_7 -> empty .)
    RPAREN          reduce using rule 127 (np_var_7 -> empty .)


state 118

    (36) array_declare_1 -> np_var_5 LCORCH . CTE_INT np_var_6 RCORCH

    CTE_INT         shift and go to state 154


state 119

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK . np_eof debug np_var_c3
    (165) np_eof -> . empty
    (166) empty -> .

    $end            reduce using rule 166 (empty -> .)

    np_eof                         shift and go to state 155
    empty                          shift and go to state 156

state 120

    (38) statutes -> statutes_1 statutes .

    RBRACK          reduce using rule 38 (statutes -> statutes_1 statutes .)


state 121

    (44) statutes_1 -> function_call SCOLO .

    ID              reduce using rule 44 (statutes_1 -> function_call SCOLO .)
    PRINT           reduce using rule 44 (statutes_1 -> function_call SCOLO .)
    IF              reduce using rule 44 (statutes_1 -> function_call SCOLO .)
    RETURN          reduce using rule 44 (statutes_1 -> function_call SCOLO .)
    WHILE           reduce using rule 44 (statutes_1 -> function_call SCOLO .)
    DO              reduce using rule 44 (statutes_1 -> function_call SCOLO .)
    FOR             reduce using rule 44 (statutes_1 -> function_call SCOLO .)
    RBRACK          reduce using rule 44 (statutes_1 -> function_call SCOLO .)


state 122

    (47) assignation -> ID np_quad_a2 . EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> ID np_quad_a2 . array_access EQL np_quad_b expression np_quad_assign SCOLO
    (93) array_access -> . np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5
    (140) np_quad_d1 -> . empty
    (166) empty -> .

    EQL             shift and go to state 157
    LCORCH          reduce using rule 166 (empty -> .)

    array_access                   shift and go to state 158
    np_quad_d1                     shift and go to state 159
    empty                          shift and go to state 160

state 123

    (63) function_call -> ID LPAREN . np_era function_call_1 RPAREN np_gosub
    (64) function_call -> ID LPAREN . np_era RPAREN np_gosub
    (160) np_era -> . empty
    (166) empty -> .

    RPAREN          reduce using rule 166 (empty -> .)
    NOT             reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_era                         shift and go to state 161
    empty                          shift and go to state 162

state 124

    (103) method -> ID CTE_INT . DOT method_t

    DOT             shift and go to state 163


state 125

    (133) np_quad_a2 -> empty .

    EQL             reduce using rule 133 (np_quad_a2 -> empty .)
    LCORCH          reduce using rule 133 (np_quad_a2 -> empty .)
    MUL             reduce using rule 133 (np_quad_a2 -> empty .)
    DIV             reduce using rule 133 (np_quad_a2 -> empty .)
    RESD            reduce using rule 133 (np_quad_a2 -> empty .)
    SUMA            reduce using rule 133 (np_quad_a2 -> empty .)
    SUB             reduce using rule 133 (np_quad_a2 -> empty .)
    LESST           reduce using rule 133 (np_quad_a2 -> empty .)
    MORET           reduce using rule 133 (np_quad_a2 -> empty .)
    LESSEQUAL       reduce using rule 133 (np_quad_a2 -> empty .)
    MOREEQUAL       reduce using rule 133 (np_quad_a2 -> empty .)
    EQUALTO         reduce using rule 133 (np_quad_a2 -> empty .)
    NOTEQUALTO      reduce using rule 133 (np_quad_a2 -> empty .)
    AND             reduce using rule 133 (np_quad_a2 -> empty .)
    OR              reduce using rule 133 (np_quad_a2 -> empty .)
    SCOLO           reduce using rule 133 (np_quad_a2 -> empty .)
    RPAREN          reduce using rule 133 (np_quad_a2 -> empty .)
    LPAREN          reduce using rule 133 (np_quad_a2 -> empty .)
    COMA            reduce using rule 133 (np_quad_a2 -> empty .)
    RCORCH          reduce using rule 133 (np_quad_a2 -> empty .)


state 126

    (49) writing -> PRINT np_quad_b . LPAREN writing_1 RPAREN np_quad_print SCOLO

    LPAREN          shift and go to state 164


state 127

    (134) np_quad_b -> empty .

    LPAREN          reduce using rule 134 (np_quad_b -> empty .)
    RPAREN          reduce using rule 134 (np_quad_b -> empty .)
    ID              reduce using rule 134 (np_quad_b -> empty .)
    CTE_INT         reduce using rule 134 (np_quad_b -> empty .)
    CTE_FLO         reduce using rule 134 (np_quad_b -> empty .)
    CTE_BOO         reduce using rule 134 (np_quad_b -> empty .)
    CTE_STRING      reduce using rule 134 (np_quad_b -> empty .)
    CTE_CHAR        reduce using rule 134 (np_quad_b -> empty .)
    NOT             reduce using rule 134 (np_quad_b -> empty .)


state 128

    (52) condition -> IF LPAREN . expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 165
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 129

    (67) return -> RETURN expression . np_return SCOLO
    (163) np_return -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)

    np_return                      shift and go to state 166
    empty                          shift and go to state 167

state 130

    (68) expression -> exp_lv1 .
    (69) expression -> exp_lv1 . AND np_quad_b expression np_quad_c0
    (70) expression -> exp_lv1 . OR np_quad_b expression np_quad_c0

    SCOLO           reduce using rule 68 (expression -> exp_lv1 .)
    RPAREN          reduce using rule 68 (expression -> exp_lv1 .)
    LPAREN          reduce using rule 68 (expression -> exp_lv1 .)
    COMA            reduce using rule 68 (expression -> exp_lv1 .)
    AND             shift and go to state 168
    OR              shift and go to state 169


state 131

    (71) exp_lv1 -> exp_lv2 . exp_lv1_1
    (72) exp_lv1_1 -> . LESST np_quad_b exp_lv2 np_quad_c1
    (73) exp_lv1_1 -> . MORET np_quad_b exp_lv2 np_quad_c1
    (74) exp_lv1_1 -> . LESSEQUAL np_quad_b exp_lv2 np_quad_c1
    (75) exp_lv1_1 -> . MOREEQUAL np_quad_b exp_lv2 np_quad_c1
    (76) exp_lv1_1 -> . EQUALTO np_quad_b exp_lv2 np_quad_c1
    (77) exp_lv1_1 -> . NOTEQUALTO np_quad_b exp_lv2 np_quad_c1
    (78) exp_lv1_1 -> . empty
    (166) empty -> .

    LESST           shift and go to state 171
    MORET           shift and go to state 172
    LESSEQUAL       shift and go to state 173
    MOREEQUAL       shift and go to state 174
    EQUALTO         shift and go to state 175
    NOTEQUALTO      shift and go to state 176
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    exp_lv1_1                      shift and go to state 170
    empty                          shift and go to state 177

state 132

    (79) exp_lv2 -> exp_lv3 .
    (80) exp_lv2 -> exp_lv3 . SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> exp_lv3 . SUB np_quad_b exp_lv2 np_quad_c2

    LESST           reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    MORET           reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    LESSEQUAL       reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    MOREEQUAL       reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    EQUALTO         reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    NOTEQUALTO      reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    AND             reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    OR              reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    SCOLO           reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    RPAREN          reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    LPAREN          reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    COMA            reduce using rule 79 (exp_lv2 -> exp_lv3 .)
    SUMA            shift and go to state 178
    SUB             shift and go to state 179


state 133

    (82) exp_lv3 -> exp_lv4 .
    (83) exp_lv3 -> exp_lv4 . MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> exp_lv4 . DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> exp_lv4 . RESD np_quad_b exp_lv3 np_quad_c3

    SUMA            reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    SUB             reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    LESST           reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    MORET           reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    LESSEQUAL       reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    MOREEQUAL       reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    EQUALTO         reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    NOTEQUALTO      reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    AND             reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    OR              reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    SCOLO           reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    RPAREN          reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    LPAREN          reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    COMA            reduce using rule 82 (exp_lv3 -> exp_lv4 .)
    MUL             shift and go to state 180
    DIV             shift and go to state 181
    RESD            shift and go to state 182


state 134

    (86) exp_lv4 -> exp_lv5 .

    MUL             reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    DIV             reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    RESD            reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    SUMA            reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    SUB             reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    LESST           reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    MORET           reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    LESSEQUAL       reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    MOREEQUAL       reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    EQUALTO         reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    NOTEQUALTO      reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    AND             reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    OR              reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    SCOLO           reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    RPAREN          reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    LPAREN          reduce using rule 86 (exp_lv4 -> exp_lv5 .)
    COMA            reduce using rule 86 (exp_lv4 -> exp_lv5 .)


state 135

    (87) exp_lv4 -> NOT . np_quad_b exp_lv5 np_quad_c4
    (134) np_quad_b -> . empty
    (166) empty -> .

    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 183
    empty                          shift and go to state 127

state 136

    (88) exp_lv5 -> RPAREN . expression LPAREN
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 184
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 137

    (89) exp_lv5 -> var_cte .

    MUL             reduce using rule 89 (exp_lv5 -> var_cte .)
    DIV             reduce using rule 89 (exp_lv5 -> var_cte .)
    RESD            reduce using rule 89 (exp_lv5 -> var_cte .)
    SUMA            reduce using rule 89 (exp_lv5 -> var_cte .)
    SUB             reduce using rule 89 (exp_lv5 -> var_cte .)
    LESST           reduce using rule 89 (exp_lv5 -> var_cte .)
    MORET           reduce using rule 89 (exp_lv5 -> var_cte .)
    LESSEQUAL       reduce using rule 89 (exp_lv5 -> var_cte .)
    MOREEQUAL       reduce using rule 89 (exp_lv5 -> var_cte .)
    EQUALTO         reduce using rule 89 (exp_lv5 -> var_cte .)
    NOTEQUALTO      reduce using rule 89 (exp_lv5 -> var_cte .)
    AND             reduce using rule 89 (exp_lv5 -> var_cte .)
    OR              reduce using rule 89 (exp_lv5 -> var_cte .)
    SCOLO           reduce using rule 89 (exp_lv5 -> var_cte .)
    RPAREN          reduce using rule 89 (exp_lv5 -> var_cte .)
    LPAREN          reduce using rule 89 (exp_lv5 -> var_cte .)
    COMA            reduce using rule 89 (exp_lv5 -> var_cte .)


state 138

    (90) exp_lv5 -> function_call .

    MUL             reduce using rule 90 (exp_lv5 -> function_call .)
    DIV             reduce using rule 90 (exp_lv5 -> function_call .)
    RESD            reduce using rule 90 (exp_lv5 -> function_call .)
    SUMA            reduce using rule 90 (exp_lv5 -> function_call .)
    SUB             reduce using rule 90 (exp_lv5 -> function_call .)
    LESST           reduce using rule 90 (exp_lv5 -> function_call .)
    MORET           reduce using rule 90 (exp_lv5 -> function_call .)
    LESSEQUAL       reduce using rule 90 (exp_lv5 -> function_call .)
    MOREEQUAL       reduce using rule 90 (exp_lv5 -> function_call .)
    EQUALTO         reduce using rule 90 (exp_lv5 -> function_call .)
    NOTEQUALTO      reduce using rule 90 (exp_lv5 -> function_call .)
    AND             reduce using rule 90 (exp_lv5 -> function_call .)
    OR              reduce using rule 90 (exp_lv5 -> function_call .)
    SCOLO           reduce using rule 90 (exp_lv5 -> function_call .)
    RPAREN          reduce using rule 90 (exp_lv5 -> function_call .)
    LPAREN          reduce using rule 90 (exp_lv5 -> function_call .)
    COMA            reduce using rule 90 (exp_lv5 -> function_call .)


state 139

    (91) exp_lv5 -> ID . np_quad_a2
    (92) exp_lv5 -> ID . np_quad_a2 array_access
    (63) function_call -> ID . LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> ID . LPAREN np_era RPAREN np_gosub
    (133) np_quad_a2 -> . empty
    (166) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 123
    LCORCH          reduce using rule 166 (empty -> .)
    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

  ! LPAREN          [ reduce using rule 166 (empty -> .) ]

    np_quad_a2                     shift and go to state 185
    empty                          shift and go to state 125

state 140

    (98) var_cte -> CTE_INT . np_quad_a1_int
    (128) np_quad_a1_int -> . empty
    (166) empty -> .

    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_a1_int                 shift and go to state 186
    empty                          shift and go to state 187

state 141

    (99) var_cte -> CTE_FLO . np_quad_a1_flt
    (129) np_quad_a1_flt -> . empty
    (166) empty -> .

    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_a1_flt                 shift and go to state 188
    empty                          shift and go to state 189

state 142

    (100) var_cte -> CTE_BOO . np_quad_a1_bol
    (132) np_quad_a1_bol -> . empty
    (166) empty -> .

    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_a1_bol                 shift and go to state 190
    empty                          shift and go to state 191

state 143

    (101) var_cte -> CTE_STRING . np_quad_a1_str
    (131) np_quad_a1_str -> . empty
    (166) empty -> .

    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_a1_str                 shift and go to state 192
    empty                          shift and go to state 193

state 144

    (102) var_cte -> CTE_CHAR . np_quad_a1_chr
    (130) np_quad_a1_chr -> . empty
    (166) empty -> .

    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_a1_chr                 shift and go to state 194
    empty                          shift and go to state 195

state 145

    (59) c_while -> WHILE np_statutes_b1 . LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3

    LPAREN          shift and go to state 196


state 146

    (150) np_statutes_b1 -> empty .

    LPAREN          reduce using rule 150 (np_statutes_b1 -> empty .)


state 147

    (60) c_do -> DO np_statutes_c1 . LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2

    LBRACK          shift and go to state 197


state 148

    (153) np_statutes_c1 -> empty .

    LBRACK          reduce using rule 153 (np_statutes_c1 -> empty .)


state 149

    (61) c_for -> FOR LPAREN . ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> FOR LPAREN . ID IN ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 198


state 150

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes . RBRACK np_var_b6 function

    RBRACK          shift and go to state 199


state 151

    (18) function_v1 -> type np_var_b4 ID np_var_b5 COMA . function_v1
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    type                           shift and go to state 77
    function_v1                    shift and go to state 200
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 152

    (19) function_v1 -> type np_var_b4 ID np_var_b5 array_declare .
    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare . COMA function_v1

    RPAREN          reduce using rule 19 (function_v1 -> type np_var_b4 ID np_var_b5 array_declare .)
    COMA            shift and go to state 201


state 153

    (123) np_var_3 -> empty .

    LCORCH          reduce using rule 123 (np_var_3 -> empty .)


state 154

    (36) array_declare_1 -> np_var_5 LCORCH CTE_INT . np_var_6 RCORCH
    (126) np_var_6 -> . empty
    (166) empty -> .

    RCORCH          reduce using rule 166 (empty -> .)

    np_var_6                       shift and go to state 202
    empty                          shift and go to state 203

state 155

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof . debug np_var_c3
    (164) debug -> . empty
    (166) empty -> .

    $end            reduce using rule 166 (empty -> .)

    debug                          shift and go to state 204
    empty                          shift and go to state 205

state 156

    (165) np_eof -> empty .

    $end            reduce using rule 165 (np_eof -> empty .)


state 157

    (47) assignation -> ID np_quad_a2 EQL . np_quad_b expression np_quad_assign SCOLO
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 206
    empty                          shift and go to state 127

state 158

    (48) assignation -> ID np_quad_a2 array_access . EQL np_quad_b expression np_quad_assign SCOLO

    EQL             shift and go to state 207


state 159

    (93) array_access -> np_quad_d1 . LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5

    LCORCH          shift and go to state 208


state 160

    (140) np_quad_d1 -> empty .

    LCORCH          reduce using rule 140 (np_quad_d1 -> empty .)


state 161

    (63) function_call -> ID LPAREN np_era . function_call_1 RPAREN np_gosub
    (64) function_call -> ID LPAREN np_era . RPAREN np_gosub
    (65) function_call_1 -> . expression np_param
    (66) function_call_1 -> . expression np_param COMA function_call_1
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    RPAREN          shift and go to state 210
    NOT             shift and go to state 135
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    function_call_1                shift and go to state 209
    expression                     shift and go to state 211
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 162

    (160) np_era -> empty .

    RPAREN          reduce using rule 160 (np_era -> empty .)
    NOT             reduce using rule 160 (np_era -> empty .)
    ID              reduce using rule 160 (np_era -> empty .)
    CTE_INT         reduce using rule 160 (np_era -> empty .)
    CTE_FLO         reduce using rule 160 (np_era -> empty .)
    CTE_BOO         reduce using rule 160 (np_era -> empty .)
    CTE_STRING      reduce using rule 160 (np_era -> empty .)
    CTE_CHAR        reduce using rule 160 (np_era -> empty .)


state 163

    (103) method -> ID CTE_INT DOT . method_t
    (104) method_t -> . DEG
    (105) method_t -> . SHORTPATH
    (106) method_t -> . DIAMETER
    (107) method_t -> . ADDNODE LPAREN expression RPAREN
    (108) method_t -> . DELETE
    (109) method_t -> . ARC

    DEG             shift and go to state 213
    SHORTPATH       shift and go to state 214
    DIAMETER        shift and go to state 215
    ADDNODE         shift and go to state 216
    DELETE          shift and go to state 217
    ARC             shift and go to state 218

    method_t                       shift and go to state 212

state 164

    (49) writing -> PRINT np_quad_b LPAREN . writing_1 RPAREN np_quad_print SCOLO
    (50) writing_1 -> . expression
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    writing_1                      shift and go to state 219
    expression                     shift and go to state 220
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 165

    (52) condition -> IF LPAREN expression . np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (147) np_statutes_a1 -> . empty
    (166) empty -> .

    RPAREN          reduce using rule 166 (empty -> .)

    np_statutes_a1                 shift and go to state 221
    empty                          shift and go to state 222

state 166

    (67) return -> RETURN expression np_return . SCOLO

    SCOLO           shift and go to state 223


state 167

    (163) np_return -> empty .

    SCOLO           reduce using rule 163 (np_return -> empty .)


state 168

    (69) expression -> exp_lv1 AND . np_quad_b expression np_quad_c0
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 224
    empty                          shift and go to state 127

state 169

    (70) expression -> exp_lv1 OR . np_quad_b expression np_quad_c0
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 225
    empty                          shift and go to state 127

state 170

    (71) exp_lv1 -> exp_lv2 exp_lv1_1 .

    AND             reduce using rule 71 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    OR              reduce using rule 71 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    SCOLO           reduce using rule 71 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    RPAREN          reduce using rule 71 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    LPAREN          reduce using rule 71 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    COMA            reduce using rule 71 (exp_lv1 -> exp_lv2 exp_lv1_1 .)


state 171

    (72) exp_lv1_1 -> LESST . np_quad_b exp_lv2 np_quad_c1
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 226
    empty                          shift and go to state 127

state 172

    (73) exp_lv1_1 -> MORET . np_quad_b exp_lv2 np_quad_c1
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 227
    empty                          shift and go to state 127

state 173

    (74) exp_lv1_1 -> LESSEQUAL . np_quad_b exp_lv2 np_quad_c1
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 228
    empty                          shift and go to state 127

state 174

    (75) exp_lv1_1 -> MOREEQUAL . np_quad_b exp_lv2 np_quad_c1
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 229
    empty                          shift and go to state 127

state 175

    (76) exp_lv1_1 -> EQUALTO . np_quad_b exp_lv2 np_quad_c1
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 230
    empty                          shift and go to state 127

state 176

    (77) exp_lv1_1 -> NOTEQUALTO . np_quad_b exp_lv2 np_quad_c1
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 231
    empty                          shift and go to state 127

state 177

    (78) exp_lv1_1 -> empty .

    AND             reduce using rule 78 (exp_lv1_1 -> empty .)
    OR              reduce using rule 78 (exp_lv1_1 -> empty .)
    SCOLO           reduce using rule 78 (exp_lv1_1 -> empty .)
    RPAREN          reduce using rule 78 (exp_lv1_1 -> empty .)
    LPAREN          reduce using rule 78 (exp_lv1_1 -> empty .)
    COMA            reduce using rule 78 (exp_lv1_1 -> empty .)


state 178

    (80) exp_lv2 -> exp_lv3 SUMA . np_quad_b exp_lv2 np_quad_c2
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 232
    empty                          shift and go to state 127

state 179

    (81) exp_lv2 -> exp_lv3 SUB . np_quad_b exp_lv2 np_quad_c2
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 233
    empty                          shift and go to state 127

state 180

    (83) exp_lv3 -> exp_lv4 MUL . np_quad_b exp_lv3 np_quad_c3
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 234
    empty                          shift and go to state 127

state 181

    (84) exp_lv3 -> exp_lv4 DIV . np_quad_b exp_lv3 np_quad_c3
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 235
    empty                          shift and go to state 127

state 182

    (85) exp_lv3 -> exp_lv4 RESD . np_quad_b exp_lv3 np_quad_c3
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 236
    empty                          shift and go to state 127

state 183

    (87) exp_lv4 -> NOT np_quad_b . exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv5                        shift and go to state 237
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 184

    (88) exp_lv5 -> RPAREN expression . LPAREN

    LPAREN          shift and go to state 238


state 185

    (91) exp_lv5 -> ID np_quad_a2 .
    (92) exp_lv5 -> ID np_quad_a2 . array_access
    (93) array_access -> . np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5
    (140) np_quad_d1 -> . empty
    (166) empty -> .

    MUL             reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    DIV             reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    RESD            reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    SUMA            reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    SUB             reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    LESST           reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    MORET           reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    LESSEQUAL       reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    MOREEQUAL       reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    EQUALTO         reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    NOTEQUALTO      reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    AND             reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    OR              reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    SCOLO           reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    RPAREN          reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    LPAREN          reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    COMA            reduce using rule 91 (exp_lv5 -> ID np_quad_a2 .)
    LCORCH          reduce using rule 166 (empty -> .)

    array_access                   shift and go to state 239
    np_quad_d1                     shift and go to state 159
    empty                          shift and go to state 160

state 186

    (98) var_cte -> CTE_INT np_quad_a1_int .

    MUL             reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    DIV             reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    RESD            reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    SUMA            reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    SUB             reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    LESST           reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    MORET           reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    LESSEQUAL       reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    MOREEQUAL       reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    EQUALTO         reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    NOTEQUALTO      reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    AND             reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    OR              reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    SCOLO           reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    RPAREN          reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    LPAREN          reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)
    COMA            reduce using rule 98 (var_cte -> CTE_INT np_quad_a1_int .)


state 187

    (128) np_quad_a1_int -> empty .

    MUL             reduce using rule 128 (np_quad_a1_int -> empty .)
    DIV             reduce using rule 128 (np_quad_a1_int -> empty .)
    RESD            reduce using rule 128 (np_quad_a1_int -> empty .)
    SUMA            reduce using rule 128 (np_quad_a1_int -> empty .)
    SUB             reduce using rule 128 (np_quad_a1_int -> empty .)
    LESST           reduce using rule 128 (np_quad_a1_int -> empty .)
    MORET           reduce using rule 128 (np_quad_a1_int -> empty .)
    LESSEQUAL       reduce using rule 128 (np_quad_a1_int -> empty .)
    MOREEQUAL       reduce using rule 128 (np_quad_a1_int -> empty .)
    EQUALTO         reduce using rule 128 (np_quad_a1_int -> empty .)
    NOTEQUALTO      reduce using rule 128 (np_quad_a1_int -> empty .)
    AND             reduce using rule 128 (np_quad_a1_int -> empty .)
    OR              reduce using rule 128 (np_quad_a1_int -> empty .)
    SCOLO           reduce using rule 128 (np_quad_a1_int -> empty .)
    RPAREN          reduce using rule 128 (np_quad_a1_int -> empty .)
    LPAREN          reduce using rule 128 (np_quad_a1_int -> empty .)
    COMA            reduce using rule 128 (np_quad_a1_int -> empty .)
    RCORCH          reduce using rule 128 (np_quad_a1_int -> empty .)


state 188

    (99) var_cte -> CTE_FLO np_quad_a1_flt .

    MUL             reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    DIV             reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    RESD            reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    SUMA            reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    SUB             reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    LESST           reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    MORET           reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    LESSEQUAL       reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    MOREEQUAL       reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    EQUALTO         reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    NOTEQUALTO      reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    AND             reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    OR              reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    SCOLO           reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    RPAREN          reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    LPAREN          reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)
    COMA            reduce using rule 99 (var_cte -> CTE_FLO np_quad_a1_flt .)


state 189

    (129) np_quad_a1_flt -> empty .

    MUL             reduce using rule 129 (np_quad_a1_flt -> empty .)
    DIV             reduce using rule 129 (np_quad_a1_flt -> empty .)
    RESD            reduce using rule 129 (np_quad_a1_flt -> empty .)
    SUMA            reduce using rule 129 (np_quad_a1_flt -> empty .)
    SUB             reduce using rule 129 (np_quad_a1_flt -> empty .)
    LESST           reduce using rule 129 (np_quad_a1_flt -> empty .)
    MORET           reduce using rule 129 (np_quad_a1_flt -> empty .)
    LESSEQUAL       reduce using rule 129 (np_quad_a1_flt -> empty .)
    MOREEQUAL       reduce using rule 129 (np_quad_a1_flt -> empty .)
    EQUALTO         reduce using rule 129 (np_quad_a1_flt -> empty .)
    NOTEQUALTO      reduce using rule 129 (np_quad_a1_flt -> empty .)
    AND             reduce using rule 129 (np_quad_a1_flt -> empty .)
    OR              reduce using rule 129 (np_quad_a1_flt -> empty .)
    SCOLO           reduce using rule 129 (np_quad_a1_flt -> empty .)
    RPAREN          reduce using rule 129 (np_quad_a1_flt -> empty .)
    LPAREN          reduce using rule 129 (np_quad_a1_flt -> empty .)
    COMA            reduce using rule 129 (np_quad_a1_flt -> empty .)


state 190

    (100) var_cte -> CTE_BOO np_quad_a1_bol .

    MUL             reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    DIV             reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    RESD            reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    SUMA            reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    SUB             reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    LESST           reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    MORET           reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    LESSEQUAL       reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    MOREEQUAL       reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    EQUALTO         reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    NOTEQUALTO      reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    AND             reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    OR              reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    SCOLO           reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    RPAREN          reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    LPAREN          reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)
    COMA            reduce using rule 100 (var_cte -> CTE_BOO np_quad_a1_bol .)


state 191

    (132) np_quad_a1_bol -> empty .

    MUL             reduce using rule 132 (np_quad_a1_bol -> empty .)
    DIV             reduce using rule 132 (np_quad_a1_bol -> empty .)
    RESD            reduce using rule 132 (np_quad_a1_bol -> empty .)
    SUMA            reduce using rule 132 (np_quad_a1_bol -> empty .)
    SUB             reduce using rule 132 (np_quad_a1_bol -> empty .)
    LESST           reduce using rule 132 (np_quad_a1_bol -> empty .)
    MORET           reduce using rule 132 (np_quad_a1_bol -> empty .)
    LESSEQUAL       reduce using rule 132 (np_quad_a1_bol -> empty .)
    MOREEQUAL       reduce using rule 132 (np_quad_a1_bol -> empty .)
    EQUALTO         reduce using rule 132 (np_quad_a1_bol -> empty .)
    NOTEQUALTO      reduce using rule 132 (np_quad_a1_bol -> empty .)
    AND             reduce using rule 132 (np_quad_a1_bol -> empty .)
    OR              reduce using rule 132 (np_quad_a1_bol -> empty .)
    SCOLO           reduce using rule 132 (np_quad_a1_bol -> empty .)
    RPAREN          reduce using rule 132 (np_quad_a1_bol -> empty .)
    LPAREN          reduce using rule 132 (np_quad_a1_bol -> empty .)
    COMA            reduce using rule 132 (np_quad_a1_bol -> empty .)


state 192

    (101) var_cte -> CTE_STRING np_quad_a1_str .

    MUL             reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    DIV             reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    RESD            reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    SUMA            reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    SUB             reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    LESST           reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    MORET           reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    LESSEQUAL       reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    MOREEQUAL       reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    EQUALTO         reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    NOTEQUALTO      reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    AND             reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    OR              reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    SCOLO           reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    RPAREN          reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    LPAREN          reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)
    COMA            reduce using rule 101 (var_cte -> CTE_STRING np_quad_a1_str .)


state 193

    (131) np_quad_a1_str -> empty .

    MUL             reduce using rule 131 (np_quad_a1_str -> empty .)
    DIV             reduce using rule 131 (np_quad_a1_str -> empty .)
    RESD            reduce using rule 131 (np_quad_a1_str -> empty .)
    SUMA            reduce using rule 131 (np_quad_a1_str -> empty .)
    SUB             reduce using rule 131 (np_quad_a1_str -> empty .)
    LESST           reduce using rule 131 (np_quad_a1_str -> empty .)
    MORET           reduce using rule 131 (np_quad_a1_str -> empty .)
    LESSEQUAL       reduce using rule 131 (np_quad_a1_str -> empty .)
    MOREEQUAL       reduce using rule 131 (np_quad_a1_str -> empty .)
    EQUALTO         reduce using rule 131 (np_quad_a1_str -> empty .)
    NOTEQUALTO      reduce using rule 131 (np_quad_a1_str -> empty .)
    AND             reduce using rule 131 (np_quad_a1_str -> empty .)
    OR              reduce using rule 131 (np_quad_a1_str -> empty .)
    SCOLO           reduce using rule 131 (np_quad_a1_str -> empty .)
    RPAREN          reduce using rule 131 (np_quad_a1_str -> empty .)
    LPAREN          reduce using rule 131 (np_quad_a1_str -> empty .)
    COMA            reduce using rule 131 (np_quad_a1_str -> empty .)


state 194

    (102) var_cte -> CTE_CHAR np_quad_a1_chr .

    MUL             reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    DIV             reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    RESD            reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    SUMA            reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    SUB             reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    LESST           reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    MORET           reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    LESSEQUAL       reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    MOREEQUAL       reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    EQUALTO         reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    NOTEQUALTO      reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    AND             reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    OR              reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    SCOLO           reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    RPAREN          reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    LPAREN          reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    COMA            reduce using rule 102 (var_cte -> CTE_CHAR np_quad_a1_chr .)


state 195

    (130) np_quad_a1_chr -> empty .

    MUL             reduce using rule 130 (np_quad_a1_chr -> empty .)
    DIV             reduce using rule 130 (np_quad_a1_chr -> empty .)
    RESD            reduce using rule 130 (np_quad_a1_chr -> empty .)
    SUMA            reduce using rule 130 (np_quad_a1_chr -> empty .)
    SUB             reduce using rule 130 (np_quad_a1_chr -> empty .)
    LESST           reduce using rule 130 (np_quad_a1_chr -> empty .)
    MORET           reduce using rule 130 (np_quad_a1_chr -> empty .)
    LESSEQUAL       reduce using rule 130 (np_quad_a1_chr -> empty .)
    MOREEQUAL       reduce using rule 130 (np_quad_a1_chr -> empty .)
    EQUALTO         reduce using rule 130 (np_quad_a1_chr -> empty .)
    NOTEQUALTO      reduce using rule 130 (np_quad_a1_chr -> empty .)
    AND             reduce using rule 130 (np_quad_a1_chr -> empty .)
    OR              reduce using rule 130 (np_quad_a1_chr -> empty .)
    SCOLO           reduce using rule 130 (np_quad_a1_chr -> empty .)
    RPAREN          reduce using rule 130 (np_quad_a1_chr -> empty .)
    LPAREN          reduce using rule 130 (np_quad_a1_chr -> empty .)
    COMA            reduce using rule 130 (np_quad_a1_chr -> empty .)


state 196

    (59) c_while -> WHILE np_statutes_b1 LPAREN . expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 240
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 197

    (60) c_do -> DO np_statutes_c1 LBRACK . statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes                       shift and go to state 241
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 198

    (61) c_for -> FOR LPAREN ID . SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> FOR LPAREN ID . IN ID RPAREN LBRACK statutes RBRACK

    SCOLO           shift and go to state 242
    IN              shift and go to state 243


state 199

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK . np_var_b6 function
    (117) np_var_b6 -> . empty
    (166) empty -> .

    VOID            reduce using rule 166 (empty -> .)
    INT             reduce using rule 166 (empty -> .)
    FLOAT           reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    BOOL            reduce using rule 166 (empty -> .)
    NODE            reduce using rule 166 (empty -> .)
    ARC             reduce using rule 166 (empty -> .)
    UNDIRECTED      reduce using rule 166 (empty -> .)
    DIRECTED        reduce using rule 166 (empty -> .)
    MAIN            reduce using rule 166 (empty -> .)

    np_var_b6                      shift and go to state 244
    empty                          shift and go to state 245

state 200

    (18) function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1 .

    RPAREN          reduce using rule 18 (function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1 .)


state 201

    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA . function_v1
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    type                           shift and go to state 77
    function_v1                    shift and go to state 246
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 202

    (36) array_declare_1 -> np_var_5 LCORCH CTE_INT np_var_6 . RCORCH

    RCORCH          shift and go to state 247


state 203

    (126) np_var_6 -> empty .

    RCORCH          reduce using rule 126 (np_var_6 -> empty .)


state 204

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug . np_var_c3
    (120) np_var_c3 -> . empty
    (166) empty -> .

    $end            reduce using rule 166 (empty -> .)

    np_var_c3                      shift and go to state 248
    empty                          shift and go to state 249

state 205

    (164) debug -> empty .

    $end            reduce using rule 164 (debug -> empty .)


state 206

    (47) assignation -> ID np_quad_a2 EQL np_quad_b . expression np_quad_assign SCOLO
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 250
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 207

    (48) assignation -> ID np_quad_a2 array_access EQL . np_quad_b expression np_quad_assign SCOLO
    (134) np_quad_b -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_quad_b                      shift and go to state 251
    empty                          shift and go to state 127

state 208

    (93) array_access -> np_quad_d1 LCORCH . arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5
    (94) arrary_access_1 -> . CTE_INT np_quad_a1_int
    (95) arrary_access_1 -> . ID np_quad_a2

    CTE_INT         shift and go to state 253
    ID              shift and go to state 254

    arrary_access_1                shift and go to state 252

state 209

    (63) function_call -> ID LPAREN np_era function_call_1 . RPAREN np_gosub

    RPAREN          shift and go to state 255


state 210

    (64) function_call -> ID LPAREN np_era RPAREN . np_gosub
    (88) exp_lv5 -> RPAREN . expression LPAREN
    (161) np_gosub -> . empty
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (166) empty -> .
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

  ! shift/reduce conflict for RPAREN resolved as shift
    SCOLO           reduce using rule 166 (empty -> .)
    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)
    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

  ! RPAREN          [ reduce using rule 166 (empty -> .) ]

    np_gosub                       shift and go to state 256
    expression                     shift and go to state 184
    empty                          shift and go to state 257
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 211

    (65) function_call_1 -> expression . np_param
    (66) function_call_1 -> expression . np_param COMA function_call_1
    (162) np_param -> . empty
    (166) empty -> .

    COMA            reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)

    np_param                       shift and go to state 258
    empty                          shift and go to state 259

state 212

    (103) method -> ID CTE_INT DOT method_t .

    ID              reduce using rule 103 (method -> ID CTE_INT DOT method_t .)
    PRINT           reduce using rule 103 (method -> ID CTE_INT DOT method_t .)
    IF              reduce using rule 103 (method -> ID CTE_INT DOT method_t .)
    RETURN          reduce using rule 103 (method -> ID CTE_INT DOT method_t .)
    WHILE           reduce using rule 103 (method -> ID CTE_INT DOT method_t .)
    DO              reduce using rule 103 (method -> ID CTE_INT DOT method_t .)
    FOR             reduce using rule 103 (method -> ID CTE_INT DOT method_t .)
    RBRACK          reduce using rule 103 (method -> ID CTE_INT DOT method_t .)


state 213

    (104) method_t -> DEG .

    ID              reduce using rule 104 (method_t -> DEG .)
    PRINT           reduce using rule 104 (method_t -> DEG .)
    IF              reduce using rule 104 (method_t -> DEG .)
    RETURN          reduce using rule 104 (method_t -> DEG .)
    WHILE           reduce using rule 104 (method_t -> DEG .)
    DO              reduce using rule 104 (method_t -> DEG .)
    FOR             reduce using rule 104 (method_t -> DEG .)
    RBRACK          reduce using rule 104 (method_t -> DEG .)


state 214

    (105) method_t -> SHORTPATH .

    ID              reduce using rule 105 (method_t -> SHORTPATH .)
    PRINT           reduce using rule 105 (method_t -> SHORTPATH .)
    IF              reduce using rule 105 (method_t -> SHORTPATH .)
    RETURN          reduce using rule 105 (method_t -> SHORTPATH .)
    WHILE           reduce using rule 105 (method_t -> SHORTPATH .)
    DO              reduce using rule 105 (method_t -> SHORTPATH .)
    FOR             reduce using rule 105 (method_t -> SHORTPATH .)
    RBRACK          reduce using rule 105 (method_t -> SHORTPATH .)


state 215

    (106) method_t -> DIAMETER .

    ID              reduce using rule 106 (method_t -> DIAMETER .)
    PRINT           reduce using rule 106 (method_t -> DIAMETER .)
    IF              reduce using rule 106 (method_t -> DIAMETER .)
    RETURN          reduce using rule 106 (method_t -> DIAMETER .)
    WHILE           reduce using rule 106 (method_t -> DIAMETER .)
    DO              reduce using rule 106 (method_t -> DIAMETER .)
    FOR             reduce using rule 106 (method_t -> DIAMETER .)
    RBRACK          reduce using rule 106 (method_t -> DIAMETER .)


state 216

    (107) method_t -> ADDNODE . LPAREN expression RPAREN

    LPAREN          shift and go to state 260


state 217

    (108) method_t -> DELETE .

    ID              reduce using rule 108 (method_t -> DELETE .)
    PRINT           reduce using rule 108 (method_t -> DELETE .)
    IF              reduce using rule 108 (method_t -> DELETE .)
    RETURN          reduce using rule 108 (method_t -> DELETE .)
    WHILE           reduce using rule 108 (method_t -> DELETE .)
    DO              reduce using rule 108 (method_t -> DELETE .)
    FOR             reduce using rule 108 (method_t -> DELETE .)
    RBRACK          reduce using rule 108 (method_t -> DELETE .)


state 218

    (109) method_t -> ARC .

    ID              reduce using rule 109 (method_t -> ARC .)
    PRINT           reduce using rule 109 (method_t -> ARC .)
    IF              reduce using rule 109 (method_t -> ARC .)
    RETURN          reduce using rule 109 (method_t -> ARC .)
    WHILE           reduce using rule 109 (method_t -> ARC .)
    DO              reduce using rule 109 (method_t -> ARC .)
    FOR             reduce using rule 109 (method_t -> ARC .)
    RBRACK          reduce using rule 109 (method_t -> ARC .)


state 219

    (49) writing -> PRINT np_quad_b LPAREN writing_1 . RPAREN np_quad_print SCOLO

    RPAREN          shift and go to state 261


state 220

    (50) writing_1 -> expression .

    RPAREN          reduce using rule 50 (writing_1 -> expression .)


state 221

    (52) condition -> IF LPAREN expression np_statutes_a1 . RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3

    RPAREN          shift and go to state 262


state 222

    (147) np_statutes_a1 -> empty .

    RPAREN          reduce using rule 147 (np_statutes_a1 -> empty .)


state 223

    (67) return -> RETURN expression np_return SCOLO .

    ID              reduce using rule 67 (return -> RETURN expression np_return SCOLO .)
    PRINT           reduce using rule 67 (return -> RETURN expression np_return SCOLO .)
    IF              reduce using rule 67 (return -> RETURN expression np_return SCOLO .)
    RETURN          reduce using rule 67 (return -> RETURN expression np_return SCOLO .)
    WHILE           reduce using rule 67 (return -> RETURN expression np_return SCOLO .)
    DO              reduce using rule 67 (return -> RETURN expression np_return SCOLO .)
    FOR             reduce using rule 67 (return -> RETURN expression np_return SCOLO .)
    RBRACK          reduce using rule 67 (return -> RETURN expression np_return SCOLO .)


state 224

    (69) expression -> exp_lv1 AND np_quad_b . expression np_quad_c0
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv1                        shift and go to state 130
    expression                     shift and go to state 263
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 225

    (70) expression -> exp_lv1 OR np_quad_b . expression np_quad_c0
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv1                        shift and go to state 130
    expression                     shift and go to state 264
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 226

    (72) exp_lv1_1 -> LESST np_quad_b . exp_lv2 np_quad_c1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv2                        shift and go to state 265
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 227

    (73) exp_lv1_1 -> MORET np_quad_b . exp_lv2 np_quad_c1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv2                        shift and go to state 266
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 228

    (74) exp_lv1_1 -> LESSEQUAL np_quad_b . exp_lv2 np_quad_c1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv2                        shift and go to state 267
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 229

    (75) exp_lv1_1 -> MOREEQUAL np_quad_b . exp_lv2 np_quad_c1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv2                        shift and go to state 268
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 230

    (76) exp_lv1_1 -> EQUALTO np_quad_b . exp_lv2 np_quad_c1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv2                        shift and go to state 269
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 231

    (77) exp_lv1_1 -> NOTEQUALTO np_quad_b . exp_lv2 np_quad_c1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv2                        shift and go to state 270
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 232

    (80) exp_lv2 -> exp_lv3 SUMA np_quad_b . exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv3                        shift and go to state 132
    exp_lv2                        shift and go to state 271
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 233

    (81) exp_lv2 -> exp_lv3 SUB np_quad_b . exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv3                        shift and go to state 132
    exp_lv2                        shift and go to state 272
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 234

    (83) exp_lv3 -> exp_lv4 MUL np_quad_b . exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv4                        shift and go to state 133
    exp_lv3                        shift and go to state 273
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 235

    (84) exp_lv3 -> exp_lv4 DIV np_quad_b . exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv4                        shift and go to state 133
    exp_lv3                        shift and go to state 274
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 236

    (85) exp_lv3 -> exp_lv4 RESD np_quad_b . exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    exp_lv4                        shift and go to state 133
    exp_lv3                        shift and go to state 275
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 237

    (87) exp_lv4 -> NOT np_quad_b exp_lv5 . np_quad_c4
    (139) np_quad_c4 -> . empty
    (166) empty -> .

    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c4                     shift and go to state 276
    empty                          shift and go to state 277

state 238

    (88) exp_lv5 -> RPAREN expression LPAREN .

    MUL             reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    DIV             reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    RESD            reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    SUMA            reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    SUB             reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    LESST           reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    MORET           reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    LESSEQUAL       reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    MOREEQUAL       reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    EQUALTO         reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    NOTEQUALTO      reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    AND             reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    OR              reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    SCOLO           reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    RPAREN          reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    LPAREN          reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)
    COMA            reduce using rule 88 (exp_lv5 -> RPAREN expression LPAREN .)


state 239

    (92) exp_lv5 -> ID np_quad_a2 array_access .

    MUL             reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    DIV             reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    RESD            reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    SUMA            reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    SUB             reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    LESST           reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    MORET           reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    LESSEQUAL       reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    MOREEQUAL       reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    EQUALTO         reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    NOTEQUALTO      reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    AND             reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    OR              reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    SCOLO           reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    RPAREN          reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    LPAREN          reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)
    COMA            reduce using rule 92 (exp_lv5 -> ID np_quad_a2 array_access .)


state 240

    (59) c_while -> WHILE np_statutes_b1 LPAREN expression . RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3

    RPAREN          shift and go to state 278


state 241

    (60) c_do -> DO np_statutes_c1 LBRACK statutes . RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2

    RBRACK          shift and go to state 279


state 242

    (61) c_for -> FOR LPAREN ID SCOLO . np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (155) np_statutes_d1 -> . empty
    (166) empty -> .

    NOT             reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CTE_INT         reduce using rule 166 (empty -> .)
    CTE_FLO         reduce using rule 166 (empty -> .)
    CTE_BOO         reduce using rule 166 (empty -> .)
    CTE_STRING      reduce using rule 166 (empty -> .)
    CTE_CHAR        reduce using rule 166 (empty -> .)

    np_statutes_d1                 shift and go to state 280
    empty                          shift and go to state 281

state 243

    (62) c_forin -> FOR LPAREN ID IN . ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 282


state 244

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 . function
    (8) function -> . function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (9) function -> . empty
    (10) function_t -> . VOID np_var_1
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (166) empty -> .
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    VOID            shift and go to state 31
    MAIN            reduce using rule 166 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    function_t                     shift and go to state 29
    function                       shift and go to state 283
    empty                          shift and go to state 30
    t_number                       shift and go to state 32
    t_string                       shift and go to state 33
    t_bool                         shift and go to state 34
    t_graph                        shift and go to state 35

state 245

    (117) np_var_b6 -> empty .

    VOID            reduce using rule 117 (np_var_b6 -> empty .)
    INT             reduce using rule 117 (np_var_b6 -> empty .)
    FLOAT           reduce using rule 117 (np_var_b6 -> empty .)
    STRING          reduce using rule 117 (np_var_b6 -> empty .)
    CHAR            reduce using rule 117 (np_var_b6 -> empty .)
    BOOL            reduce using rule 117 (np_var_b6 -> empty .)
    NODE            reduce using rule 117 (np_var_b6 -> empty .)
    ARC             reduce using rule 117 (np_var_b6 -> empty .)
    UNDIRECTED      reduce using rule 117 (np_var_b6 -> empty .)
    DIRECTED        reduce using rule 117 (np_var_b6 -> empty .)
    MAIN            reduce using rule 117 (np_var_b6 -> empty .)


state 246

    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1 .

    RPAREN          reduce using rule 20 (function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1 .)


state 247

    (36) array_declare_1 -> np_var_5 LCORCH CTE_INT np_var_6 RCORCH .

    COMA            reduce using rule 36 (array_declare_1 -> np_var_5 LCORCH CTE_INT np_var_6 RCORCH .)
    SCOLO           reduce using rule 36 (array_declare_1 -> np_var_5 LCORCH CTE_INT np_var_6 RCORCH .)
    RPAREN          reduce using rule 36 (array_declare_1 -> np_var_5 LCORCH CTE_INT np_var_6 RCORCH .)


state 248

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3 .

    $end            reduce using rule 21 (body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3 .)


state 249

    (120) np_var_c3 -> empty .

    $end            reduce using rule 120 (np_var_c3 -> empty .)


state 250

    (47) assignation -> ID np_quad_a2 EQL np_quad_b expression . np_quad_assign SCOLO
    (146) np_quad_assign -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)

    np_quad_assign                 shift and go to state 284
    empty                          shift and go to state 285

state 251

    (48) assignation -> ID np_quad_a2 array_access EQL np_quad_b . expression np_quad_assign SCOLO
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 286
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 252

    (93) array_access -> np_quad_d1 LCORCH arrary_access_1 . np_quad_d2 RCORCH arrary_access_2 np_quad_d5
    (141) np_quad_d2 -> . empty
    (166) empty -> .

    RCORCH          reduce using rule 166 (empty -> .)

    np_quad_d2                     shift and go to state 287
    empty                          shift and go to state 288

state 253

    (94) arrary_access_1 -> CTE_INT . np_quad_a1_int
    (128) np_quad_a1_int -> . empty
    (166) empty -> .

    RCORCH          reduce using rule 166 (empty -> .)

    np_quad_a1_int                 shift and go to state 289
    empty                          shift and go to state 187

state 254

    (95) arrary_access_1 -> ID . np_quad_a2
    (133) np_quad_a2 -> . empty
    (166) empty -> .

    RCORCH          reduce using rule 166 (empty -> .)

    np_quad_a2                     shift and go to state 290
    empty                          shift and go to state 125

state 255

    (63) function_call -> ID LPAREN np_era function_call_1 RPAREN . np_gosub
    (161) np_gosub -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)
    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_gosub                       shift and go to state 291
    empty                          shift and go to state 257

state 256

    (64) function_call -> ID LPAREN np_era RPAREN np_gosub .

    SCOLO           reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    MUL             reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    DIV             reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    RESD            reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    SUMA            reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    SUB             reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    LESST           reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    MORET           reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    LESSEQUAL       reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    MOREEQUAL       reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    EQUALTO         reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    NOTEQUALTO      reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    AND             reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    OR              reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    RPAREN          reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    LPAREN          reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)
    COMA            reduce using rule 64 (function_call -> ID LPAREN np_era RPAREN np_gosub .)


state 257

    (161) np_gosub -> empty .

    SCOLO           reduce using rule 161 (np_gosub -> empty .)
    MUL             reduce using rule 161 (np_gosub -> empty .)
    DIV             reduce using rule 161 (np_gosub -> empty .)
    RESD            reduce using rule 161 (np_gosub -> empty .)
    SUMA            reduce using rule 161 (np_gosub -> empty .)
    SUB             reduce using rule 161 (np_gosub -> empty .)
    LESST           reduce using rule 161 (np_gosub -> empty .)
    MORET           reduce using rule 161 (np_gosub -> empty .)
    LESSEQUAL       reduce using rule 161 (np_gosub -> empty .)
    MOREEQUAL       reduce using rule 161 (np_gosub -> empty .)
    EQUALTO         reduce using rule 161 (np_gosub -> empty .)
    NOTEQUALTO      reduce using rule 161 (np_gosub -> empty .)
    AND             reduce using rule 161 (np_gosub -> empty .)
    OR              reduce using rule 161 (np_gosub -> empty .)
    RPAREN          reduce using rule 161 (np_gosub -> empty .)
    LPAREN          reduce using rule 161 (np_gosub -> empty .)
    COMA            reduce using rule 161 (np_gosub -> empty .)


state 258

    (65) function_call_1 -> expression np_param .
    (66) function_call_1 -> expression np_param . COMA function_call_1

    RPAREN          reduce using rule 65 (function_call_1 -> expression np_param .)
    COMA            shift and go to state 292


state 259

    (162) np_param -> empty .

    COMA            reduce using rule 162 (np_param -> empty .)
    RPAREN          reduce using rule 162 (np_param -> empty .)


state 260

    (107) method_t -> ADDNODE LPAREN . expression RPAREN
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 293
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 261

    (49) writing -> PRINT np_quad_b LPAREN writing_1 RPAREN . np_quad_print SCOLO
    (145) np_quad_print -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)

    np_quad_print                  shift and go to state 294
    empty                          shift and go to state 295

state 262

    (52) condition -> IF LPAREN expression np_statutes_a1 RPAREN . LBRACK statutes RBRACK condition_1 np_statutes_a3

    LBRACK          shift and go to state 296


state 263

    (69) expression -> exp_lv1 AND np_quad_b expression . np_quad_c0
    (135) np_quad_c0 -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c0                     shift and go to state 297
    empty                          shift and go to state 298

state 264

    (70) expression -> exp_lv1 OR np_quad_b expression . np_quad_c0
    (135) np_quad_c0 -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c0                     shift and go to state 299
    empty                          shift and go to state 298

state 265

    (72) exp_lv1_1 -> LESST np_quad_b exp_lv2 . np_quad_c1
    (136) np_quad_c1 -> . empty
    (166) empty -> .

    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c1                     shift and go to state 300
    empty                          shift and go to state 301

state 266

    (73) exp_lv1_1 -> MORET np_quad_b exp_lv2 . np_quad_c1
    (136) np_quad_c1 -> . empty
    (166) empty -> .

    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c1                     shift and go to state 302
    empty                          shift and go to state 301

state 267

    (74) exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 . np_quad_c1
    (136) np_quad_c1 -> . empty
    (166) empty -> .

    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c1                     shift and go to state 303
    empty                          shift and go to state 301

state 268

    (75) exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 . np_quad_c1
    (136) np_quad_c1 -> . empty
    (166) empty -> .

    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c1                     shift and go to state 304
    empty                          shift and go to state 301

state 269

    (76) exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 . np_quad_c1
    (136) np_quad_c1 -> . empty
    (166) empty -> .

    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c1                     shift and go to state 305
    empty                          shift and go to state 301

state 270

    (77) exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 . np_quad_c1
    (136) np_quad_c1 -> . empty
    (166) empty -> .

    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c1                     shift and go to state 306
    empty                          shift and go to state 301

state 271

    (80) exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 . np_quad_c2
    (137) np_quad_c2 -> . empty
    (166) empty -> .

    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c2                     shift and go to state 307
    empty                          shift and go to state 308

state 272

    (81) exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 . np_quad_c2
    (137) np_quad_c2 -> . empty
    (166) empty -> .

    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c2                     shift and go to state 309
    empty                          shift and go to state 308

state 273

    (83) exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 . np_quad_c3
    (138) np_quad_c3 -> . empty
    (166) empty -> .

    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c3                     shift and go to state 310
    empty                          shift and go to state 311

state 274

    (84) exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 . np_quad_c3
    (138) np_quad_c3 -> . empty
    (166) empty -> .

    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c3                     shift and go to state 312
    empty                          shift and go to state 311

state 275

    (85) exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 . np_quad_c3
    (138) np_quad_c3 -> . empty
    (166) empty -> .

    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_c3                     shift and go to state 313
    empty                          shift and go to state 311

state 276

    (87) exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .

    MUL             reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    DIV             reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    RESD            reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    SUMA            reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    SUB             reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    LESST           reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    MORET           reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    LESSEQUAL       reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    MOREEQUAL       reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    EQUALTO         reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    NOTEQUALTO      reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    AND             reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    OR              reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    SCOLO           reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    RPAREN          reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    LPAREN          reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    COMA            reduce using rule 87 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)


state 277

    (139) np_quad_c4 -> empty .

    MUL             reduce using rule 139 (np_quad_c4 -> empty .)
    DIV             reduce using rule 139 (np_quad_c4 -> empty .)
    RESD            reduce using rule 139 (np_quad_c4 -> empty .)
    SUMA            reduce using rule 139 (np_quad_c4 -> empty .)
    SUB             reduce using rule 139 (np_quad_c4 -> empty .)
    LESST           reduce using rule 139 (np_quad_c4 -> empty .)
    MORET           reduce using rule 139 (np_quad_c4 -> empty .)
    LESSEQUAL       reduce using rule 139 (np_quad_c4 -> empty .)
    MOREEQUAL       reduce using rule 139 (np_quad_c4 -> empty .)
    EQUALTO         reduce using rule 139 (np_quad_c4 -> empty .)
    NOTEQUALTO      reduce using rule 139 (np_quad_c4 -> empty .)
    AND             reduce using rule 139 (np_quad_c4 -> empty .)
    OR              reduce using rule 139 (np_quad_c4 -> empty .)
    SCOLO           reduce using rule 139 (np_quad_c4 -> empty .)
    RPAREN          reduce using rule 139 (np_quad_c4 -> empty .)
    LPAREN          reduce using rule 139 (np_quad_c4 -> empty .)
    COMA            reduce using rule 139 (np_quad_c4 -> empty .)


state 278

    (59) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN . np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (151) np_statutes_b2 -> . empty
    (166) empty -> .

    LBRACK          reduce using rule 166 (empty -> .)

    np_statutes_b2                 shift and go to state 314
    empty                          shift and go to state 315

state 279

    (60) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK . WHILE LPAREN expression RPAREN SCOLO np_statutes_c2

    WHILE           shift and go to state 316


state 280

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 . expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 317
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 281

    (155) np_statutes_d1 -> empty .

    NOT             reduce using rule 155 (np_statutes_d1 -> empty .)
    RPAREN          reduce using rule 155 (np_statutes_d1 -> empty .)
    ID              reduce using rule 155 (np_statutes_d1 -> empty .)
    CTE_INT         reduce using rule 155 (np_statutes_d1 -> empty .)
    CTE_FLO         reduce using rule 155 (np_statutes_d1 -> empty .)
    CTE_BOO         reduce using rule 155 (np_statutes_d1 -> empty .)
    CTE_STRING      reduce using rule 155 (np_statutes_d1 -> empty .)
    CTE_CHAR        reduce using rule 155 (np_statutes_d1 -> empty .)


state 282

    (62) c_forin -> FOR LPAREN ID IN ID . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 318


state 283

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function .

    MAIN            reduce using rule 8 (function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function .)


state 284

    (47) assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign . SCOLO

    SCOLO           shift and go to state 319


state 285

    (146) np_quad_assign -> empty .

    SCOLO           reduce using rule 146 (np_quad_assign -> empty .)


state 286

    (48) assignation -> ID np_quad_a2 array_access EQL np_quad_b expression . np_quad_assign SCOLO
    (146) np_quad_assign -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)

    np_quad_assign                 shift and go to state 320
    empty                          shift and go to state 285

state 287

    (93) array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 . RCORCH arrary_access_2 np_quad_d5

    RCORCH          shift and go to state 321


state 288

    (141) np_quad_d2 -> empty .

    RCORCH          reduce using rule 141 (np_quad_d2 -> empty .)


state 289

    (94) arrary_access_1 -> CTE_INT np_quad_a1_int .

    RCORCH          reduce using rule 94 (arrary_access_1 -> CTE_INT np_quad_a1_int .)


state 290

    (95) arrary_access_1 -> ID np_quad_a2 .

    RCORCH          reduce using rule 95 (arrary_access_1 -> ID np_quad_a2 .)


state 291

    (63) function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .

    SCOLO           reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    MUL             reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    DIV             reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    RESD            reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    SUMA            reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    SUB             reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    LESST           reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    MORET           reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    LESSEQUAL       reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    MOREEQUAL       reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    EQUALTO         reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    NOTEQUALTO      reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    AND             reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    OR              reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    RPAREN          reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    LPAREN          reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)
    COMA            reduce using rule 63 (function_call -> ID LPAREN np_era function_call_1 RPAREN np_gosub .)


state 292

    (66) function_call_1 -> expression np_param COMA . function_call_1
    (65) function_call_1 -> . expression np_param
    (66) function_call_1 -> . expression np_param COMA function_call_1
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 211
    function_call_1                shift and go to state 322
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 293

    (107) method_t -> ADDNODE LPAREN expression . RPAREN

    RPAREN          shift and go to state 323


state 294

    (49) writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print . SCOLO

    SCOLO           shift and go to state 324


state 295

    (145) np_quad_print -> empty .

    SCOLO           reduce using rule 145 (np_quad_print -> empty .)


state 296

    (52) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK . statutes RBRACK condition_1 np_statutes_a3
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes                       shift and go to state 325
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 297

    (69) expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .

    SCOLO           reduce using rule 69 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)
    RPAREN          reduce using rule 69 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)
    LPAREN          reduce using rule 69 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)
    COMA            reduce using rule 69 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)


state 298

    (135) np_quad_c0 -> empty .

    SCOLO           reduce using rule 135 (np_quad_c0 -> empty .)
    RPAREN          reduce using rule 135 (np_quad_c0 -> empty .)
    LPAREN          reduce using rule 135 (np_quad_c0 -> empty .)
    COMA            reduce using rule 135 (np_quad_c0 -> empty .)


state 299

    (70) expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .

    SCOLO           reduce using rule 70 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)
    RPAREN          reduce using rule 70 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)
    LPAREN          reduce using rule 70 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)
    COMA            reduce using rule 70 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)


state 300

    (72) exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 72 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 72 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 72 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 72 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 72 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 72 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)


state 301

    (136) np_quad_c1 -> empty .

    AND             reduce using rule 136 (np_quad_c1 -> empty .)
    OR              reduce using rule 136 (np_quad_c1 -> empty .)
    SCOLO           reduce using rule 136 (np_quad_c1 -> empty .)
    RPAREN          reduce using rule 136 (np_quad_c1 -> empty .)
    LPAREN          reduce using rule 136 (np_quad_c1 -> empty .)
    COMA            reduce using rule 136 (np_quad_c1 -> empty .)


state 302

    (73) exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 73 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 73 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 73 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 73 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 73 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 73 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)


state 303

    (74) exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 74 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 74 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 74 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 74 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 74 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 74 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)


state 304

    (75) exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 75 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 75 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 75 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 75 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 75 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 75 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)


state 305

    (76) exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 76 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 76 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 76 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 76 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 76 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 76 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)


state 306

    (77) exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 77 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 77 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 77 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 77 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 77 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 77 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)


state 307

    (80) exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .

    LESST           reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    MORET           reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    LESSEQUAL       reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    MOREEQUAL       reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    EQUALTO         reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    NOTEQUALTO      reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    AND             reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    OR              reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    SCOLO           reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    RPAREN          reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    LPAREN          reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    COMA            reduce using rule 80 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)


state 308

    (137) np_quad_c2 -> empty .

    LESST           reduce using rule 137 (np_quad_c2 -> empty .)
    MORET           reduce using rule 137 (np_quad_c2 -> empty .)
    LESSEQUAL       reduce using rule 137 (np_quad_c2 -> empty .)
    MOREEQUAL       reduce using rule 137 (np_quad_c2 -> empty .)
    EQUALTO         reduce using rule 137 (np_quad_c2 -> empty .)
    NOTEQUALTO      reduce using rule 137 (np_quad_c2 -> empty .)
    AND             reduce using rule 137 (np_quad_c2 -> empty .)
    OR              reduce using rule 137 (np_quad_c2 -> empty .)
    SCOLO           reduce using rule 137 (np_quad_c2 -> empty .)
    RPAREN          reduce using rule 137 (np_quad_c2 -> empty .)
    LPAREN          reduce using rule 137 (np_quad_c2 -> empty .)
    COMA            reduce using rule 137 (np_quad_c2 -> empty .)


state 309

    (81) exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .

    LESST           reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    MORET           reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    LESSEQUAL       reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    MOREEQUAL       reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    EQUALTO         reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    NOTEQUALTO      reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    AND             reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    OR              reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    SCOLO           reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    RPAREN          reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    LPAREN          reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    COMA            reduce using rule 81 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)


state 310

    (83) exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .

    SUMA            reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    SUB             reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    LESST           reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    MORET           reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    LESSEQUAL       reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    MOREEQUAL       reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    EQUALTO         reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    NOTEQUALTO      reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    AND             reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    OR              reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    SCOLO           reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    RPAREN          reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    LPAREN          reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    COMA            reduce using rule 83 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)


state 311

    (138) np_quad_c3 -> empty .

    SUMA            reduce using rule 138 (np_quad_c3 -> empty .)
    SUB             reduce using rule 138 (np_quad_c3 -> empty .)
    LESST           reduce using rule 138 (np_quad_c3 -> empty .)
    MORET           reduce using rule 138 (np_quad_c3 -> empty .)
    LESSEQUAL       reduce using rule 138 (np_quad_c3 -> empty .)
    MOREEQUAL       reduce using rule 138 (np_quad_c3 -> empty .)
    EQUALTO         reduce using rule 138 (np_quad_c3 -> empty .)
    NOTEQUALTO      reduce using rule 138 (np_quad_c3 -> empty .)
    AND             reduce using rule 138 (np_quad_c3 -> empty .)
    OR              reduce using rule 138 (np_quad_c3 -> empty .)
    SCOLO           reduce using rule 138 (np_quad_c3 -> empty .)
    RPAREN          reduce using rule 138 (np_quad_c3 -> empty .)
    LPAREN          reduce using rule 138 (np_quad_c3 -> empty .)
    COMA            reduce using rule 138 (np_quad_c3 -> empty .)


state 312

    (84) exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .

    SUMA            reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    SUB             reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    LESST           reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    MORET           reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    LESSEQUAL       reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    MOREEQUAL       reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    EQUALTO         reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    NOTEQUALTO      reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    AND             reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    OR              reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    SCOLO           reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    RPAREN          reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    LPAREN          reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    COMA            reduce using rule 84 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)


state 313

    (85) exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .

    SUMA            reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    SUB             reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    LESST           reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    MORET           reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    LESSEQUAL       reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    MOREEQUAL       reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    EQUALTO         reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    NOTEQUALTO      reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    AND             reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    OR              reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    SCOLO           reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    RPAREN          reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    LPAREN          reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    COMA            reduce using rule 85 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)


state 314

    (59) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 . LBRACK statutes RBRACK np_statutes_b3

    LBRACK          shift and go to state 326


state 315

    (151) np_statutes_b2 -> empty .

    LBRACK          reduce using rule 151 (np_statutes_b2 -> empty .)


state 316

    (60) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE . LPAREN expression RPAREN SCOLO np_statutes_c2

    LPAREN          shift and go to state 327


state 317

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression . np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (156) np_statutes_d2 -> . empty
    (166) empty -> .

    SCOLO           reduce using rule 166 (empty -> .)

    np_statutes_d2                 shift and go to state 328
    empty                          shift and go to state 329

state 318

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 330


state 319

    (47) assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .

    ID              reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    PRINT           reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    IF              reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    RETURN          reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    WHILE           reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    DO              reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    FOR             reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    RBRACK          reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    RPAREN          reduce using rule 47 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)


state 320

    (48) assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign . SCOLO

    SCOLO           shift and go to state 331


state 321

    (93) array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH . arrary_access_2 np_quad_d5
    (96) arrary_access_2 -> . np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH
    (97) arrary_access_2 -> . empty
    (142) np_quad_d3 -> . empty
    (166) empty -> .

    EQL             reduce using rule 166 (empty -> .)
    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)
    LCORCH          reduce using rule 166 (empty -> .)

    arrary_access_2                shift and go to state 332
    np_quad_d3                     shift and go to state 333
    empty                          shift and go to state 334

state 322

    (66) function_call_1 -> expression np_param COMA function_call_1 .

    RPAREN          reduce using rule 66 (function_call_1 -> expression np_param COMA function_call_1 .)


state 323

    (107) method_t -> ADDNODE LPAREN expression RPAREN .

    ID              reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)
    PRINT           reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)
    IF              reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)
    RETURN          reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)
    WHILE           reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)
    DO              reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)
    FOR             reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)
    RBRACK          reduce using rule 107 (method_t -> ADDNODE LPAREN expression RPAREN .)


state 324

    (49) writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .

    ID              reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    PRINT           reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    IF              reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    RETURN          reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    WHILE           reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    DO              reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    FOR             reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    RBRACK          reduce using rule 49 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)


state 325

    (52) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes . RBRACK condition_1 np_statutes_a3

    RBRACK          shift and go to state 335


state 326

    (59) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK . statutes RBRACK np_statutes_b3
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes                       shift and go to state 336
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 327

    (60) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN . expression RPAREN SCOLO np_statutes_c2
    (68) expression -> . exp_lv1
    (69) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (70) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (71) exp_lv1 -> . exp_lv2 exp_lv1_1
    (79) exp_lv2 -> . exp_lv3
    (80) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (81) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (82) exp_lv3 -> . exp_lv4
    (83) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (85) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (86) exp_lv4 -> . exp_lv5
    (87) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (88) exp_lv5 -> . RPAREN expression LPAREN
    (89) exp_lv5 -> . var_cte
    (90) exp_lv5 -> . function_call
    (91) exp_lv5 -> . ID np_quad_a2
    (92) exp_lv5 -> . ID np_quad_a2 array_access
    (98) var_cte -> . CTE_INT np_quad_a1_int
    (99) var_cte -> . CTE_FLO np_quad_a1_flt
    (100) var_cte -> . CTE_BOO np_quad_a1_bol
    (101) var_cte -> . CTE_STRING np_quad_a1_str
    (102) var_cte -> . CTE_CHAR np_quad_a1_chr
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub

    NOT             shift and go to state 135
    RPAREN          shift and go to state 136
    ID              shift and go to state 139
    CTE_INT         shift and go to state 140
    CTE_FLO         shift and go to state 141
    CTE_BOO         shift and go to state 142
    CTE_STRING      shift and go to state 143
    CTE_CHAR        shift and go to state 144

    expression                     shift and go to state 337
    exp_lv1                        shift and go to state 130
    exp_lv2                        shift and go to state 131
    exp_lv3                        shift and go to state 132
    exp_lv4                        shift and go to state 133
    exp_lv5                        shift and go to state 134
    var_cte                        shift and go to state 137
    function_call                  shift and go to state 138

state 328

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 . SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4

    SCOLO           shift and go to state 338


state 329

    (156) np_statutes_d2 -> empty .

    SCOLO           reduce using rule 156 (np_statutes_d2 -> empty .)


state 330

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes                       shift and go to state 339
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 331

    (48) assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .

    ID              reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    PRINT           reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    IF              reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    RETURN          reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    WHILE           reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    DO              reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    FOR             reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    RBRACK          reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)
    RPAREN          reduce using rule 48 (assignation -> ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO .)


state 332

    (93) array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 . np_quad_d5
    (144) np_quad_d5 -> . empty
    (166) empty -> .

    EQL             reduce using rule 166 (empty -> .)
    MUL             reduce using rule 166 (empty -> .)
    DIV             reduce using rule 166 (empty -> .)
    RESD            reduce using rule 166 (empty -> .)
    SUMA            reduce using rule 166 (empty -> .)
    SUB             reduce using rule 166 (empty -> .)
    LESST           reduce using rule 166 (empty -> .)
    MORET           reduce using rule 166 (empty -> .)
    LESSEQUAL       reduce using rule 166 (empty -> .)
    MOREEQUAL       reduce using rule 166 (empty -> .)
    EQUALTO         reduce using rule 166 (empty -> .)
    NOTEQUALTO      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    SCOLO           reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    COMA            reduce using rule 166 (empty -> .)

    np_quad_d5                     shift and go to state 340
    empty                          shift and go to state 341

state 333

    (96) arrary_access_2 -> np_quad_d3 . LCORCH arrary_access_1 np_quad_d4 RCORCH

    LCORCH          shift and go to state 342


state 334

    (97) arrary_access_2 -> empty .
    (142) np_quad_d3 -> empty .

    EQL             reduce using rule 97 (arrary_access_2 -> empty .)
    MUL             reduce using rule 97 (arrary_access_2 -> empty .)
    DIV             reduce using rule 97 (arrary_access_2 -> empty .)
    RESD            reduce using rule 97 (arrary_access_2 -> empty .)
    SUMA            reduce using rule 97 (arrary_access_2 -> empty .)
    SUB             reduce using rule 97 (arrary_access_2 -> empty .)
    LESST           reduce using rule 97 (arrary_access_2 -> empty .)
    MORET           reduce using rule 97 (arrary_access_2 -> empty .)
    LESSEQUAL       reduce using rule 97 (arrary_access_2 -> empty .)
    MOREEQUAL       reduce using rule 97 (arrary_access_2 -> empty .)
    EQUALTO         reduce using rule 97 (arrary_access_2 -> empty .)
    NOTEQUALTO      reduce using rule 97 (arrary_access_2 -> empty .)
    AND             reduce using rule 97 (arrary_access_2 -> empty .)
    OR              reduce using rule 97 (arrary_access_2 -> empty .)
    SCOLO           reduce using rule 97 (arrary_access_2 -> empty .)
    RPAREN          reduce using rule 97 (arrary_access_2 -> empty .)
    LPAREN          reduce using rule 97 (arrary_access_2 -> empty .)
    COMA            reduce using rule 97 (arrary_access_2 -> empty .)
    LCORCH          reduce using rule 142 (np_quad_d3 -> empty .)


state 335

    (52) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK . condition_1 np_statutes_a3
    (53) condition_1 -> . ELSE np_statutes_a2 LBRACK statutes RBRACK
    (54) condition_1 -> . empty
    (166) empty -> .

    ELSE            shift and go to state 344
    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    condition_1                    shift and go to state 343
    empty                          shift and go to state 345

state 336

    (59) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes . RBRACK np_statutes_b3

    RBRACK          shift and go to state 346


state 337

    (60) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression . RPAREN SCOLO np_statutes_c2

    RPAREN          shift and go to state 347


state 338

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO . assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO

    ID              shift and go to state 348

    assignation                    shift and go to state 349

state 339

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 350


state 340

    (93) array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .

    EQL             reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    MUL             reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    DIV             reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    RESD            reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    SUMA            reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    SUB             reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    LESST           reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    MORET           reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    LESSEQUAL       reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    MOREEQUAL       reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    EQUALTO         reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    NOTEQUALTO      reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    AND             reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    OR              reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    SCOLO           reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    RPAREN          reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    LPAREN          reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)
    COMA            reduce using rule 93 (array_access -> np_quad_d1 LCORCH arrary_access_1 np_quad_d2 RCORCH arrary_access_2 np_quad_d5 .)


state 341

    (144) np_quad_d5 -> empty .

    EQL             reduce using rule 144 (np_quad_d5 -> empty .)
    MUL             reduce using rule 144 (np_quad_d5 -> empty .)
    DIV             reduce using rule 144 (np_quad_d5 -> empty .)
    RESD            reduce using rule 144 (np_quad_d5 -> empty .)
    SUMA            reduce using rule 144 (np_quad_d5 -> empty .)
    SUB             reduce using rule 144 (np_quad_d5 -> empty .)
    LESST           reduce using rule 144 (np_quad_d5 -> empty .)
    MORET           reduce using rule 144 (np_quad_d5 -> empty .)
    LESSEQUAL       reduce using rule 144 (np_quad_d5 -> empty .)
    MOREEQUAL       reduce using rule 144 (np_quad_d5 -> empty .)
    EQUALTO         reduce using rule 144 (np_quad_d5 -> empty .)
    NOTEQUALTO      reduce using rule 144 (np_quad_d5 -> empty .)
    AND             reduce using rule 144 (np_quad_d5 -> empty .)
    OR              reduce using rule 144 (np_quad_d5 -> empty .)
    SCOLO           reduce using rule 144 (np_quad_d5 -> empty .)
    RPAREN          reduce using rule 144 (np_quad_d5 -> empty .)
    LPAREN          reduce using rule 144 (np_quad_d5 -> empty .)
    COMA            reduce using rule 144 (np_quad_d5 -> empty .)


state 342

    (96) arrary_access_2 -> np_quad_d3 LCORCH . arrary_access_1 np_quad_d4 RCORCH
    (94) arrary_access_1 -> . CTE_INT np_quad_a1_int
    (95) arrary_access_1 -> . ID np_quad_a2

    CTE_INT         shift and go to state 253
    ID              shift and go to state 254

    arrary_access_1                shift and go to state 351

state 343

    (52) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 . np_statutes_a3
    (149) np_statutes_a3 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    np_statutes_a3                 shift and go to state 352
    empty                          shift and go to state 353

state 344

    (53) condition_1 -> ELSE . np_statutes_a2 LBRACK statutes RBRACK
    (148) np_statutes_a2 -> . empty
    (166) empty -> .

    LBRACK          reduce using rule 166 (empty -> .)

    np_statutes_a2                 shift and go to state 354
    empty                          shift and go to state 355

state 345

    (54) condition_1 -> empty .

    ID              reduce using rule 54 (condition_1 -> empty .)
    PRINT           reduce using rule 54 (condition_1 -> empty .)
    IF              reduce using rule 54 (condition_1 -> empty .)
    RETURN          reduce using rule 54 (condition_1 -> empty .)
    WHILE           reduce using rule 54 (condition_1 -> empty .)
    DO              reduce using rule 54 (condition_1 -> empty .)
    FOR             reduce using rule 54 (condition_1 -> empty .)
    RBRACK          reduce using rule 54 (condition_1 -> empty .)


state 346

    (59) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK . np_statutes_b3
    (152) np_statutes_b3 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    np_statutes_b3                 shift and go to state 356
    empty                          shift and go to state 357

state 347

    (60) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN . SCOLO np_statutes_c2

    SCOLO           shift and go to state 358


state 348

    (47) assignation -> ID . np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> ID . np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (133) np_quad_a2 -> . empty
    (166) empty -> .

    EQL             reduce using rule 166 (empty -> .)
    LCORCH          reduce using rule 166 (empty -> .)

    np_quad_a2                     shift and go to state 122
    empty                          shift and go to state 125

state 349

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation . np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (157) np_statutes_d3 -> . empty
    (166) empty -> .

    RPAREN          reduce using rule 166 (empty -> .)

    np_statutes_d3                 shift and go to state 359
    empty                          shift and go to state 360

state 350

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    RETURN          reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)


state 351

    (96) arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 . np_quad_d4 RCORCH
    (143) np_quad_d4 -> . empty
    (166) empty -> .

    RCORCH          reduce using rule 166 (empty -> .)

    np_quad_d4                     shift and go to state 361
    empty                          shift and go to state 362

state 352

    (52) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .

    ID              reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    PRINT           reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    IF              reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    RETURN          reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    WHILE           reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    DO              reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    FOR             reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    RBRACK          reduce using rule 52 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)


state 353

    (149) np_statutes_a3 -> empty .

    ID              reduce using rule 149 (np_statutes_a3 -> empty .)
    PRINT           reduce using rule 149 (np_statutes_a3 -> empty .)
    IF              reduce using rule 149 (np_statutes_a3 -> empty .)
    RETURN          reduce using rule 149 (np_statutes_a3 -> empty .)
    WHILE           reduce using rule 149 (np_statutes_a3 -> empty .)
    DO              reduce using rule 149 (np_statutes_a3 -> empty .)
    FOR             reduce using rule 149 (np_statutes_a3 -> empty .)
    RBRACK          reduce using rule 149 (np_statutes_a3 -> empty .)


state 354

    (53) condition_1 -> ELSE np_statutes_a2 . LBRACK statutes RBRACK

    LBRACK          shift and go to state 363


state 355

    (148) np_statutes_a2 -> empty .

    LBRACK          reduce using rule 148 (np_statutes_a2 -> empty .)


state 356

    (59) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .

    ID              reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    PRINT           reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    IF              reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    RETURN          reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    WHILE           reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    DO              reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    FOR             reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    RBRACK          reduce using rule 59 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)


state 357

    (152) np_statutes_b3 -> empty .

    ID              reduce using rule 152 (np_statutes_b3 -> empty .)
    PRINT           reduce using rule 152 (np_statutes_b3 -> empty .)
    IF              reduce using rule 152 (np_statutes_b3 -> empty .)
    RETURN          reduce using rule 152 (np_statutes_b3 -> empty .)
    WHILE           reduce using rule 152 (np_statutes_b3 -> empty .)
    DO              reduce using rule 152 (np_statutes_b3 -> empty .)
    FOR             reduce using rule 152 (np_statutes_b3 -> empty .)
    RBRACK          reduce using rule 152 (np_statutes_b3 -> empty .)


state 358

    (60) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO . np_statutes_c2
    (154) np_statutes_c2 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    np_statutes_c2                 shift and go to state 364
    empty                          shift and go to state 365

state 359

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 . RPAREN LBRACK statutes RBRACK np_statutes_d4

    RPAREN          shift and go to state 366


state 360

    (157) np_statutes_d3 -> empty .

    RPAREN          reduce using rule 157 (np_statutes_d3 -> empty .)


state 361

    (96) arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 . RCORCH

    RCORCH          shift and go to state 367


state 362

    (143) np_quad_d4 -> empty .

    RCORCH          reduce using rule 143 (np_quad_d4 -> empty .)


state 363

    (53) condition_1 -> ELSE np_statutes_a2 LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    statutes                       shift and go to state 368
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    assignation                    shift and go to state 95
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 364

    (60) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .

    ID              reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    PRINT           reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    IF              reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    RETURN          reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    WHILE           reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    DO              reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    FOR             reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    RBRACK          reduce using rule 60 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)


state 365

    (154) np_statutes_c2 -> empty .

    ID              reduce using rule 154 (np_statutes_c2 -> empty .)
    PRINT           reduce using rule 154 (np_statutes_c2 -> empty .)
    IF              reduce using rule 154 (np_statutes_c2 -> empty .)
    RETURN          reduce using rule 154 (np_statutes_c2 -> empty .)
    WHILE           reduce using rule 154 (np_statutes_c2 -> empty .)
    DO              reduce using rule 154 (np_statutes_c2 -> empty .)
    FOR             reduce using rule 154 (np_statutes_c2 -> empty .)
    RBRACK          reduce using rule 154 (np_statutes_c2 -> empty .)


state 366

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN . LBRACK statutes RBRACK np_statutes_d4

    LBRACK          shift and go to state 369


state 367

    (96) arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .

    EQL             reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    MUL             reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    DIV             reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    RESD            reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    SUMA            reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    SUB             reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    LESST           reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    MORET           reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    LESSEQUAL       reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    MOREEQUAL       reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    EQUALTO         reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    NOTEQUALTO      reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    AND             reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    OR              reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    SCOLO           reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    RPAREN          reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    LPAREN          reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)
    COMA            reduce using rule 96 (arrary_access_2 -> np_quad_d3 LCORCH arrary_access_1 np_quad_d4 RCORCH .)


state 368

    (53) condition_1 -> ELSE np_statutes_a2 LBRACK statutes . RBRACK

    RBRACK          shift and go to state 370


state 369

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK . statutes RBRACK np_statutes_d4
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call SCOLO
    (45) statutes_1 -> . method
    (46) statutes_1 -> . return
    (166) empty -> .
    (47) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (48) assignation -> . ID np_quad_a2 array_access EQL np_quad_b expression np_quad_assign SCOLO
    (49) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (52) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN np_era function_call_1 RPAREN np_gosub
    (64) function_call -> . ID LPAREN np_era RPAREN np_gosub
    (103) method -> . ID CTE_INT DOT method_t
    (67) return -> . RETURN expression np_return SCOLO
    (59) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (60) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (61) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 166 (empty -> .)
    ID              shift and go to state 102
    PRINT           shift and go to state 103
    IF              shift and go to state 104
    RETURN          shift and go to state 109
    WHILE           shift and go to state 110
    DO              shift and go to state 111
    FOR             shift and go to state 112

    assignation                    shift and go to state 95
    statutes                       shift and go to state 371
    statutes_1                     shift and go to state 93
    empty                          shift and go to state 94
    writing                        shift and go to state 96
    condition                      shift and go to state 97
    cycle                          shift and go to state 98
    function_call                  shift and go to state 99
    method                         shift and go to state 100
    return                         shift and go to state 101
    c_while                        shift and go to state 105
    c_do                           shift and go to state 106
    c_for                          shift and go to state 107
    c_forin                        shift and go to state 108

state 370

    (53) condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .

    ID              reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    PRINT           reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    IF              reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    RETURN          reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    WHILE           reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    DO              reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    FOR             reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 53 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)


state 371

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes . RBRACK np_statutes_d4

    RBRACK          shift and go to state 372


state 372

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK . np_statutes_d4
    (158) np_statutes_d4 -> . empty
    (166) empty -> .

    ID              reduce using rule 166 (empty -> .)
    PRINT           reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    DO              reduce using rule 166 (empty -> .)
    FOR             reduce using rule 166 (empty -> .)
    RBRACK          reduce using rule 166 (empty -> .)

    np_statutes_d4                 shift and go to state 373
    empty                          shift and go to state 374

state 373

    (61) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .

    ID              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    PRINT           reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    IF              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    RETURN          reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    WHILE           reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    DO              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    FOR             reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    RBRACK          reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)


state 374

    (158) np_statutes_d4 -> empty .

    ID              reduce using rule 158 (np_statutes_d4 -> empty .)
    PRINT           reduce using rule 158 (np_statutes_d4 -> empty .)
    IF              reduce using rule 158 (np_statutes_d4 -> empty .)
    RETURN          reduce using rule 158 (np_statutes_d4 -> empty .)
    WHILE           reduce using rule 158 (np_statutes_d4 -> empty .)
    DO              reduce using rule 158 (np_statutes_d4 -> empty .)
    FOR             reduce using rule 158 (np_statutes_d4 -> empty .)
    RBRACK          reduce using rule 158 (np_statutes_d4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 139 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 210 resolved as shift
