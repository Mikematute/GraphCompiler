Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body
Rule 2     vars -> VAR type vars_1 SCOLO vars
Rule 3     vars -> empty
Rule 4     vars_1 -> ID np_var_2 vars_2
Rule 5     vars_1 -> ID np_var_2 vars_2 COMA vars_1
Rule 6     vars_2 -> array_declare
Rule 7     vars_2 -> empty
Rule 8     function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
Rule 9     function -> empty
Rule 10    function_t -> VOID np_var_1
Rule 11    function_t -> t_number
Rule 12    function_t -> t_string
Rule 13    function_t -> t_bool
Rule 14    function_t -> t_graph
Rule 15    function_v -> function_v1
Rule 16    function_v -> empty
Rule 17    function_v1 -> type np_var_b4 ID np_var_b5
Rule 18    function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1
Rule 19    function_v1 -> type np_var_b4 ID np_var_b5 array_declare
Rule 20    function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1
Rule 21    body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3
Rule 22    type -> t_number
Rule 23    type -> t_string
Rule 24    type -> t_bool
Rule 25    type -> t_graph
Rule 26    t_number -> INT np_var_1
Rule 27    t_number -> FLOAT np_var_1
Rule 28    t_string -> STRING np_var_1
Rule 29    t_string -> CHAR np_var_1
Rule 30    t_bool -> BOOL np_var_1
Rule 31    t_graph -> NODE np_var_1
Rule 32    t_graph -> ARC np_var_1
Rule 33    t_graph -> UNDIRECTED np_var_1
Rule 34    t_graph -> DIRECTED np_var_1
Rule 35    array_declare -> LCORCH CTE_INT RCORCH array_declare_1
Rule 36    array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1
Rule 37    array_declare_1 -> empty
Rule 38    statutes -> statutes_1 statutes
Rule 39    statutes -> empty
Rule 40    statutes_1 -> assignation
Rule 41    statutes_1 -> writing
Rule 42    statutes_1 -> condition
Rule 43    statutes_1 -> cycle
Rule 44    statutes_1 -> function_call
Rule 45    assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
Rule 46    writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
Rule 47    writing_1 -> expression
Rule 48    writing_2 -> expression SUMA np_quad_b writing_1 np_quad_c2
Rule 49    condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
Rule 50    condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK
Rule 51    condition_1 -> empty
Rule 52    cycle -> c_while
Rule 53    cycle -> c_do
Rule 54    cycle -> c_for
Rule 55    cycle -> c_forin
Rule 56    c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
Rule 57    c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
Rule 58    c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
Rule 59    c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK
Rule 60    function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
Rule 61    function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO
Rule 62    function_call_1 -> empty
Rule 63    function_call_1 -> function_call_2
Rule 64    function_call_2 -> expression np_param
Rule 65    function_call_2 -> expression np_param COMA function_call_2
Rule 66    expression -> exp_lv1
Rule 67    expression -> exp_lv1 AND np_quad_b expression np_quad_c0
Rule 68    expression -> exp_lv1 OR np_quad_b expression np_quad_c0
Rule 69    exp_lv1 -> exp_lv2 exp_lv1_1
Rule 70    exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1
Rule 71    exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1
Rule 72    exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1
Rule 73    exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1
Rule 74    exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1
Rule 75    exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1
Rule 76    exp_lv1_1 -> empty
Rule 77    exp_lv2 -> exp_lv3
Rule 78    exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
Rule 79    exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
Rule 80    exp_lv3 -> exp_lv4
Rule 81    exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
Rule 82    exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
Rule 83    exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
Rule 84    exp_lv4 -> exp_lv5
Rule 85    exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4
Rule 86    exp_lv5 -> RPAREN expression LPAREN
Rule 87    exp_lv5 -> var_cte
Rule 88    exp_lv5 -> method
Rule 89    exp_lv5 -> ID np_quad_a2
Rule 90    exp_lv5 -> ID np_quad_a2 array_access
Rule 91    array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2
Rule 92    arrary_access_1 -> CTE_INT
Rule 93    arrary_access_1 -> ID
Rule 94    arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2
Rule 95    arrary_access_2 -> empty
Rule 96    var_cte -> CTE_INT np_quad_a1_int
Rule 97    var_cte -> CTE_FLO np_quad_a1_flt
Rule 98    var_cte -> CTE_BOO np_quad_a1_bol
Rule 99    var_cte -> CTE_STRING np_quad_a1_str
Rule 100   var_cte -> CTE_CHAR np_quad_a1_chr
Rule 101   method -> ID DOT method_t LPAREN method_1 RPAREN
Rule 102   method_1 -> method_1_1
Rule 103   method_1 -> empty
Rule 104   method_1_1 -> method_v
Rule 105   method_1_1 -> method_v COMA method_1_1
Rule 106   method_t -> DEG
Rule 107   method_t -> SHORTPATH
Rule 108   method_t -> DIAMETER
Rule 109   method_t -> ADD
Rule 110   method_t -> DELETE
Rule 111   method_t -> ARC
Rule 112   method_v -> ID
Rule 113   method_v -> LBRACK ID COMA ID RBRACK
Rule 114   np_var_a1 -> empty
Rule 115   np_var_a2 -> empty
Rule 116   np_var_b1 -> empty
Rule 117   np_var_b2 -> empty
Rule 118   np_var_b3 -> empty
Rule 119   np_var_b4 -> empty
Rule 120   np_var_b5 -> empty
Rule 121   np_var_b6 -> empty
Rule 122   np_var_c1 -> empty
Rule 123   np_var_c2 -> empty
Rule 124   np_var_c3 -> empty
Rule 125   np_var_1 -> empty
Rule 126   np_var_2 -> empty
Rule 127   np_quad_a1_int -> empty
Rule 128   np_quad_a1_flt -> empty
Rule 129   np_quad_a1_chr -> empty
Rule 130   np_quad_a1_str -> empty
Rule 131   np_quad_a1_bol -> empty
Rule 132   np_quad_a2 -> empty
Rule 133   np_quad_b -> empty
Rule 134   np_quad_c0 -> empty
Rule 135   np_quad_c1 -> empty
Rule 136   np_quad_c2 -> empty
Rule 137   np_quad_c3 -> empty
Rule 138   np_quad_c4 -> empty
Rule 139   np_quad_print -> empty
Rule 140   np_quad_assign -> empty
Rule 141   np_statutes_a1 -> empty
Rule 142   np_statutes_a2 -> empty
Rule 143   np_statutes_a3 -> empty
Rule 144   np_statutes_b1 -> empty
Rule 145   np_statutes_b2 -> empty
Rule 146   np_statutes_b3 -> empty
Rule 147   np_statutes_c1 -> empty
Rule 148   np_statutes_c2 -> empty
Rule 149   np_statutes_d1 -> empty
Rule 150   np_statutes_d2 -> empty
Rule 151   np_statutes_d3 -> empty
Rule 152   np_statutes_d4 -> empty
Rule 153   np_goto_main -> empty
Rule 154   np_debug -> empty
Rule 155   np_era -> empty
Rule 156   np_gosub -> empty
Rule 157   np_param -> empty
Rule 158   debug -> empty
Rule 159   np_eof -> empty
Rule 160   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 109
AND                  : 67
ARC                  : 32 111
BOOL                 : 30
CHAR                 : 29
COLON                : 
COMA                 : 5 18 20 65 105 113
CTE_BOO              : 98
CTE_CHAR             : 100
CTE_FLO              : 97
CTE_INT              : 35 36 92 96
CTE_STRING           : 99
DEG                  : 106
DELETE               : 110
DIAMETER             : 108
DIRECTED             : 34
DIV                  : 82
DO                   : 57
DOT                  : 101
ELSE                 : 50
EQL                  : 45
EQUALTO              : 74
FLOAT                : 27
FOR                  : 58 59
ID                   : 1 4 5 8 17 18 19 20 45 58 59 59 60 61 89 90 93 101 112 113 113
IF                   : 49
IN                   : 59
INT                  : 26
LBRACK               : 8 21 49 50 56 57 58 59 113
LCORCH               : 35 36 91 94
LESSEQUAL            : 72
LESST                : 70
LPAREN               : 8 21 46 49 56 57 58 59 60 61 86 101
MAIN                 : 21
MOREEQUAL            : 73
MORET                : 71
MUL                  : 81
NODE                 : 31
NOT                  : 85
NOTEQUALTO           : 75
OR                   : 68
PRINT                : 46
PROGRAM              : 1
RBRACK               : 8 21 49 50 56 57 58 59 113
RCORCH               : 35 36 91 94
RESD                 : 83
RPAREN               : 8 21 46 49 56 57 58 59 60 61 86 101
SCOLO                : 1 2 45 46 57 58 58 60 61
SHORTPATH            : 107
STRING               : 28
SUB                  : 79
SUMA                 : 48 78
UNDIRECTED           : 33
VAR                  : 2
VOID                 : 10
WHILE                : 56 57
error                : 

Nonterminals, with rules where they appear

arrary_access_1      : 91 94
arrary_access_2      : 91 94
array_access         : 90
array_declare        : 6 19 20
array_declare_1      : 35 36
assignation          : 40 58
body                 : 1
c_do                 : 53
c_for                : 54
c_forin              : 55
c_while              : 52
condition            : 42
condition_1          : 49
cycle                : 43
debug                : 21
empty                : 3 7 9 16 37 39 51 62 76 95 103 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
exp_lv1              : 66 67 68
exp_lv1_1            : 69
exp_lv2              : 69 70 71 72 73 74 75 78 79
exp_lv3              : 77 78 79 81 82 83
exp_lv4              : 80 81 82 83
exp_lv5              : 84 85
expression           : 45 47 48 49 56 57 58 64 65 67 68 86
function             : 1 8
function_call        : 44
function_call_1      : 
function_call_2      : 60 63 65
function_t           : 8
function_v           : 8
function_v1          : 15 18 20
method               : 88
method_1             : 101
method_1_1           : 102 105
method_t             : 101
method_v             : 104 105
np_debug             : 
np_eof               : 21
np_era               : 60 61
np_gosub             : 60 61
np_goto_main         : 1
np_param             : 64 65
np_quad_a1_bol       : 98
np_quad_a1_chr       : 100
np_quad_a1_flt       : 97
np_quad_a1_int       : 96
np_quad_a1_str       : 99
np_quad_a2           : 45 89 90
np_quad_assign       : 45
np_quad_b            : 45 46 48 67 68 70 71 72 73 74 75 78 79 81 82 83 85
np_quad_c0           : 67 68
np_quad_c1           : 70 71 72 73 74 75
np_quad_c2           : 48 78 79
np_quad_c3           : 81 82 83
np_quad_c4           : 85
np_quad_print        : 46
np_statutes_a1       : 49
np_statutes_a2       : 50
np_statutes_a3       : 49
np_statutes_b1       : 56
np_statutes_b2       : 56
np_statutes_b3       : 56
np_statutes_c1       : 57
np_statutes_c2       : 57
np_statutes_d1       : 58
np_statutes_d2       : 58
np_statutes_d3       : 58
np_statutes_d4       : 58
np_var_1             : 10 26 27 28 29 30 31 32 33 34
np_var_2             : 4 5
np_var_a1            : 1
np_var_a2            : 1
np_var_b1            : 
np_var_b2            : 8
np_var_b3            : 8
np_var_b4            : 17 18 19 20
np_var_b5            : 17 18 19 20
np_var_b6            : 8
np_var_c1            : 21
np_var_c2            : 21
np_var_c3            : 21
program              : 0
statutes             : 8 21 38 49 50 56 57 58 59
statutes_1           : 38
t_bool               : 13 24
t_graph              : 14 25
t_number             : 11 22
t_string             : 12 23
type                 : 2 17 18 19 20
var_cte              : 87
vars                 : 1 2 8 21
vars_1               : 2 5
vars_2               : 4 5
writing              : 41
writing_1            : 46 48
writing_2            : 

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . np_var_a1 SCOLO np_var_a2 vars np_goto_main function body
    (114) np_var_a1 -> . empty
    (160) empty -> .

    SCOLO           reduce using rule 160 (empty -> .)

    np_var_a1                      shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) program -> PROGRAM ID np_var_a1 . SCOLO np_var_a2 vars np_goto_main function body

    SCOLO           shift and go to state 6


state 5

    (114) np_var_a1 -> empty .

    SCOLO           reduce using rule 114 (np_var_a1 -> empty .)


state 6

    (1) program -> PROGRAM ID np_var_a1 SCOLO . np_var_a2 vars np_goto_main function body
    (115) np_var_a2 -> . empty
    (160) empty -> .

    VAR             reduce using rule 160 (empty -> .)
    VOID            reduce using rule 160 (empty -> .)
    INT             reduce using rule 160 (empty -> .)
    FLOAT           reduce using rule 160 (empty -> .)
    STRING          reduce using rule 160 (empty -> .)
    CHAR            reduce using rule 160 (empty -> .)
    BOOL            reduce using rule 160 (empty -> .)
    NODE            reduce using rule 160 (empty -> .)
    ARC             reduce using rule 160 (empty -> .)
    UNDIRECTED      reduce using rule 160 (empty -> .)
    DIRECTED        reduce using rule 160 (empty -> .)
    MAIN            reduce using rule 160 (empty -> .)

    np_var_a2                      shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 . vars np_goto_main function body
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (160) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 160 (empty -> .)
    INT             reduce using rule 160 (empty -> .)
    FLOAT           reduce using rule 160 (empty -> .)
    STRING          reduce using rule 160 (empty -> .)
    CHAR            reduce using rule 160 (empty -> .)
    BOOL            reduce using rule 160 (empty -> .)
    NODE            reduce using rule 160 (empty -> .)
    ARC             reduce using rule 160 (empty -> .)
    UNDIRECTED      reduce using rule 160 (empty -> .)
    DIRECTED        reduce using rule 160 (empty -> .)
    MAIN            reduce using rule 160 (empty -> .)

    vars                           shift and go to state 9
    empty                          shift and go to state 11

state 8

    (115) np_var_a2 -> empty .

    VAR             reduce using rule 115 (np_var_a2 -> empty .)
    VOID            reduce using rule 115 (np_var_a2 -> empty .)
    INT             reduce using rule 115 (np_var_a2 -> empty .)
    FLOAT           reduce using rule 115 (np_var_a2 -> empty .)
    STRING          reduce using rule 115 (np_var_a2 -> empty .)
    CHAR            reduce using rule 115 (np_var_a2 -> empty .)
    BOOL            reduce using rule 115 (np_var_a2 -> empty .)
    NODE            reduce using rule 115 (np_var_a2 -> empty .)
    ARC             reduce using rule 115 (np_var_a2 -> empty .)
    UNDIRECTED      reduce using rule 115 (np_var_a2 -> empty .)
    DIRECTED        reduce using rule 115 (np_var_a2 -> empty .)
    MAIN            reduce using rule 115 (np_var_a2 -> empty .)


state 9

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars . np_goto_main function body
    (153) np_goto_main -> . empty
    (160) empty -> .

    VOID            reduce using rule 160 (empty -> .)
    INT             reduce using rule 160 (empty -> .)
    FLOAT           reduce using rule 160 (empty -> .)
    STRING          reduce using rule 160 (empty -> .)
    CHAR            reduce using rule 160 (empty -> .)
    BOOL            reduce using rule 160 (empty -> .)
    NODE            reduce using rule 160 (empty -> .)
    ARC             reduce using rule 160 (empty -> .)
    UNDIRECTED      reduce using rule 160 (empty -> .)
    DIRECTED        reduce using rule 160 (empty -> .)
    MAIN            reduce using rule 160 (empty -> .)

    np_goto_main                   shift and go to state 12
    empty                          shift and go to state 13

state 10

    (2) vars -> VAR . type vars_1 SCOLO vars
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    type                           shift and go to state 14
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 11

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    INT             reduce using rule 3 (vars -> empty .)
    FLOAT           reduce using rule 3 (vars -> empty .)
    STRING          reduce using rule 3 (vars -> empty .)
    CHAR            reduce using rule 3 (vars -> empty .)
    BOOL            reduce using rule 3 (vars -> empty .)
    NODE            reduce using rule 3 (vars -> empty .)
    ARC             reduce using rule 3 (vars -> empty .)
    UNDIRECTED      reduce using rule 3 (vars -> empty .)
    DIRECTED        reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)
    ID              reduce using rule 3 (vars -> empty .)
    PRINT           reduce using rule 3 (vars -> empty .)
    IF              reduce using rule 3 (vars -> empty .)
    WHILE           reduce using rule 3 (vars -> empty .)
    DO              reduce using rule 3 (vars -> empty .)
    FOR             reduce using rule 3 (vars -> empty .)
    RBRACK          reduce using rule 3 (vars -> empty .)


state 12

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main . function body
    (8) function -> . function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (9) function -> . empty
    (10) function_t -> . VOID np_var_1
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (160) empty -> .
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    VOID            shift and go to state 31
    MAIN            reduce using rule 160 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    function                       shift and go to state 28
    function_t                     shift and go to state 29
    empty                          shift and go to state 30
    t_number                       shift and go to state 32
    t_string                       shift and go to state 33
    t_bool                         shift and go to state 34
    t_graph                        shift and go to state 35

state 13

    (153) np_goto_main -> empty .

    VOID            reduce using rule 153 (np_goto_main -> empty .)
    INT             reduce using rule 153 (np_goto_main -> empty .)
    FLOAT           reduce using rule 153 (np_goto_main -> empty .)
    STRING          reduce using rule 153 (np_goto_main -> empty .)
    CHAR            reduce using rule 153 (np_goto_main -> empty .)
    BOOL            reduce using rule 153 (np_goto_main -> empty .)
    NODE            reduce using rule 153 (np_goto_main -> empty .)
    ARC             reduce using rule 153 (np_goto_main -> empty .)
    UNDIRECTED      reduce using rule 153 (np_goto_main -> empty .)
    DIRECTED        reduce using rule 153 (np_goto_main -> empty .)
    MAIN            reduce using rule 153 (np_goto_main -> empty .)


state 14

    (2) vars -> VAR type . vars_1 SCOLO vars
    (4) vars_1 -> . ID np_var_2 vars_2
    (5) vars_1 -> . ID np_var_2 vars_2 COMA vars_1

    ID              shift and go to state 37

    vars_1                         shift and go to state 36

state 15

    (22) type -> t_number .

    ID              reduce using rule 22 (type -> t_number .)


state 16

    (23) type -> t_string .

    ID              reduce using rule 23 (type -> t_string .)


state 17

    (24) type -> t_bool .

    ID              reduce using rule 24 (type -> t_bool .)


state 18

    (25) type -> t_graph .

    ID              reduce using rule 25 (type -> t_graph .)


state 19

    (26) t_number -> INT . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 38
    empty                          shift and go to state 39

state 20

    (27) t_number -> FLOAT . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 40
    empty                          shift and go to state 39

state 21

    (28) t_string -> STRING . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 41
    empty                          shift and go to state 39

state 22

    (29) t_string -> CHAR . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 42
    empty                          shift and go to state 39

state 23

    (30) t_bool -> BOOL . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 43
    empty                          shift and go to state 39

state 24

    (31) t_graph -> NODE . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 44
    empty                          shift and go to state 39

state 25

    (32) t_graph -> ARC . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 45
    empty                          shift and go to state 39

state 26

    (33) t_graph -> UNDIRECTED . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 46
    empty                          shift and go to state 39

state 27

    (34) t_graph -> DIRECTED . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 47
    empty                          shift and go to state 39

state 28

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function . body
    (21) body -> . MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    MAIN            shift and go to state 49

    body                           shift and go to state 48

state 29

    (8) function -> function_t . ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function

    ID              shift and go to state 50


state 30

    (9) function -> empty .

    MAIN            reduce using rule 9 (function -> empty .)


state 31

    (10) function_t -> VOID . np_var_1
    (125) np_var_1 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_1                       shift and go to state 51
    empty                          shift and go to state 39

state 32

    (11) function_t -> t_number .

    ID              reduce using rule 11 (function_t -> t_number .)


state 33

    (12) function_t -> t_string .

    ID              reduce using rule 12 (function_t -> t_string .)


state 34

    (13) function_t -> t_bool .

    ID              reduce using rule 13 (function_t -> t_bool .)


state 35

    (14) function_t -> t_graph .

    ID              reduce using rule 14 (function_t -> t_graph .)


state 36

    (2) vars -> VAR type vars_1 . SCOLO vars

    SCOLO           shift and go to state 52


state 37

    (4) vars_1 -> ID . np_var_2 vars_2
    (5) vars_1 -> ID . np_var_2 vars_2 COMA vars_1
    (126) np_var_2 -> . empty
    (160) empty -> .

    LCORCH          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_var_2                       shift and go to state 53
    empty                          shift and go to state 54

state 38

    (26) t_number -> INT np_var_1 .

    ID              reduce using rule 26 (t_number -> INT np_var_1 .)


state 39

    (125) np_var_1 -> empty .

    ID              reduce using rule 125 (np_var_1 -> empty .)


state 40

    (27) t_number -> FLOAT np_var_1 .

    ID              reduce using rule 27 (t_number -> FLOAT np_var_1 .)


state 41

    (28) t_string -> STRING np_var_1 .

    ID              reduce using rule 28 (t_string -> STRING np_var_1 .)


state 42

    (29) t_string -> CHAR np_var_1 .

    ID              reduce using rule 29 (t_string -> CHAR np_var_1 .)


state 43

    (30) t_bool -> BOOL np_var_1 .

    ID              reduce using rule 30 (t_bool -> BOOL np_var_1 .)


state 44

    (31) t_graph -> NODE np_var_1 .

    ID              reduce using rule 31 (t_graph -> NODE np_var_1 .)


state 45

    (32) t_graph -> ARC np_var_1 .

    ID              reduce using rule 32 (t_graph -> ARC np_var_1 .)


state 46

    (33) t_graph -> UNDIRECTED np_var_1 .

    ID              reduce using rule 33 (t_graph -> UNDIRECTED np_var_1 .)


state 47

    (34) t_graph -> DIRECTED np_var_1 .

    ID              reduce using rule 34 (t_graph -> DIRECTED np_var_1 .)


state 48

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body .

    $end            reduce using rule 1 (program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars np_goto_main function body .)


state 49

    (21) body -> MAIN . np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3
    (122) np_var_c1 -> . empty
    (160) empty -> .

    LPAREN          reduce using rule 160 (empty -> .)

    np_var_c1                      shift and go to state 55
    empty                          shift and go to state 56

state 50

    (8) function -> function_t ID . np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (117) np_var_b2 -> . empty
    (160) empty -> .

    LPAREN          reduce using rule 160 (empty -> .)

    np_var_b2                      shift and go to state 57
    empty                          shift and go to state 58

state 51

    (10) function_t -> VOID np_var_1 .

    ID              reduce using rule 10 (function_t -> VOID np_var_1 .)


state 52

    (2) vars -> VAR type vars_1 SCOLO . vars
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (160) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 160 (empty -> .)
    INT             reduce using rule 160 (empty -> .)
    FLOAT           reduce using rule 160 (empty -> .)
    STRING          reduce using rule 160 (empty -> .)
    CHAR            reduce using rule 160 (empty -> .)
    BOOL            reduce using rule 160 (empty -> .)
    NODE            reduce using rule 160 (empty -> .)
    ARC             reduce using rule 160 (empty -> .)
    UNDIRECTED      reduce using rule 160 (empty -> .)
    DIRECTED        reduce using rule 160 (empty -> .)
    MAIN            reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    vars                           shift and go to state 59
    empty                          shift and go to state 11

state 53

    (4) vars_1 -> ID np_var_2 . vars_2
    (5) vars_1 -> ID np_var_2 . vars_2 COMA vars_1
    (6) vars_2 -> . array_declare
    (7) vars_2 -> . empty
    (35) array_declare -> . LCORCH CTE_INT RCORCH array_declare_1
    (160) empty -> .

    LCORCH          shift and go to state 63
    COMA            reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    vars_2                         shift and go to state 60
    array_declare                  shift and go to state 61
    empty                          shift and go to state 62

state 54

    (126) np_var_2 -> empty .

    LCORCH          reduce using rule 126 (np_var_2 -> empty .)
    COMA            reduce using rule 126 (np_var_2 -> empty .)
    SCOLO           reduce using rule 126 (np_var_2 -> empty .)


state 55

    (21) body -> MAIN np_var_c1 . LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    LPAREN          shift and go to state 64


state 56

    (122) np_var_c1 -> empty .

    LPAREN          reduce using rule 122 (np_var_c1 -> empty .)


state 57

    (8) function -> function_t ID np_var_b2 . np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (118) np_var_b3 -> . empty
    (160) empty -> .

    LPAREN          reduce using rule 160 (empty -> .)

    np_var_b3                      shift and go to state 65
    empty                          shift and go to state 66

state 58

    (117) np_var_b2 -> empty .

    LPAREN          reduce using rule 117 (np_var_b2 -> empty .)


state 59

    (2) vars -> VAR type vars_1 SCOLO vars .

    VOID            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    INT             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FLOAT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    STRING          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    CHAR            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    BOOL            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    NODE            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ARC             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    UNDIRECTED      reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DIRECTED        reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    MAIN            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ID              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    PRINT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    IF              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    WHILE           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DO              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FOR             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    RBRACK          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)


state 60

    (4) vars_1 -> ID np_var_2 vars_2 .
    (5) vars_1 -> ID np_var_2 vars_2 . COMA vars_1

    SCOLO           reduce using rule 4 (vars_1 -> ID np_var_2 vars_2 .)
    COMA            shift and go to state 67


state 61

    (6) vars_2 -> array_declare .

    COMA            reduce using rule 6 (vars_2 -> array_declare .)
    SCOLO           reduce using rule 6 (vars_2 -> array_declare .)


state 62

    (7) vars_2 -> empty .

    COMA            reduce using rule 7 (vars_2 -> empty .)
    SCOLO           reduce using rule 7 (vars_2 -> empty .)


state 63

    (35) array_declare -> LCORCH . CTE_INT RCORCH array_declare_1

    CTE_INT         shift and go to state 68


state 64

    (21) body -> MAIN np_var_c1 LPAREN . RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    RPAREN          shift and go to state 69


state 65

    (8) function -> function_t ID np_var_b2 np_var_b3 . LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function

    LPAREN          shift and go to state 70


state 66

    (118) np_var_b3 -> empty .

    LPAREN          reduce using rule 118 (np_var_b3 -> empty .)


state 67

    (5) vars_1 -> ID np_var_2 vars_2 COMA . vars_1
    (4) vars_1 -> . ID np_var_2 vars_2
    (5) vars_1 -> . ID np_var_2 vars_2 COMA vars_1

    ID              shift and go to state 37

    vars_1                         shift and go to state 71

state 68

    (35) array_declare -> LCORCH CTE_INT . RCORCH array_declare_1

    RCORCH          shift and go to state 72


state 69

    (21) body -> MAIN np_var_c1 LPAREN RPAREN . LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3

    LBRACK          shift and go to state 73


state 70

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN . function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (15) function_v -> . function_v1
    (16) function_v -> . empty
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (160) empty -> .
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    RPAREN          reduce using rule 160 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    function_v                     shift and go to state 74
    function_v1                    shift and go to state 75
    empty                          shift and go to state 76
    type                           shift and go to state 77
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 71

    (5) vars_1 -> ID np_var_2 vars_2 COMA vars_1 .

    SCOLO           reduce using rule 5 (vars_1 -> ID np_var_2 vars_2 COMA vars_1 .)


state 72

    (35) array_declare -> LCORCH CTE_INT RCORCH . array_declare_1
    (36) array_declare_1 -> . LCORCH CTE_INT RCORCH array_declare_1
    (37) array_declare_1 -> . empty
    (160) empty -> .

    LCORCH          shift and go to state 78
    COMA            reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)

    array_declare_1                shift and go to state 79
    empty                          shift and go to state 80

state 73

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK . np_var_c2 vars statutes RBRACK np_eof debug np_var_c3
    (123) np_var_c2 -> . empty
    (160) empty -> .

    VAR             reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    np_var_c2                      shift and go to state 81
    empty                          shift and go to state 82

state 74

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v . RPAREN LBRACK vars statutes RBRACK np_var_b6 function

    RPAREN          shift and go to state 83


state 75

    (15) function_v -> function_v1 .

    RPAREN          reduce using rule 15 (function_v -> function_v1 .)


state 76

    (16) function_v -> empty .

    RPAREN          reduce using rule 16 (function_v -> empty .)


state 77

    (17) function_v1 -> type . np_var_b4 ID np_var_b5
    (18) function_v1 -> type . np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> type . np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> type . np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (119) np_var_b4 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)

    np_var_b4                      shift and go to state 84
    empty                          shift and go to state 85

state 78

    (36) array_declare_1 -> LCORCH . CTE_INT RCORCH array_declare_1

    CTE_INT         shift and go to state 86


state 79

    (35) array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .

    COMA            reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)
    SCOLO           reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)
    RPAREN          reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)


state 80

    (37) array_declare_1 -> empty .

    COMA            reduce using rule 37 (array_declare_1 -> empty .)
    SCOLO           reduce using rule 37 (array_declare_1 -> empty .)
    RPAREN          reduce using rule 37 (array_declare_1 -> empty .)


state 81

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 . vars statutes RBRACK np_eof debug np_var_c3
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (160) empty -> .

    VAR             shift and go to state 10
    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    vars                           shift and go to state 87
    empty                          shift and go to state 11

state 82

    (123) np_var_c2 -> empty .

    VAR             reduce using rule 123 (np_var_c2 -> empty .)
    ID              reduce using rule 123 (np_var_c2 -> empty .)
    PRINT           reduce using rule 123 (np_var_c2 -> empty .)
    IF              reduce using rule 123 (np_var_c2 -> empty .)
    WHILE           reduce using rule 123 (np_var_c2 -> empty .)
    DO              reduce using rule 123 (np_var_c2 -> empty .)
    FOR             reduce using rule 123 (np_var_c2 -> empty .)
    RBRACK          reduce using rule 123 (np_var_c2 -> empty .)


state 83

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN . LBRACK vars statutes RBRACK np_var_b6 function

    LBRACK          shift and go to state 88


state 84

    (17) function_v1 -> type np_var_b4 . ID np_var_b5
    (18) function_v1 -> type np_var_b4 . ID np_var_b5 COMA function_v1
    (19) function_v1 -> type np_var_b4 . ID np_var_b5 array_declare
    (20) function_v1 -> type np_var_b4 . ID np_var_b5 array_declare COMA function_v1

    ID              shift and go to state 89


state 85

    (119) np_var_b4 -> empty .

    ID              reduce using rule 119 (np_var_b4 -> empty .)


state 86

    (36) array_declare_1 -> LCORCH CTE_INT . RCORCH array_declare_1

    RCORCH          shift and go to state 90


state 87

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars . statutes RBRACK np_eof debug np_var_c3
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes                       shift and go to state 91
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 88

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK . vars statutes RBRACK np_var_b6 function
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (160) empty -> .

    VAR             shift and go to state 10
    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    vars                           shift and go to state 109
    empty                          shift and go to state 11

state 89

    (17) function_v1 -> type np_var_b4 ID . np_var_b5
    (18) function_v1 -> type np_var_b4 ID . np_var_b5 COMA function_v1
    (19) function_v1 -> type np_var_b4 ID . np_var_b5 array_declare
    (20) function_v1 -> type np_var_b4 ID . np_var_b5 array_declare COMA function_v1
    (120) np_var_b5 -> . empty
    (160) empty -> .

    COMA            reduce using rule 160 (empty -> .)
    LCORCH          reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)

    np_var_b5                      shift and go to state 110
    empty                          shift and go to state 111

state 90

    (36) array_declare_1 -> LCORCH CTE_INT RCORCH . array_declare_1
    (36) array_declare_1 -> . LCORCH CTE_INT RCORCH array_declare_1
    (37) array_declare_1 -> . empty
    (160) empty -> .

    LCORCH          shift and go to state 78
    COMA            reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)

    array_declare_1                shift and go to state 112
    empty                          shift and go to state 80

state 91

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes . RBRACK np_eof debug np_var_c3

    RBRACK          shift and go to state 113


state 92

    (38) statutes -> statutes_1 . statutes
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes_1                     shift and go to state 92
    statutes                       shift and go to state 114
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 93

    (39) statutes -> empty .

    RBRACK          reduce using rule 39 (statutes -> empty .)


state 94

    (40) statutes_1 -> assignation .

    ID              reduce using rule 40 (statutes_1 -> assignation .)
    PRINT           reduce using rule 40 (statutes_1 -> assignation .)
    IF              reduce using rule 40 (statutes_1 -> assignation .)
    WHILE           reduce using rule 40 (statutes_1 -> assignation .)
    DO              reduce using rule 40 (statutes_1 -> assignation .)
    FOR             reduce using rule 40 (statutes_1 -> assignation .)
    RBRACK          reduce using rule 40 (statutes_1 -> assignation .)


state 95

    (41) statutes_1 -> writing .

    ID              reduce using rule 41 (statutes_1 -> writing .)
    PRINT           reduce using rule 41 (statutes_1 -> writing .)
    IF              reduce using rule 41 (statutes_1 -> writing .)
    WHILE           reduce using rule 41 (statutes_1 -> writing .)
    DO              reduce using rule 41 (statutes_1 -> writing .)
    FOR             reduce using rule 41 (statutes_1 -> writing .)
    RBRACK          reduce using rule 41 (statutes_1 -> writing .)


state 96

    (42) statutes_1 -> condition .

    ID              reduce using rule 42 (statutes_1 -> condition .)
    PRINT           reduce using rule 42 (statutes_1 -> condition .)
    IF              reduce using rule 42 (statutes_1 -> condition .)
    WHILE           reduce using rule 42 (statutes_1 -> condition .)
    DO              reduce using rule 42 (statutes_1 -> condition .)
    FOR             reduce using rule 42 (statutes_1 -> condition .)
    RBRACK          reduce using rule 42 (statutes_1 -> condition .)


state 97

    (43) statutes_1 -> cycle .

    ID              reduce using rule 43 (statutes_1 -> cycle .)
    PRINT           reduce using rule 43 (statutes_1 -> cycle .)
    IF              reduce using rule 43 (statutes_1 -> cycle .)
    WHILE           reduce using rule 43 (statutes_1 -> cycle .)
    DO              reduce using rule 43 (statutes_1 -> cycle .)
    FOR             reduce using rule 43 (statutes_1 -> cycle .)
    RBRACK          reduce using rule 43 (statutes_1 -> cycle .)


state 98

    (44) statutes_1 -> function_call .

    ID              reduce using rule 44 (statutes_1 -> function_call .)
    PRINT           reduce using rule 44 (statutes_1 -> function_call .)
    IF              reduce using rule 44 (statutes_1 -> function_call .)
    WHILE           reduce using rule 44 (statutes_1 -> function_call .)
    DO              reduce using rule 44 (statutes_1 -> function_call .)
    FOR             reduce using rule 44 (statutes_1 -> function_call .)
    RBRACK          reduce using rule 44 (statutes_1 -> function_call .)


state 99

    (45) assignation -> ID . np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (60) function_call -> ID . np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> ID . np_era LPAREN RPAREN np_gosub SCOLO
    (132) np_quad_a2 -> . empty
    (155) np_era -> . empty
    (160) empty -> .

    EQL             reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)

    np_quad_a2                     shift and go to state 115
    np_era                         shift and go to state 116
    empty                          shift and go to state 117

state 100

    (46) writing -> PRINT . np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (133) np_quad_b -> . empty
    (160) empty -> .

    LPAREN          reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 118
    empty                          shift and go to state 119

state 101

    (49) condition -> IF . LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3

    LPAREN          shift and go to state 120


state 102

    (52) cycle -> c_while .

    ID              reduce using rule 52 (cycle -> c_while .)
    PRINT           reduce using rule 52 (cycle -> c_while .)
    IF              reduce using rule 52 (cycle -> c_while .)
    WHILE           reduce using rule 52 (cycle -> c_while .)
    DO              reduce using rule 52 (cycle -> c_while .)
    FOR             reduce using rule 52 (cycle -> c_while .)
    RBRACK          reduce using rule 52 (cycle -> c_while .)


state 103

    (53) cycle -> c_do .

    ID              reduce using rule 53 (cycle -> c_do .)
    PRINT           reduce using rule 53 (cycle -> c_do .)
    IF              reduce using rule 53 (cycle -> c_do .)
    WHILE           reduce using rule 53 (cycle -> c_do .)
    DO              reduce using rule 53 (cycle -> c_do .)
    FOR             reduce using rule 53 (cycle -> c_do .)
    RBRACK          reduce using rule 53 (cycle -> c_do .)


state 104

    (54) cycle -> c_for .

    ID              reduce using rule 54 (cycle -> c_for .)
    PRINT           reduce using rule 54 (cycle -> c_for .)
    IF              reduce using rule 54 (cycle -> c_for .)
    WHILE           reduce using rule 54 (cycle -> c_for .)
    DO              reduce using rule 54 (cycle -> c_for .)
    FOR             reduce using rule 54 (cycle -> c_for .)
    RBRACK          reduce using rule 54 (cycle -> c_for .)


state 105

    (55) cycle -> c_forin .

    ID              reduce using rule 55 (cycle -> c_forin .)
    PRINT           reduce using rule 55 (cycle -> c_forin .)
    IF              reduce using rule 55 (cycle -> c_forin .)
    WHILE           reduce using rule 55 (cycle -> c_forin .)
    DO              reduce using rule 55 (cycle -> c_forin .)
    FOR             reduce using rule 55 (cycle -> c_forin .)
    RBRACK          reduce using rule 55 (cycle -> c_forin .)


state 106

    (56) c_while -> WHILE . np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (144) np_statutes_b1 -> . empty
    (160) empty -> .

    LPAREN          reduce using rule 160 (empty -> .)

    np_statutes_b1                 shift and go to state 121
    empty                          shift and go to state 122

state 107

    (57) c_do -> DO . np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (147) np_statutes_c1 -> . empty
    (160) empty -> .

    LBRACK          reduce using rule 160 (empty -> .)

    np_statutes_c1                 shift and go to state 123
    empty                          shift and go to state 124

state 108

    (58) c_for -> FOR . LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> FOR . LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    LPAREN          shift and go to state 125


state 109

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars . statutes RBRACK np_var_b6 function
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes                       shift and go to state 126
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 110

    (17) function_v1 -> type np_var_b4 ID np_var_b5 .
    (18) function_v1 -> type np_var_b4 ID np_var_b5 . COMA function_v1
    (19) function_v1 -> type np_var_b4 ID np_var_b5 . array_declare
    (20) function_v1 -> type np_var_b4 ID np_var_b5 . array_declare COMA function_v1
    (35) array_declare -> . LCORCH CTE_INT RCORCH array_declare_1

    RPAREN          reduce using rule 17 (function_v1 -> type np_var_b4 ID np_var_b5 .)
    COMA            shift and go to state 127
    LCORCH          shift and go to state 63

    array_declare                  shift and go to state 128

state 111

    (120) np_var_b5 -> empty .

    COMA            reduce using rule 120 (np_var_b5 -> empty .)
    LCORCH          reduce using rule 120 (np_var_b5 -> empty .)
    RPAREN          reduce using rule 120 (np_var_b5 -> empty .)


state 112

    (36) array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .

    COMA            reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)
    SCOLO           reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)
    RPAREN          reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)


state 113

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK . np_eof debug np_var_c3
    (159) np_eof -> . empty
    (160) empty -> .

    $end            reduce using rule 160 (empty -> .)

    np_eof                         shift and go to state 129
    empty                          shift and go to state 130

state 114

    (38) statutes -> statutes_1 statutes .

    RBRACK          reduce using rule 38 (statutes -> statutes_1 statutes .)


state 115

    (45) assignation -> ID np_quad_a2 . EQL np_quad_b expression np_quad_assign SCOLO

    EQL             shift and go to state 131


state 116

    (60) function_call -> ID np_era . LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> ID np_era . LPAREN RPAREN np_gosub SCOLO

    LPAREN          shift and go to state 132


state 117

    (132) np_quad_a2 -> empty .
    (155) np_era -> empty .

    EQL             reduce using rule 132 (np_quad_a2 -> empty .)
    LPAREN          reduce using rule 155 (np_era -> empty .)


state 118

    (46) writing -> PRINT np_quad_b . LPAREN writing_1 RPAREN np_quad_print SCOLO

    LPAREN          shift and go to state 133


state 119

    (133) np_quad_b -> empty .

    LPAREN          reduce using rule 133 (np_quad_b -> empty .)
    NOT             reduce using rule 133 (np_quad_b -> empty .)
    RPAREN          reduce using rule 133 (np_quad_b -> empty .)
    ID              reduce using rule 133 (np_quad_b -> empty .)
    CTE_INT         reduce using rule 133 (np_quad_b -> empty .)
    CTE_FLO         reduce using rule 133 (np_quad_b -> empty .)
    CTE_BOO         reduce using rule 133 (np_quad_b -> empty .)
    CTE_STRING      reduce using rule 133 (np_quad_b -> empty .)
    CTE_CHAR        reduce using rule 133 (np_quad_b -> empty .)


state 120

    (49) condition -> IF LPAREN . expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    expression                     shift and go to state 134
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 121

    (56) c_while -> WHILE np_statutes_b1 . LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3

    LPAREN          shift and go to state 150


state 122

    (144) np_statutes_b1 -> empty .

    LPAREN          reduce using rule 144 (np_statutes_b1 -> empty .)


state 123

    (57) c_do -> DO np_statutes_c1 . LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2

    LBRACK          shift and go to state 151


state 124

    (147) np_statutes_c1 -> empty .

    LBRACK          reduce using rule 147 (np_statutes_c1 -> empty .)


state 125

    (58) c_for -> FOR LPAREN . ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> FOR LPAREN . ID IN ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 152


state 126

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes . RBRACK np_var_b6 function

    RBRACK          shift and go to state 153


state 127

    (18) function_v1 -> type np_var_b4 ID np_var_b5 COMA . function_v1
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    type                           shift and go to state 77
    function_v1                    shift and go to state 154
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 128

    (19) function_v1 -> type np_var_b4 ID np_var_b5 array_declare .
    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare . COMA function_v1

    RPAREN          reduce using rule 19 (function_v1 -> type np_var_b4 ID np_var_b5 array_declare .)
    COMA            shift and go to state 155


state 129

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof . debug np_var_c3
    (158) debug -> . empty
    (160) empty -> .

    $end            reduce using rule 160 (empty -> .)

    debug                          shift and go to state 156
    empty                          shift and go to state 157

state 130

    (159) np_eof -> empty .

    $end            reduce using rule 159 (np_eof -> empty .)


state 131

    (45) assignation -> ID np_quad_a2 EQL . np_quad_b expression np_quad_assign SCOLO
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 158
    empty                          shift and go to state 119

state 132

    (60) function_call -> ID np_era LPAREN . function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> ID np_era LPAREN . RPAREN np_gosub SCOLO
    (64) function_call_2 -> . expression np_param
    (65) function_call_2 -> . expression np_param COMA function_call_2
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    RPAREN          shift and go to state 160
    NOT             shift and go to state 141
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    function_call_2                shift and go to state 159
    expression                     shift and go to state 161
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 133

    (46) writing -> PRINT np_quad_b LPAREN . writing_1 RPAREN np_quad_print SCOLO
    (47) writing_1 -> . expression
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    writing_1                      shift and go to state 162
    expression                     shift and go to state 163
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 134

    (49) condition -> IF LPAREN expression . np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (141) np_statutes_a1 -> . empty
    (160) empty -> .

    RPAREN          reduce using rule 160 (empty -> .)

    np_statutes_a1                 shift and go to state 164
    empty                          shift and go to state 165

state 135

    (86) exp_lv5 -> RPAREN . expression LPAREN
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    expression                     shift and go to state 166
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 136

    (66) expression -> exp_lv1 .
    (67) expression -> exp_lv1 . AND np_quad_b expression np_quad_c0
    (68) expression -> exp_lv1 . OR np_quad_b expression np_quad_c0

    RPAREN          reduce using rule 66 (expression -> exp_lv1 .)
    COMA            reduce using rule 66 (expression -> exp_lv1 .)
    LPAREN          reduce using rule 66 (expression -> exp_lv1 .)
    SCOLO           reduce using rule 66 (expression -> exp_lv1 .)
    AND             shift and go to state 167
    OR              shift and go to state 168


state 137

    (69) exp_lv1 -> exp_lv2 . exp_lv1_1
    (70) exp_lv1_1 -> . LESST np_quad_b exp_lv2 np_quad_c1
    (71) exp_lv1_1 -> . MORET np_quad_b exp_lv2 np_quad_c1
    (72) exp_lv1_1 -> . LESSEQUAL np_quad_b exp_lv2 np_quad_c1
    (73) exp_lv1_1 -> . MOREEQUAL np_quad_b exp_lv2 np_quad_c1
    (74) exp_lv1_1 -> . EQUALTO np_quad_b exp_lv2 np_quad_c1
    (75) exp_lv1_1 -> . NOTEQUALTO np_quad_b exp_lv2 np_quad_c1
    (76) exp_lv1_1 -> . empty
    (160) empty -> .

    LESST           shift and go to state 170
    MORET           shift and go to state 171
    LESSEQUAL       shift and go to state 172
    MOREEQUAL       shift and go to state 173
    EQUALTO         shift and go to state 174
    NOTEQUALTO      shift and go to state 175
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    exp_lv1_1                      shift and go to state 169
    empty                          shift and go to state 176

state 138

    (77) exp_lv2 -> exp_lv3 .
    (78) exp_lv2 -> exp_lv3 . SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> exp_lv3 . SUB np_quad_b exp_lv2 np_quad_c2

    LESST           reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    MORET           reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    LESSEQUAL       reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    MOREEQUAL       reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    EQUALTO         reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    NOTEQUALTO      reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    AND             reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    OR              reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    RPAREN          reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    COMA            reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    LPAREN          reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    SCOLO           reduce using rule 77 (exp_lv2 -> exp_lv3 .)
    SUMA            shift and go to state 177
    SUB             shift and go to state 178


state 139

    (80) exp_lv3 -> exp_lv4 .
    (81) exp_lv3 -> exp_lv4 . MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> exp_lv4 . DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> exp_lv4 . RESD np_quad_b exp_lv3 np_quad_c3

    SUMA            reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    SUB             reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    LESST           reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    MORET           reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    LESSEQUAL       reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    MOREEQUAL       reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    EQUALTO         reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    NOTEQUALTO      reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    AND             reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    OR              reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    RPAREN          reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    COMA            reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    LPAREN          reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    SCOLO           reduce using rule 80 (exp_lv3 -> exp_lv4 .)
    MUL             shift and go to state 179
    DIV             shift and go to state 180
    RESD            shift and go to state 181


state 140

    (84) exp_lv4 -> exp_lv5 .

    MUL             reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    DIV             reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    RESD            reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    SUMA            reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    SUB             reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    LESST           reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    MORET           reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    LESSEQUAL       reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    MOREEQUAL       reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    EQUALTO         reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    NOTEQUALTO      reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    AND             reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    OR              reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    RPAREN          reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    COMA            reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    LPAREN          reduce using rule 84 (exp_lv4 -> exp_lv5 .)
    SCOLO           reduce using rule 84 (exp_lv4 -> exp_lv5 .)


state 141

    (85) exp_lv4 -> NOT . np_quad_b exp_lv5 np_quad_c4
    (133) np_quad_b -> . empty
    (160) empty -> .

    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 182
    empty                          shift and go to state 119

state 142

    (87) exp_lv5 -> var_cte .

    MUL             reduce using rule 87 (exp_lv5 -> var_cte .)
    DIV             reduce using rule 87 (exp_lv5 -> var_cte .)
    RESD            reduce using rule 87 (exp_lv5 -> var_cte .)
    SUMA            reduce using rule 87 (exp_lv5 -> var_cte .)
    SUB             reduce using rule 87 (exp_lv5 -> var_cte .)
    LESST           reduce using rule 87 (exp_lv5 -> var_cte .)
    MORET           reduce using rule 87 (exp_lv5 -> var_cte .)
    LESSEQUAL       reduce using rule 87 (exp_lv5 -> var_cte .)
    MOREEQUAL       reduce using rule 87 (exp_lv5 -> var_cte .)
    EQUALTO         reduce using rule 87 (exp_lv5 -> var_cte .)
    NOTEQUALTO      reduce using rule 87 (exp_lv5 -> var_cte .)
    AND             reduce using rule 87 (exp_lv5 -> var_cte .)
    OR              reduce using rule 87 (exp_lv5 -> var_cte .)
    RPAREN          reduce using rule 87 (exp_lv5 -> var_cte .)
    COMA            reduce using rule 87 (exp_lv5 -> var_cte .)
    LPAREN          reduce using rule 87 (exp_lv5 -> var_cte .)
    SCOLO           reduce using rule 87 (exp_lv5 -> var_cte .)


state 143

    (88) exp_lv5 -> method .

    MUL             reduce using rule 88 (exp_lv5 -> method .)
    DIV             reduce using rule 88 (exp_lv5 -> method .)
    RESD            reduce using rule 88 (exp_lv5 -> method .)
    SUMA            reduce using rule 88 (exp_lv5 -> method .)
    SUB             reduce using rule 88 (exp_lv5 -> method .)
    LESST           reduce using rule 88 (exp_lv5 -> method .)
    MORET           reduce using rule 88 (exp_lv5 -> method .)
    LESSEQUAL       reduce using rule 88 (exp_lv5 -> method .)
    MOREEQUAL       reduce using rule 88 (exp_lv5 -> method .)
    EQUALTO         reduce using rule 88 (exp_lv5 -> method .)
    NOTEQUALTO      reduce using rule 88 (exp_lv5 -> method .)
    AND             reduce using rule 88 (exp_lv5 -> method .)
    OR              reduce using rule 88 (exp_lv5 -> method .)
    RPAREN          reduce using rule 88 (exp_lv5 -> method .)
    COMA            reduce using rule 88 (exp_lv5 -> method .)
    LPAREN          reduce using rule 88 (exp_lv5 -> method .)
    SCOLO           reduce using rule 88 (exp_lv5 -> method .)


state 144

    (89) exp_lv5 -> ID . np_quad_a2
    (90) exp_lv5 -> ID . np_quad_a2 array_access
    (101) method -> ID . DOT method_t LPAREN method_1 RPAREN
    (132) np_quad_a2 -> . empty
    (160) empty -> .

    DOT             shift and go to state 184
    LCORCH          reduce using rule 160 (empty -> .)
    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_a2                     shift and go to state 183
    empty                          shift and go to state 185

state 145

    (96) var_cte -> CTE_INT . np_quad_a1_int
    (127) np_quad_a1_int -> . empty
    (160) empty -> .

    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_a1_int                 shift and go to state 186
    empty                          shift and go to state 187

state 146

    (97) var_cte -> CTE_FLO . np_quad_a1_flt
    (128) np_quad_a1_flt -> . empty
    (160) empty -> .

    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_a1_flt                 shift and go to state 188
    empty                          shift and go to state 189

state 147

    (98) var_cte -> CTE_BOO . np_quad_a1_bol
    (131) np_quad_a1_bol -> . empty
    (160) empty -> .

    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_a1_bol                 shift and go to state 190
    empty                          shift and go to state 191

state 148

    (99) var_cte -> CTE_STRING . np_quad_a1_str
    (130) np_quad_a1_str -> . empty
    (160) empty -> .

    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_a1_str                 shift and go to state 192
    empty                          shift and go to state 193

state 149

    (100) var_cte -> CTE_CHAR . np_quad_a1_chr
    (129) np_quad_a1_chr -> . empty
    (160) empty -> .

    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_a1_chr                 shift and go to state 194
    empty                          shift and go to state 195

state 150

    (56) c_while -> WHILE np_statutes_b1 LPAREN . expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    expression                     shift and go to state 196
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 151

    (57) c_do -> DO np_statutes_c1 LBRACK . statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes                       shift and go to state 197
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 152

    (58) c_for -> FOR LPAREN ID . SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> FOR LPAREN ID . IN ID RPAREN LBRACK statutes RBRACK

    SCOLO           shift and go to state 198
    IN              shift and go to state 199


state 153

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK . np_var_b6 function
    (121) np_var_b6 -> . empty
    (160) empty -> .

    VOID            reduce using rule 160 (empty -> .)
    INT             reduce using rule 160 (empty -> .)
    FLOAT           reduce using rule 160 (empty -> .)
    STRING          reduce using rule 160 (empty -> .)
    CHAR            reduce using rule 160 (empty -> .)
    BOOL            reduce using rule 160 (empty -> .)
    NODE            reduce using rule 160 (empty -> .)
    ARC             reduce using rule 160 (empty -> .)
    UNDIRECTED      reduce using rule 160 (empty -> .)
    DIRECTED        reduce using rule 160 (empty -> .)
    MAIN            reduce using rule 160 (empty -> .)

    np_var_b6                      shift and go to state 200
    empty                          shift and go to state 201

state 154

    (18) function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1 .

    RPAREN          reduce using rule 18 (function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1 .)


state 155

    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA . function_v1
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    type                           shift and go to state 77
    function_v1                    shift and go to state 202
    t_number                       shift and go to state 15
    t_string                       shift and go to state 16
    t_bool                         shift and go to state 17
    t_graph                        shift and go to state 18

state 156

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug . np_var_c3
    (124) np_var_c3 -> . empty
    (160) empty -> .

    $end            reduce using rule 160 (empty -> .)

    np_var_c3                      shift and go to state 203
    empty                          shift and go to state 204

state 157

    (158) debug -> empty .

    $end            reduce using rule 158 (debug -> empty .)


state 158

    (45) assignation -> ID np_quad_a2 EQL np_quad_b . expression np_quad_assign SCOLO
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    expression                     shift and go to state 205
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 159

    (60) function_call -> ID np_era LPAREN function_call_2 . RPAREN np_gosub SCOLO

    RPAREN          shift and go to state 206


state 160

    (61) function_call -> ID np_era LPAREN RPAREN . np_gosub SCOLO
    (86) exp_lv5 -> RPAREN . expression LPAREN
    (156) np_gosub -> . empty
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (160) empty -> .
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    SCOLO           reduce using rule 160 (empty -> .)
    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    np_gosub                       shift and go to state 207
    expression                     shift and go to state 166
    empty                          shift and go to state 208
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 161

    (64) function_call_2 -> expression . np_param
    (65) function_call_2 -> expression . np_param COMA function_call_2
    (157) np_param -> . empty
    (160) empty -> .

    COMA            reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)

    np_param                       shift and go to state 209
    empty                          shift and go to state 210

state 162

    (46) writing -> PRINT np_quad_b LPAREN writing_1 . RPAREN np_quad_print SCOLO

    RPAREN          shift and go to state 211


state 163

    (47) writing_1 -> expression .

    RPAREN          reduce using rule 47 (writing_1 -> expression .)


state 164

    (49) condition -> IF LPAREN expression np_statutes_a1 . RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3

    RPAREN          shift and go to state 212


state 165

    (141) np_statutes_a1 -> empty .

    RPAREN          reduce using rule 141 (np_statutes_a1 -> empty .)


state 166

    (86) exp_lv5 -> RPAREN expression . LPAREN

    LPAREN          shift and go to state 213


state 167

    (67) expression -> exp_lv1 AND . np_quad_b expression np_quad_c0
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 214
    empty                          shift and go to state 119

state 168

    (68) expression -> exp_lv1 OR . np_quad_b expression np_quad_c0
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 215
    empty                          shift and go to state 119

state 169

    (69) exp_lv1 -> exp_lv2 exp_lv1_1 .

    AND             reduce using rule 69 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    OR              reduce using rule 69 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    RPAREN          reduce using rule 69 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    COMA            reduce using rule 69 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    LPAREN          reduce using rule 69 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    SCOLO           reduce using rule 69 (exp_lv1 -> exp_lv2 exp_lv1_1 .)


state 170

    (70) exp_lv1_1 -> LESST . np_quad_b exp_lv2 np_quad_c1
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 216
    empty                          shift and go to state 119

state 171

    (71) exp_lv1_1 -> MORET . np_quad_b exp_lv2 np_quad_c1
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 217
    empty                          shift and go to state 119

state 172

    (72) exp_lv1_1 -> LESSEQUAL . np_quad_b exp_lv2 np_quad_c1
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 218
    empty                          shift and go to state 119

state 173

    (73) exp_lv1_1 -> MOREEQUAL . np_quad_b exp_lv2 np_quad_c1
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 219
    empty                          shift and go to state 119

state 174

    (74) exp_lv1_1 -> EQUALTO . np_quad_b exp_lv2 np_quad_c1
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 220
    empty                          shift and go to state 119

state 175

    (75) exp_lv1_1 -> NOTEQUALTO . np_quad_b exp_lv2 np_quad_c1
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 221
    empty                          shift and go to state 119

state 176

    (76) exp_lv1_1 -> empty .

    AND             reduce using rule 76 (exp_lv1_1 -> empty .)
    OR              reduce using rule 76 (exp_lv1_1 -> empty .)
    RPAREN          reduce using rule 76 (exp_lv1_1 -> empty .)
    COMA            reduce using rule 76 (exp_lv1_1 -> empty .)
    LPAREN          reduce using rule 76 (exp_lv1_1 -> empty .)
    SCOLO           reduce using rule 76 (exp_lv1_1 -> empty .)


state 177

    (78) exp_lv2 -> exp_lv3 SUMA . np_quad_b exp_lv2 np_quad_c2
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 222
    empty                          shift and go to state 119

state 178

    (79) exp_lv2 -> exp_lv3 SUB . np_quad_b exp_lv2 np_quad_c2
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 223
    empty                          shift and go to state 119

state 179

    (81) exp_lv3 -> exp_lv4 MUL . np_quad_b exp_lv3 np_quad_c3
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 224
    empty                          shift and go to state 119

state 180

    (82) exp_lv3 -> exp_lv4 DIV . np_quad_b exp_lv3 np_quad_c3
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 225
    empty                          shift and go to state 119

state 181

    (83) exp_lv3 -> exp_lv4 RESD . np_quad_b exp_lv3 np_quad_c3
    (133) np_quad_b -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_quad_b                      shift and go to state 226
    empty                          shift and go to state 119

state 182

    (85) exp_lv4 -> NOT np_quad_b . exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv5                        shift and go to state 227
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 183

    (89) exp_lv5 -> ID np_quad_a2 .
    (90) exp_lv5 -> ID np_quad_a2 . array_access
    (91) array_access -> . LCORCH arrary_access_1 RCORCH arrary_access_2

    MUL             reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    DIV             reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    RESD            reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    SUMA            reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    SUB             reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    LESST           reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    MORET           reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    LESSEQUAL       reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    MOREEQUAL       reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    EQUALTO         reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    NOTEQUALTO      reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    AND             reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    OR              reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    RPAREN          reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    COMA            reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    LPAREN          reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    SCOLO           reduce using rule 89 (exp_lv5 -> ID np_quad_a2 .)
    LCORCH          shift and go to state 229

    array_access                   shift and go to state 228

state 184

    (101) method -> ID DOT . method_t LPAREN method_1 RPAREN
    (106) method_t -> . DEG
    (107) method_t -> . SHORTPATH
    (108) method_t -> . DIAMETER
    (109) method_t -> . ADD
    (110) method_t -> . DELETE
    (111) method_t -> . ARC

    DEG             shift and go to state 231
    SHORTPATH       shift and go to state 232
    DIAMETER        shift and go to state 233
    ADD             shift and go to state 234
    DELETE          shift and go to state 235
    ARC             shift and go to state 236

    method_t                       shift and go to state 230

state 185

    (132) np_quad_a2 -> empty .

    LCORCH          reduce using rule 132 (np_quad_a2 -> empty .)
    MUL             reduce using rule 132 (np_quad_a2 -> empty .)
    DIV             reduce using rule 132 (np_quad_a2 -> empty .)
    RESD            reduce using rule 132 (np_quad_a2 -> empty .)
    SUMA            reduce using rule 132 (np_quad_a2 -> empty .)
    SUB             reduce using rule 132 (np_quad_a2 -> empty .)
    LESST           reduce using rule 132 (np_quad_a2 -> empty .)
    MORET           reduce using rule 132 (np_quad_a2 -> empty .)
    LESSEQUAL       reduce using rule 132 (np_quad_a2 -> empty .)
    MOREEQUAL       reduce using rule 132 (np_quad_a2 -> empty .)
    EQUALTO         reduce using rule 132 (np_quad_a2 -> empty .)
    NOTEQUALTO      reduce using rule 132 (np_quad_a2 -> empty .)
    AND             reduce using rule 132 (np_quad_a2 -> empty .)
    OR              reduce using rule 132 (np_quad_a2 -> empty .)
    RPAREN          reduce using rule 132 (np_quad_a2 -> empty .)
    COMA            reduce using rule 132 (np_quad_a2 -> empty .)
    LPAREN          reduce using rule 132 (np_quad_a2 -> empty .)
    SCOLO           reduce using rule 132 (np_quad_a2 -> empty .)
    EQL             reduce using rule 132 (np_quad_a2 -> empty .)


state 186

    (96) var_cte -> CTE_INT np_quad_a1_int .

    MUL             reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    DIV             reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    RESD            reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    SUMA            reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    SUB             reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    LESST           reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    MORET           reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    LESSEQUAL       reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    MOREEQUAL       reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    EQUALTO         reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    NOTEQUALTO      reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    AND             reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    OR              reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    RPAREN          reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    COMA            reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    LPAREN          reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)
    SCOLO           reduce using rule 96 (var_cte -> CTE_INT np_quad_a1_int .)


state 187

    (127) np_quad_a1_int -> empty .

    MUL             reduce using rule 127 (np_quad_a1_int -> empty .)
    DIV             reduce using rule 127 (np_quad_a1_int -> empty .)
    RESD            reduce using rule 127 (np_quad_a1_int -> empty .)
    SUMA            reduce using rule 127 (np_quad_a1_int -> empty .)
    SUB             reduce using rule 127 (np_quad_a1_int -> empty .)
    LESST           reduce using rule 127 (np_quad_a1_int -> empty .)
    MORET           reduce using rule 127 (np_quad_a1_int -> empty .)
    LESSEQUAL       reduce using rule 127 (np_quad_a1_int -> empty .)
    MOREEQUAL       reduce using rule 127 (np_quad_a1_int -> empty .)
    EQUALTO         reduce using rule 127 (np_quad_a1_int -> empty .)
    NOTEQUALTO      reduce using rule 127 (np_quad_a1_int -> empty .)
    AND             reduce using rule 127 (np_quad_a1_int -> empty .)
    OR              reduce using rule 127 (np_quad_a1_int -> empty .)
    RPAREN          reduce using rule 127 (np_quad_a1_int -> empty .)
    COMA            reduce using rule 127 (np_quad_a1_int -> empty .)
    LPAREN          reduce using rule 127 (np_quad_a1_int -> empty .)
    SCOLO           reduce using rule 127 (np_quad_a1_int -> empty .)


state 188

    (97) var_cte -> CTE_FLO np_quad_a1_flt .

    MUL             reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    DIV             reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    RESD            reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    SUMA            reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    SUB             reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    LESST           reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    MORET           reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    LESSEQUAL       reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    MOREEQUAL       reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    EQUALTO         reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    NOTEQUALTO      reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    AND             reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    OR              reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    RPAREN          reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    COMA            reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    LPAREN          reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)
    SCOLO           reduce using rule 97 (var_cte -> CTE_FLO np_quad_a1_flt .)


state 189

    (128) np_quad_a1_flt -> empty .

    MUL             reduce using rule 128 (np_quad_a1_flt -> empty .)
    DIV             reduce using rule 128 (np_quad_a1_flt -> empty .)
    RESD            reduce using rule 128 (np_quad_a1_flt -> empty .)
    SUMA            reduce using rule 128 (np_quad_a1_flt -> empty .)
    SUB             reduce using rule 128 (np_quad_a1_flt -> empty .)
    LESST           reduce using rule 128 (np_quad_a1_flt -> empty .)
    MORET           reduce using rule 128 (np_quad_a1_flt -> empty .)
    LESSEQUAL       reduce using rule 128 (np_quad_a1_flt -> empty .)
    MOREEQUAL       reduce using rule 128 (np_quad_a1_flt -> empty .)
    EQUALTO         reduce using rule 128 (np_quad_a1_flt -> empty .)
    NOTEQUALTO      reduce using rule 128 (np_quad_a1_flt -> empty .)
    AND             reduce using rule 128 (np_quad_a1_flt -> empty .)
    OR              reduce using rule 128 (np_quad_a1_flt -> empty .)
    RPAREN          reduce using rule 128 (np_quad_a1_flt -> empty .)
    COMA            reduce using rule 128 (np_quad_a1_flt -> empty .)
    LPAREN          reduce using rule 128 (np_quad_a1_flt -> empty .)
    SCOLO           reduce using rule 128 (np_quad_a1_flt -> empty .)


state 190

    (98) var_cte -> CTE_BOO np_quad_a1_bol .

    MUL             reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    DIV             reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    RESD            reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    SUMA            reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    SUB             reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    LESST           reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    MORET           reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    LESSEQUAL       reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    MOREEQUAL       reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    EQUALTO         reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    NOTEQUALTO      reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    AND             reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    OR              reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    RPAREN          reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    COMA            reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    LPAREN          reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)
    SCOLO           reduce using rule 98 (var_cte -> CTE_BOO np_quad_a1_bol .)


state 191

    (131) np_quad_a1_bol -> empty .

    MUL             reduce using rule 131 (np_quad_a1_bol -> empty .)
    DIV             reduce using rule 131 (np_quad_a1_bol -> empty .)
    RESD            reduce using rule 131 (np_quad_a1_bol -> empty .)
    SUMA            reduce using rule 131 (np_quad_a1_bol -> empty .)
    SUB             reduce using rule 131 (np_quad_a1_bol -> empty .)
    LESST           reduce using rule 131 (np_quad_a1_bol -> empty .)
    MORET           reduce using rule 131 (np_quad_a1_bol -> empty .)
    LESSEQUAL       reduce using rule 131 (np_quad_a1_bol -> empty .)
    MOREEQUAL       reduce using rule 131 (np_quad_a1_bol -> empty .)
    EQUALTO         reduce using rule 131 (np_quad_a1_bol -> empty .)
    NOTEQUALTO      reduce using rule 131 (np_quad_a1_bol -> empty .)
    AND             reduce using rule 131 (np_quad_a1_bol -> empty .)
    OR              reduce using rule 131 (np_quad_a1_bol -> empty .)
    RPAREN          reduce using rule 131 (np_quad_a1_bol -> empty .)
    COMA            reduce using rule 131 (np_quad_a1_bol -> empty .)
    LPAREN          reduce using rule 131 (np_quad_a1_bol -> empty .)
    SCOLO           reduce using rule 131 (np_quad_a1_bol -> empty .)


state 192

    (99) var_cte -> CTE_STRING np_quad_a1_str .

    MUL             reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    DIV             reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    RESD            reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    SUMA            reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    SUB             reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    LESST           reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    MORET           reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    LESSEQUAL       reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    MOREEQUAL       reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    EQUALTO         reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    NOTEQUALTO      reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    AND             reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    OR              reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    RPAREN          reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    COMA            reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    LPAREN          reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)
    SCOLO           reduce using rule 99 (var_cte -> CTE_STRING np_quad_a1_str .)


state 193

    (130) np_quad_a1_str -> empty .

    MUL             reduce using rule 130 (np_quad_a1_str -> empty .)
    DIV             reduce using rule 130 (np_quad_a1_str -> empty .)
    RESD            reduce using rule 130 (np_quad_a1_str -> empty .)
    SUMA            reduce using rule 130 (np_quad_a1_str -> empty .)
    SUB             reduce using rule 130 (np_quad_a1_str -> empty .)
    LESST           reduce using rule 130 (np_quad_a1_str -> empty .)
    MORET           reduce using rule 130 (np_quad_a1_str -> empty .)
    LESSEQUAL       reduce using rule 130 (np_quad_a1_str -> empty .)
    MOREEQUAL       reduce using rule 130 (np_quad_a1_str -> empty .)
    EQUALTO         reduce using rule 130 (np_quad_a1_str -> empty .)
    NOTEQUALTO      reduce using rule 130 (np_quad_a1_str -> empty .)
    AND             reduce using rule 130 (np_quad_a1_str -> empty .)
    OR              reduce using rule 130 (np_quad_a1_str -> empty .)
    RPAREN          reduce using rule 130 (np_quad_a1_str -> empty .)
    COMA            reduce using rule 130 (np_quad_a1_str -> empty .)
    LPAREN          reduce using rule 130 (np_quad_a1_str -> empty .)
    SCOLO           reduce using rule 130 (np_quad_a1_str -> empty .)


state 194

    (100) var_cte -> CTE_CHAR np_quad_a1_chr .

    MUL             reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    DIV             reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    RESD            reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    SUMA            reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    SUB             reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    LESST           reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    MORET           reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    LESSEQUAL       reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    MOREEQUAL       reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    EQUALTO         reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    NOTEQUALTO      reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    AND             reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    OR              reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    RPAREN          reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    COMA            reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    LPAREN          reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)
    SCOLO           reduce using rule 100 (var_cte -> CTE_CHAR np_quad_a1_chr .)


state 195

    (129) np_quad_a1_chr -> empty .

    MUL             reduce using rule 129 (np_quad_a1_chr -> empty .)
    DIV             reduce using rule 129 (np_quad_a1_chr -> empty .)
    RESD            reduce using rule 129 (np_quad_a1_chr -> empty .)
    SUMA            reduce using rule 129 (np_quad_a1_chr -> empty .)
    SUB             reduce using rule 129 (np_quad_a1_chr -> empty .)
    LESST           reduce using rule 129 (np_quad_a1_chr -> empty .)
    MORET           reduce using rule 129 (np_quad_a1_chr -> empty .)
    LESSEQUAL       reduce using rule 129 (np_quad_a1_chr -> empty .)
    MOREEQUAL       reduce using rule 129 (np_quad_a1_chr -> empty .)
    EQUALTO         reduce using rule 129 (np_quad_a1_chr -> empty .)
    NOTEQUALTO      reduce using rule 129 (np_quad_a1_chr -> empty .)
    AND             reduce using rule 129 (np_quad_a1_chr -> empty .)
    OR              reduce using rule 129 (np_quad_a1_chr -> empty .)
    RPAREN          reduce using rule 129 (np_quad_a1_chr -> empty .)
    COMA            reduce using rule 129 (np_quad_a1_chr -> empty .)
    LPAREN          reduce using rule 129 (np_quad_a1_chr -> empty .)
    SCOLO           reduce using rule 129 (np_quad_a1_chr -> empty .)


state 196

    (56) c_while -> WHILE np_statutes_b1 LPAREN expression . RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3

    RPAREN          shift and go to state 237


state 197

    (57) c_do -> DO np_statutes_c1 LBRACK statutes . RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2

    RBRACK          shift and go to state 238


state 198

    (58) c_for -> FOR LPAREN ID SCOLO . np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (149) np_statutes_d1 -> . empty
    (160) empty -> .

    NOT             reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    ID              reduce using rule 160 (empty -> .)
    CTE_INT         reduce using rule 160 (empty -> .)
    CTE_FLO         reduce using rule 160 (empty -> .)
    CTE_BOO         reduce using rule 160 (empty -> .)
    CTE_STRING      reduce using rule 160 (empty -> .)
    CTE_CHAR        reduce using rule 160 (empty -> .)

    np_statutes_d1                 shift and go to state 239
    empty                          shift and go to state 240

state 199

    (59) c_forin -> FOR LPAREN ID IN . ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 241


state 200

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 . function
    (8) function -> . function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function
    (9) function -> . empty
    (10) function_t -> . VOID np_var_1
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (160) empty -> .
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    VOID            shift and go to state 31
    MAIN            reduce using rule 160 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    NODE            shift and go to state 24
    ARC             shift and go to state 25
    UNDIRECTED      shift and go to state 26
    DIRECTED        shift and go to state 27

    function_t                     shift and go to state 29
    function                       shift and go to state 242
    empty                          shift and go to state 30
    t_number                       shift and go to state 32
    t_string                       shift and go to state 33
    t_bool                         shift and go to state 34
    t_graph                        shift and go to state 35

state 201

    (121) np_var_b6 -> empty .

    VOID            reduce using rule 121 (np_var_b6 -> empty .)
    INT             reduce using rule 121 (np_var_b6 -> empty .)
    FLOAT           reduce using rule 121 (np_var_b6 -> empty .)
    STRING          reduce using rule 121 (np_var_b6 -> empty .)
    CHAR            reduce using rule 121 (np_var_b6 -> empty .)
    BOOL            reduce using rule 121 (np_var_b6 -> empty .)
    NODE            reduce using rule 121 (np_var_b6 -> empty .)
    ARC             reduce using rule 121 (np_var_b6 -> empty .)
    UNDIRECTED      reduce using rule 121 (np_var_b6 -> empty .)
    DIRECTED        reduce using rule 121 (np_var_b6 -> empty .)
    MAIN            reduce using rule 121 (np_var_b6 -> empty .)


state 202

    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1 .

    RPAREN          reduce using rule 20 (function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1 .)


state 203

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3 .

    $end            reduce using rule 21 (body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK np_eof debug np_var_c3 .)


state 204

    (124) np_var_c3 -> empty .

    $end            reduce using rule 124 (np_var_c3 -> empty .)


state 205

    (45) assignation -> ID np_quad_a2 EQL np_quad_b expression . np_quad_assign SCOLO
    (140) np_quad_assign -> . empty
    (160) empty -> .

    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_assign                 shift and go to state 243
    empty                          shift and go to state 244

state 206

    (60) function_call -> ID np_era LPAREN function_call_2 RPAREN . np_gosub SCOLO
    (156) np_gosub -> . empty
    (160) empty -> .

    SCOLO           reduce using rule 160 (empty -> .)

    np_gosub                       shift and go to state 245
    empty                          shift and go to state 208

state 207

    (61) function_call -> ID np_era LPAREN RPAREN np_gosub . SCOLO

    SCOLO           shift and go to state 246


state 208

    (156) np_gosub -> empty .

    SCOLO           reduce using rule 156 (np_gosub -> empty .)


state 209

    (64) function_call_2 -> expression np_param .
    (65) function_call_2 -> expression np_param . COMA function_call_2

    RPAREN          reduce using rule 64 (function_call_2 -> expression np_param .)
    COMA            shift and go to state 247


state 210

    (157) np_param -> empty .

    COMA            reduce using rule 157 (np_param -> empty .)
    RPAREN          reduce using rule 157 (np_param -> empty .)


state 211

    (46) writing -> PRINT np_quad_b LPAREN writing_1 RPAREN . np_quad_print SCOLO
    (139) np_quad_print -> . empty
    (160) empty -> .

    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_print                  shift and go to state 248
    empty                          shift and go to state 249

state 212

    (49) condition -> IF LPAREN expression np_statutes_a1 RPAREN . LBRACK statutes RBRACK condition_1 np_statutes_a3

    LBRACK          shift and go to state 250


state 213

    (86) exp_lv5 -> RPAREN expression LPAREN .

    MUL             reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    DIV             reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    RESD            reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    SUMA            reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    SUB             reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    LESST           reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    MORET           reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    LESSEQUAL       reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    MOREEQUAL       reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    EQUALTO         reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    NOTEQUALTO      reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    AND             reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    OR              reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    RPAREN          reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    COMA            reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    LPAREN          reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)
    SCOLO           reduce using rule 86 (exp_lv5 -> RPAREN expression LPAREN .)


state 214

    (67) expression -> exp_lv1 AND np_quad_b . expression np_quad_c0
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv1                        shift and go to state 136
    expression                     shift and go to state 251
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 215

    (68) expression -> exp_lv1 OR np_quad_b . expression np_quad_c0
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv1                        shift and go to state 136
    expression                     shift and go to state 252
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 216

    (70) exp_lv1_1 -> LESST np_quad_b . exp_lv2 np_quad_c1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv2                        shift and go to state 253
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 217

    (71) exp_lv1_1 -> MORET np_quad_b . exp_lv2 np_quad_c1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv2                        shift and go to state 254
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 218

    (72) exp_lv1_1 -> LESSEQUAL np_quad_b . exp_lv2 np_quad_c1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv2                        shift and go to state 255
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 219

    (73) exp_lv1_1 -> MOREEQUAL np_quad_b . exp_lv2 np_quad_c1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv2                        shift and go to state 256
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 220

    (74) exp_lv1_1 -> EQUALTO np_quad_b . exp_lv2 np_quad_c1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv2                        shift and go to state 257
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 221

    (75) exp_lv1_1 -> NOTEQUALTO np_quad_b . exp_lv2 np_quad_c1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv2                        shift and go to state 258
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 222

    (78) exp_lv2 -> exp_lv3 SUMA np_quad_b . exp_lv2 np_quad_c2
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv3                        shift and go to state 138
    exp_lv2                        shift and go to state 259
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 223

    (79) exp_lv2 -> exp_lv3 SUB np_quad_b . exp_lv2 np_quad_c2
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv3                        shift and go to state 138
    exp_lv2                        shift and go to state 260
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 224

    (81) exp_lv3 -> exp_lv4 MUL np_quad_b . exp_lv3 np_quad_c3
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv4                        shift and go to state 139
    exp_lv3                        shift and go to state 261
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 225

    (82) exp_lv3 -> exp_lv4 DIV np_quad_b . exp_lv3 np_quad_c3
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv4                        shift and go to state 139
    exp_lv3                        shift and go to state 262
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 226

    (83) exp_lv3 -> exp_lv4 RESD np_quad_b . exp_lv3 np_quad_c3
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    exp_lv4                        shift and go to state 139
    exp_lv3                        shift and go to state 263
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 227

    (85) exp_lv4 -> NOT np_quad_b exp_lv5 . np_quad_c4
    (138) np_quad_c4 -> . empty
    (160) empty -> .

    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c4                     shift and go to state 264
    empty                          shift and go to state 265

state 228

    (90) exp_lv5 -> ID np_quad_a2 array_access .

    MUL             reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    DIV             reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    RESD            reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    SUMA            reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    SUB             reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    LESST           reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    MORET           reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    LESSEQUAL       reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    MOREEQUAL       reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    EQUALTO         reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    NOTEQUALTO      reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    AND             reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    OR              reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    RPAREN          reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    COMA            reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    LPAREN          reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)
    SCOLO           reduce using rule 90 (exp_lv5 -> ID np_quad_a2 array_access .)


state 229

    (91) array_access -> LCORCH . arrary_access_1 RCORCH arrary_access_2
    (92) arrary_access_1 -> . CTE_INT
    (93) arrary_access_1 -> . ID

    CTE_INT         shift and go to state 267
    ID              shift and go to state 268

    arrary_access_1                shift and go to state 266

state 230

    (101) method -> ID DOT method_t . LPAREN method_1 RPAREN

    LPAREN          shift and go to state 269


state 231

    (106) method_t -> DEG .

    LPAREN          reduce using rule 106 (method_t -> DEG .)


state 232

    (107) method_t -> SHORTPATH .

    LPAREN          reduce using rule 107 (method_t -> SHORTPATH .)


state 233

    (108) method_t -> DIAMETER .

    LPAREN          reduce using rule 108 (method_t -> DIAMETER .)


state 234

    (109) method_t -> ADD .

    LPAREN          reduce using rule 109 (method_t -> ADD .)


state 235

    (110) method_t -> DELETE .

    LPAREN          reduce using rule 110 (method_t -> DELETE .)


state 236

    (111) method_t -> ARC .

    LPAREN          reduce using rule 111 (method_t -> ARC .)


state 237

    (56) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN . np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (145) np_statutes_b2 -> . empty
    (160) empty -> .

    LBRACK          reduce using rule 160 (empty -> .)

    np_statutes_b2                 shift and go to state 270
    empty                          shift and go to state 271

state 238

    (57) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK . WHILE LPAREN expression RPAREN SCOLO np_statutes_c2

    WHILE           shift and go to state 272


state 239

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 . expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    expression                     shift and go to state 273
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 240

    (149) np_statutes_d1 -> empty .

    NOT             reduce using rule 149 (np_statutes_d1 -> empty .)
    RPAREN          reduce using rule 149 (np_statutes_d1 -> empty .)
    ID              reduce using rule 149 (np_statutes_d1 -> empty .)
    CTE_INT         reduce using rule 149 (np_statutes_d1 -> empty .)
    CTE_FLO         reduce using rule 149 (np_statutes_d1 -> empty .)
    CTE_BOO         reduce using rule 149 (np_statutes_d1 -> empty .)
    CTE_STRING      reduce using rule 149 (np_statutes_d1 -> empty .)
    CTE_CHAR        reduce using rule 149 (np_statutes_d1 -> empty .)


state 241

    (59) c_forin -> FOR LPAREN ID IN ID . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 274


state 242

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function .

    MAIN            reduce using rule 8 (function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK np_var_b6 function .)


state 243

    (45) assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign . SCOLO

    SCOLO           shift and go to state 275


state 244

    (140) np_quad_assign -> empty .

    SCOLO           reduce using rule 140 (np_quad_assign -> empty .)


state 245

    (60) function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub . SCOLO

    SCOLO           shift and go to state 276


state 246

    (61) function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .

    ID              reduce using rule 61 (function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .)
    PRINT           reduce using rule 61 (function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .)
    IF              reduce using rule 61 (function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .)
    WHILE           reduce using rule 61 (function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .)
    DO              reduce using rule 61 (function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .)
    FOR             reduce using rule 61 (function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .)
    RBRACK          reduce using rule 61 (function_call -> ID np_era LPAREN RPAREN np_gosub SCOLO .)


state 247

    (65) function_call_2 -> expression np_param COMA . function_call_2
    (64) function_call_2 -> . expression np_param
    (65) function_call_2 -> . expression np_param COMA function_call_2
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    expression                     shift and go to state 161
    function_call_2                shift and go to state 277
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 248

    (46) writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print . SCOLO

    SCOLO           shift and go to state 278


state 249

    (139) np_quad_print -> empty .

    SCOLO           reduce using rule 139 (np_quad_print -> empty .)


state 250

    (49) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK . statutes RBRACK condition_1 np_statutes_a3
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes                       shift and go to state 279
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 251

    (67) expression -> exp_lv1 AND np_quad_b expression . np_quad_c0
    (134) np_quad_c0 -> . empty
    (160) empty -> .

    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c0                     shift and go to state 280
    empty                          shift and go to state 281

state 252

    (68) expression -> exp_lv1 OR np_quad_b expression . np_quad_c0
    (134) np_quad_c0 -> . empty
    (160) empty -> .

    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c0                     shift and go to state 282
    empty                          shift and go to state 281

state 253

    (70) exp_lv1_1 -> LESST np_quad_b exp_lv2 . np_quad_c1
    (135) np_quad_c1 -> . empty
    (160) empty -> .

    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c1                     shift and go to state 283
    empty                          shift and go to state 284

state 254

    (71) exp_lv1_1 -> MORET np_quad_b exp_lv2 . np_quad_c1
    (135) np_quad_c1 -> . empty
    (160) empty -> .

    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c1                     shift and go to state 285
    empty                          shift and go to state 284

state 255

    (72) exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 . np_quad_c1
    (135) np_quad_c1 -> . empty
    (160) empty -> .

    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c1                     shift and go to state 286
    empty                          shift and go to state 284

state 256

    (73) exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 . np_quad_c1
    (135) np_quad_c1 -> . empty
    (160) empty -> .

    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c1                     shift and go to state 287
    empty                          shift and go to state 284

state 257

    (74) exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 . np_quad_c1
    (135) np_quad_c1 -> . empty
    (160) empty -> .

    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c1                     shift and go to state 288
    empty                          shift and go to state 284

state 258

    (75) exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 . np_quad_c1
    (135) np_quad_c1 -> . empty
    (160) empty -> .

    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c1                     shift and go to state 289
    empty                          shift and go to state 284

state 259

    (78) exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 . np_quad_c2
    (136) np_quad_c2 -> . empty
    (160) empty -> .

    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c2                     shift and go to state 290
    empty                          shift and go to state 291

state 260

    (79) exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 . np_quad_c2
    (136) np_quad_c2 -> . empty
    (160) empty -> .

    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c2                     shift and go to state 292
    empty                          shift and go to state 291

state 261

    (81) exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 . np_quad_c3
    (137) np_quad_c3 -> . empty
    (160) empty -> .

    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c3                     shift and go to state 293
    empty                          shift and go to state 294

state 262

    (82) exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 . np_quad_c3
    (137) np_quad_c3 -> . empty
    (160) empty -> .

    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c3                     shift and go to state 295
    empty                          shift and go to state 294

state 263

    (83) exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 . np_quad_c3
    (137) np_quad_c3 -> . empty
    (160) empty -> .

    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    np_quad_c3                     shift and go to state 296
    empty                          shift and go to state 294

state 264

    (85) exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .

    MUL             reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    DIV             reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    RESD            reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    SUMA            reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    SUB             reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    LESST           reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    MORET           reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    LESSEQUAL       reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    MOREEQUAL       reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    EQUALTO         reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    NOTEQUALTO      reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    AND             reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    OR              reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    RPAREN          reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    COMA            reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    LPAREN          reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)
    SCOLO           reduce using rule 85 (exp_lv4 -> NOT np_quad_b exp_lv5 np_quad_c4 .)


state 265

    (138) np_quad_c4 -> empty .

    MUL             reduce using rule 138 (np_quad_c4 -> empty .)
    DIV             reduce using rule 138 (np_quad_c4 -> empty .)
    RESD            reduce using rule 138 (np_quad_c4 -> empty .)
    SUMA            reduce using rule 138 (np_quad_c4 -> empty .)
    SUB             reduce using rule 138 (np_quad_c4 -> empty .)
    LESST           reduce using rule 138 (np_quad_c4 -> empty .)
    MORET           reduce using rule 138 (np_quad_c4 -> empty .)
    LESSEQUAL       reduce using rule 138 (np_quad_c4 -> empty .)
    MOREEQUAL       reduce using rule 138 (np_quad_c4 -> empty .)
    EQUALTO         reduce using rule 138 (np_quad_c4 -> empty .)
    NOTEQUALTO      reduce using rule 138 (np_quad_c4 -> empty .)
    AND             reduce using rule 138 (np_quad_c4 -> empty .)
    OR              reduce using rule 138 (np_quad_c4 -> empty .)
    RPAREN          reduce using rule 138 (np_quad_c4 -> empty .)
    COMA            reduce using rule 138 (np_quad_c4 -> empty .)
    LPAREN          reduce using rule 138 (np_quad_c4 -> empty .)
    SCOLO           reduce using rule 138 (np_quad_c4 -> empty .)


state 266

    (91) array_access -> LCORCH arrary_access_1 . RCORCH arrary_access_2

    RCORCH          shift and go to state 297


state 267

    (92) arrary_access_1 -> CTE_INT .

    RCORCH          reduce using rule 92 (arrary_access_1 -> CTE_INT .)


state 268

    (93) arrary_access_1 -> ID .

    RCORCH          reduce using rule 93 (arrary_access_1 -> ID .)


state 269

    (101) method -> ID DOT method_t LPAREN . method_1 RPAREN
    (102) method_1 -> . method_1_1
    (103) method_1 -> . empty
    (104) method_1_1 -> . method_v
    (105) method_1_1 -> . method_v COMA method_1_1
    (160) empty -> .
    (112) method_v -> . ID
    (113) method_v -> . LBRACK ID COMA ID RBRACK

    RPAREN          reduce using rule 160 (empty -> .)
    ID              shift and go to state 298
    LBRACK          shift and go to state 303

    method_1                       shift and go to state 299
    method_1_1                     shift and go to state 300
    empty                          shift and go to state 301
    method_v                       shift and go to state 302

state 270

    (56) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 . LBRACK statutes RBRACK np_statutes_b3

    LBRACK          shift and go to state 304


state 271

    (145) np_statutes_b2 -> empty .

    LBRACK          reduce using rule 145 (np_statutes_b2 -> empty .)


state 272

    (57) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE . LPAREN expression RPAREN SCOLO np_statutes_c2

    LPAREN          shift and go to state 305


state 273

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression . np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (150) np_statutes_d2 -> . empty
    (160) empty -> .

    SCOLO           reduce using rule 160 (empty -> .)

    np_statutes_d2                 shift and go to state 306
    empty                          shift and go to state 307

state 274

    (59) c_forin -> FOR LPAREN ID IN ID RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 308


state 275

    (45) assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .

    ID              reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    PRINT           reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    IF              reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    WHILE           reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    DO              reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    FOR             reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    RBRACK          reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)
    RPAREN          reduce using rule 45 (assignation -> ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO .)


state 276

    (60) function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .

    ID              reduce using rule 60 (function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .)
    PRINT           reduce using rule 60 (function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .)
    IF              reduce using rule 60 (function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .)
    WHILE           reduce using rule 60 (function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .)
    DO              reduce using rule 60 (function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .)
    FOR             reduce using rule 60 (function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .)
    RBRACK          reduce using rule 60 (function_call -> ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO .)


state 277

    (65) function_call_2 -> expression np_param COMA function_call_2 .

    RPAREN          reduce using rule 65 (function_call_2 -> expression np_param COMA function_call_2 .)


state 278

    (46) writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .

    ID              reduce using rule 46 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    PRINT           reduce using rule 46 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    IF              reduce using rule 46 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    WHILE           reduce using rule 46 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    DO              reduce using rule 46 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    FOR             reduce using rule 46 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)
    RBRACK          reduce using rule 46 (writing -> PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO .)


state 279

    (49) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes . RBRACK condition_1 np_statutes_a3

    RBRACK          shift and go to state 309


state 280

    (67) expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .

    RPAREN          reduce using rule 67 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)
    COMA            reduce using rule 67 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)
    LPAREN          reduce using rule 67 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)
    SCOLO           reduce using rule 67 (expression -> exp_lv1 AND np_quad_b expression np_quad_c0 .)


state 281

    (134) np_quad_c0 -> empty .

    RPAREN          reduce using rule 134 (np_quad_c0 -> empty .)
    COMA            reduce using rule 134 (np_quad_c0 -> empty .)
    LPAREN          reduce using rule 134 (np_quad_c0 -> empty .)
    SCOLO           reduce using rule 134 (np_quad_c0 -> empty .)


state 282

    (68) expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .

    RPAREN          reduce using rule 68 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)
    COMA            reduce using rule 68 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)
    LPAREN          reduce using rule 68 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)
    SCOLO           reduce using rule 68 (expression -> exp_lv1 OR np_quad_b expression np_quad_c0 .)


state 283

    (70) exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 70 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 70 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 70 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 70 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 70 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 70 (exp_lv1_1 -> LESST np_quad_b exp_lv2 np_quad_c1 .)


state 284

    (135) np_quad_c1 -> empty .

    AND             reduce using rule 135 (np_quad_c1 -> empty .)
    OR              reduce using rule 135 (np_quad_c1 -> empty .)
    RPAREN          reduce using rule 135 (np_quad_c1 -> empty .)
    COMA            reduce using rule 135 (np_quad_c1 -> empty .)
    LPAREN          reduce using rule 135 (np_quad_c1 -> empty .)
    SCOLO           reduce using rule 135 (np_quad_c1 -> empty .)


state 285

    (71) exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 71 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 71 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 71 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 71 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 71 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 71 (exp_lv1_1 -> MORET np_quad_b exp_lv2 np_quad_c1 .)


state 286

    (72) exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 72 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 72 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 72 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 72 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 72 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 72 (exp_lv1_1 -> LESSEQUAL np_quad_b exp_lv2 np_quad_c1 .)


state 287

    (73) exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 73 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 73 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 73 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 73 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 73 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 73 (exp_lv1_1 -> MOREEQUAL np_quad_b exp_lv2 np_quad_c1 .)


state 288

    (74) exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 74 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 74 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 74 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 74 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 74 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 74 (exp_lv1_1 -> EQUALTO np_quad_b exp_lv2 np_quad_c1 .)


state 289

    (75) exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .

    AND             reduce using rule 75 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    OR              reduce using rule 75 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    RPAREN          reduce using rule 75 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    COMA            reduce using rule 75 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    LPAREN          reduce using rule 75 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)
    SCOLO           reduce using rule 75 (exp_lv1_1 -> NOTEQUALTO np_quad_b exp_lv2 np_quad_c1 .)


state 290

    (78) exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .

    LESST           reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    MORET           reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    LESSEQUAL       reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    MOREEQUAL       reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    EQUALTO         reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    NOTEQUALTO      reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    AND             reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    OR              reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    RPAREN          reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    COMA            reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    LPAREN          reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)
    SCOLO           reduce using rule 78 (exp_lv2 -> exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2 .)


state 291

    (136) np_quad_c2 -> empty .

    LESST           reduce using rule 136 (np_quad_c2 -> empty .)
    MORET           reduce using rule 136 (np_quad_c2 -> empty .)
    LESSEQUAL       reduce using rule 136 (np_quad_c2 -> empty .)
    MOREEQUAL       reduce using rule 136 (np_quad_c2 -> empty .)
    EQUALTO         reduce using rule 136 (np_quad_c2 -> empty .)
    NOTEQUALTO      reduce using rule 136 (np_quad_c2 -> empty .)
    AND             reduce using rule 136 (np_quad_c2 -> empty .)
    OR              reduce using rule 136 (np_quad_c2 -> empty .)
    RPAREN          reduce using rule 136 (np_quad_c2 -> empty .)
    COMA            reduce using rule 136 (np_quad_c2 -> empty .)
    LPAREN          reduce using rule 136 (np_quad_c2 -> empty .)
    SCOLO           reduce using rule 136 (np_quad_c2 -> empty .)


state 292

    (79) exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .

    LESST           reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    MORET           reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    LESSEQUAL       reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    MOREEQUAL       reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    EQUALTO         reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    NOTEQUALTO      reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    AND             reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    OR              reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    RPAREN          reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    COMA            reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    LPAREN          reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)
    SCOLO           reduce using rule 79 (exp_lv2 -> exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2 .)


state 293

    (81) exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .

    SUMA            reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    SUB             reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    LESST           reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    MORET           reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    LESSEQUAL       reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    MOREEQUAL       reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    EQUALTO         reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    NOTEQUALTO      reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    AND             reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    OR              reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    RPAREN          reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    COMA            reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    LPAREN          reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)
    SCOLO           reduce using rule 81 (exp_lv3 -> exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3 .)


state 294

    (137) np_quad_c3 -> empty .

    SUMA            reduce using rule 137 (np_quad_c3 -> empty .)
    SUB             reduce using rule 137 (np_quad_c3 -> empty .)
    LESST           reduce using rule 137 (np_quad_c3 -> empty .)
    MORET           reduce using rule 137 (np_quad_c3 -> empty .)
    LESSEQUAL       reduce using rule 137 (np_quad_c3 -> empty .)
    MOREEQUAL       reduce using rule 137 (np_quad_c3 -> empty .)
    EQUALTO         reduce using rule 137 (np_quad_c3 -> empty .)
    NOTEQUALTO      reduce using rule 137 (np_quad_c3 -> empty .)
    AND             reduce using rule 137 (np_quad_c3 -> empty .)
    OR              reduce using rule 137 (np_quad_c3 -> empty .)
    RPAREN          reduce using rule 137 (np_quad_c3 -> empty .)
    COMA            reduce using rule 137 (np_quad_c3 -> empty .)
    LPAREN          reduce using rule 137 (np_quad_c3 -> empty .)
    SCOLO           reduce using rule 137 (np_quad_c3 -> empty .)


state 295

    (82) exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .

    SUMA            reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    SUB             reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    LESST           reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    MORET           reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    LESSEQUAL       reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    MOREEQUAL       reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    EQUALTO         reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    NOTEQUALTO      reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    AND             reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    OR              reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    RPAREN          reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    COMA            reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    LPAREN          reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)
    SCOLO           reduce using rule 82 (exp_lv3 -> exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3 .)


state 296

    (83) exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .

    SUMA            reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    SUB             reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    LESST           reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    MORET           reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    LESSEQUAL       reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    MOREEQUAL       reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    EQUALTO         reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    NOTEQUALTO      reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    AND             reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    OR              reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    RPAREN          reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    COMA            reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    LPAREN          reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)
    SCOLO           reduce using rule 83 (exp_lv3 -> exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3 .)


state 297

    (91) array_access -> LCORCH arrary_access_1 RCORCH . arrary_access_2
    (94) arrary_access_2 -> . LCORCH arrary_access_1 RCORCH arrary_access_2
    (95) arrary_access_2 -> . empty
    (160) empty -> .

    LCORCH          shift and go to state 310
    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    arrary_access_2                shift and go to state 311
    empty                          shift and go to state 312

state 298

    (112) method_v -> ID .

    COMA            reduce using rule 112 (method_v -> ID .)
    RPAREN          reduce using rule 112 (method_v -> ID .)


state 299

    (101) method -> ID DOT method_t LPAREN method_1 . RPAREN

    RPAREN          shift and go to state 313


state 300

    (102) method_1 -> method_1_1 .

    RPAREN          reduce using rule 102 (method_1 -> method_1_1 .)


state 301

    (103) method_1 -> empty .

    RPAREN          reduce using rule 103 (method_1 -> empty .)


state 302

    (104) method_1_1 -> method_v .
    (105) method_1_1 -> method_v . COMA method_1_1

    RPAREN          reduce using rule 104 (method_1_1 -> method_v .)
    COMA            shift and go to state 314


state 303

    (113) method_v -> LBRACK . ID COMA ID RBRACK

    ID              shift and go to state 315


state 304

    (56) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK . statutes RBRACK np_statutes_b3
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes                       shift and go to state 316
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 305

    (57) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN . expression RPAREN SCOLO np_statutes_c2
    (66) expression -> . exp_lv1
    (67) expression -> . exp_lv1 AND np_quad_b expression np_quad_c0
    (68) expression -> . exp_lv1 OR np_quad_b expression np_quad_c0
    (69) exp_lv1 -> . exp_lv2 exp_lv1_1
    (77) exp_lv2 -> . exp_lv3
    (78) exp_lv2 -> . exp_lv3 SUMA np_quad_b exp_lv2 np_quad_c2
    (79) exp_lv2 -> . exp_lv3 SUB np_quad_b exp_lv2 np_quad_c2
    (80) exp_lv3 -> . exp_lv4
    (81) exp_lv3 -> . exp_lv4 MUL np_quad_b exp_lv3 np_quad_c3
    (82) exp_lv3 -> . exp_lv4 DIV np_quad_b exp_lv3 np_quad_c3
    (83) exp_lv3 -> . exp_lv4 RESD np_quad_b exp_lv3 np_quad_c3
    (84) exp_lv4 -> . exp_lv5
    (85) exp_lv4 -> . NOT np_quad_b exp_lv5 np_quad_c4
    (86) exp_lv5 -> . RPAREN expression LPAREN
    (87) exp_lv5 -> . var_cte
    (88) exp_lv5 -> . method
    (89) exp_lv5 -> . ID np_quad_a2
    (90) exp_lv5 -> . ID np_quad_a2 array_access
    (96) var_cte -> . CTE_INT np_quad_a1_int
    (97) var_cte -> . CTE_FLO np_quad_a1_flt
    (98) var_cte -> . CTE_BOO np_quad_a1_bol
    (99) var_cte -> . CTE_STRING np_quad_a1_str
    (100) var_cte -> . CTE_CHAR np_quad_a1_chr
    (101) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 141
    RPAREN          shift and go to state 135
    ID              shift and go to state 144
    CTE_INT         shift and go to state 145
    CTE_FLO         shift and go to state 146
    CTE_BOO         shift and go to state 147
    CTE_STRING      shift and go to state 148
    CTE_CHAR        shift and go to state 149

    expression                     shift and go to state 317
    exp_lv1                        shift and go to state 136
    exp_lv2                        shift and go to state 137
    exp_lv3                        shift and go to state 138
    exp_lv4                        shift and go to state 139
    exp_lv5                        shift and go to state 140
    var_cte                        shift and go to state 142
    method                         shift and go to state 143

state 306

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 . SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4

    SCOLO           shift and go to state 318


state 307

    (150) np_statutes_d2 -> empty .

    SCOLO           reduce using rule 150 (np_statutes_d2 -> empty .)


state 308

    (59) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes                       shift and go to state 319
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 309

    (49) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK . condition_1 np_statutes_a3
    (50) condition_1 -> . ELSE np_statutes_a2 LBRACK statutes RBRACK
    (51) condition_1 -> . empty
    (160) empty -> .

    ELSE            shift and go to state 321
    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    condition_1                    shift and go to state 320
    empty                          shift and go to state 322

state 310

    (94) arrary_access_2 -> LCORCH . arrary_access_1 RCORCH arrary_access_2
    (92) arrary_access_1 -> . CTE_INT
    (93) arrary_access_1 -> . ID

    CTE_INT         shift and go to state 267
    ID              shift and go to state 268

    arrary_access_1                shift and go to state 323

state 311

    (91) array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .

    MUL             reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DIV             reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RESD            reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUMA            reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUB             reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESST           reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MORET           reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESSEQUAL       reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MOREEQUAL       reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    EQUALTO         reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    NOTEQUALTO      reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    AND             reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    OR              reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RPAREN          reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    COMA            reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LPAREN          reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SCOLO           reduce using rule 91 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)


state 312

    (95) arrary_access_2 -> empty .

    MUL             reduce using rule 95 (arrary_access_2 -> empty .)
    DIV             reduce using rule 95 (arrary_access_2 -> empty .)
    RESD            reduce using rule 95 (arrary_access_2 -> empty .)
    SUMA            reduce using rule 95 (arrary_access_2 -> empty .)
    SUB             reduce using rule 95 (arrary_access_2 -> empty .)
    LESST           reduce using rule 95 (arrary_access_2 -> empty .)
    MORET           reduce using rule 95 (arrary_access_2 -> empty .)
    LESSEQUAL       reduce using rule 95 (arrary_access_2 -> empty .)
    MOREEQUAL       reduce using rule 95 (arrary_access_2 -> empty .)
    EQUALTO         reduce using rule 95 (arrary_access_2 -> empty .)
    NOTEQUALTO      reduce using rule 95 (arrary_access_2 -> empty .)
    AND             reduce using rule 95 (arrary_access_2 -> empty .)
    OR              reduce using rule 95 (arrary_access_2 -> empty .)
    RPAREN          reduce using rule 95 (arrary_access_2 -> empty .)
    COMA            reduce using rule 95 (arrary_access_2 -> empty .)
    LPAREN          reduce using rule 95 (arrary_access_2 -> empty .)
    SCOLO           reduce using rule 95 (arrary_access_2 -> empty .)


state 313

    (101) method -> ID DOT method_t LPAREN method_1 RPAREN .

    MUL             reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    DIV             reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    RESD            reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SUMA            reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SUB             reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LESST           reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    MORET           reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LESSEQUAL       reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    MOREEQUAL       reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    EQUALTO         reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    NOTEQUALTO      reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    AND             reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    OR              reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    RPAREN          reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    COMA            reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LPAREN          reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SCOLO           reduce using rule 101 (method -> ID DOT method_t LPAREN method_1 RPAREN .)


state 314

    (105) method_1_1 -> method_v COMA . method_1_1
    (104) method_1_1 -> . method_v
    (105) method_1_1 -> . method_v COMA method_1_1
    (112) method_v -> . ID
    (113) method_v -> . LBRACK ID COMA ID RBRACK

    ID              shift and go to state 298
    LBRACK          shift and go to state 303

    method_v                       shift and go to state 302
    method_1_1                     shift and go to state 324

state 315

    (113) method_v -> LBRACK ID . COMA ID RBRACK

    COMA            shift and go to state 325


state 316

    (56) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes . RBRACK np_statutes_b3

    RBRACK          shift and go to state 326


state 317

    (57) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression . RPAREN SCOLO np_statutes_c2

    RPAREN          shift and go to state 327


state 318

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO . assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO

    ID              shift and go to state 328

    assignation                    shift and go to state 329

state 319

    (59) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 330


state 320

    (49) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 . np_statutes_a3
    (143) np_statutes_a3 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    np_statutes_a3                 shift and go to state 331
    empty                          shift and go to state 332

state 321

    (50) condition_1 -> ELSE . np_statutes_a2 LBRACK statutes RBRACK
    (142) np_statutes_a2 -> . empty
    (160) empty -> .

    LBRACK          reduce using rule 160 (empty -> .)

    np_statutes_a2                 shift and go to state 333
    empty                          shift and go to state 334

state 322

    (51) condition_1 -> empty .

    ID              reduce using rule 51 (condition_1 -> empty .)
    PRINT           reduce using rule 51 (condition_1 -> empty .)
    IF              reduce using rule 51 (condition_1 -> empty .)
    WHILE           reduce using rule 51 (condition_1 -> empty .)
    DO              reduce using rule 51 (condition_1 -> empty .)
    FOR             reduce using rule 51 (condition_1 -> empty .)
    RBRACK          reduce using rule 51 (condition_1 -> empty .)


state 323

    (94) arrary_access_2 -> LCORCH arrary_access_1 . RCORCH arrary_access_2

    RCORCH          shift and go to state 335


state 324

    (105) method_1_1 -> method_v COMA method_1_1 .

    RPAREN          reduce using rule 105 (method_1_1 -> method_v COMA method_1_1 .)


state 325

    (113) method_v -> LBRACK ID COMA . ID RBRACK

    ID              shift and go to state 336


state 326

    (56) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK . np_statutes_b3
    (146) np_statutes_b3 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    np_statutes_b3                 shift and go to state 337
    empty                          shift and go to state 338

state 327

    (57) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN . SCOLO np_statutes_c2

    SCOLO           shift and go to state 339


state 328

    (45) assignation -> ID . np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (132) np_quad_a2 -> . empty
    (160) empty -> .

    EQL             reduce using rule 160 (empty -> .)

    np_quad_a2                     shift and go to state 115
    empty                          shift and go to state 185

state 329

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation . np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (151) np_statutes_d3 -> . empty
    (160) empty -> .

    RPAREN          reduce using rule 160 (empty -> .)

    np_statutes_d3                 shift and go to state 340
    empty                          shift and go to state 341

state 330

    (59) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 59 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 59 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 59 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 59 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 59 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 59 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 59 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)


state 331

    (49) condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .

    ID              reduce using rule 49 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    PRINT           reduce using rule 49 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    IF              reduce using rule 49 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    WHILE           reduce using rule 49 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    DO              reduce using rule 49 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    FOR             reduce using rule 49 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)
    RBRACK          reduce using rule 49 (condition -> IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3 .)


state 332

    (143) np_statutes_a3 -> empty .

    ID              reduce using rule 143 (np_statutes_a3 -> empty .)
    PRINT           reduce using rule 143 (np_statutes_a3 -> empty .)
    IF              reduce using rule 143 (np_statutes_a3 -> empty .)
    WHILE           reduce using rule 143 (np_statutes_a3 -> empty .)
    DO              reduce using rule 143 (np_statutes_a3 -> empty .)
    FOR             reduce using rule 143 (np_statutes_a3 -> empty .)
    RBRACK          reduce using rule 143 (np_statutes_a3 -> empty .)


state 333

    (50) condition_1 -> ELSE np_statutes_a2 . LBRACK statutes RBRACK

    LBRACK          shift and go to state 342


state 334

    (142) np_statutes_a2 -> empty .

    LBRACK          reduce using rule 142 (np_statutes_a2 -> empty .)


state 335

    (94) arrary_access_2 -> LCORCH arrary_access_1 RCORCH . arrary_access_2
    (94) arrary_access_2 -> . LCORCH arrary_access_1 RCORCH arrary_access_2
    (95) arrary_access_2 -> . empty
    (160) empty -> .

    LCORCH          shift and go to state 310
    MUL             reduce using rule 160 (empty -> .)
    DIV             reduce using rule 160 (empty -> .)
    RESD            reduce using rule 160 (empty -> .)
    SUMA            reduce using rule 160 (empty -> .)
    SUB             reduce using rule 160 (empty -> .)
    LESST           reduce using rule 160 (empty -> .)
    MORET           reduce using rule 160 (empty -> .)
    LESSEQUAL       reduce using rule 160 (empty -> .)
    MOREEQUAL       reduce using rule 160 (empty -> .)
    EQUALTO         reduce using rule 160 (empty -> .)
    NOTEQUALTO      reduce using rule 160 (empty -> .)
    AND             reduce using rule 160 (empty -> .)
    OR              reduce using rule 160 (empty -> .)
    RPAREN          reduce using rule 160 (empty -> .)
    COMA            reduce using rule 160 (empty -> .)
    LPAREN          reduce using rule 160 (empty -> .)
    SCOLO           reduce using rule 160 (empty -> .)

    arrary_access_2                shift and go to state 343
    empty                          shift and go to state 312

state 336

    (113) method_v -> LBRACK ID COMA ID . RBRACK

    RBRACK          shift and go to state 344


state 337

    (56) c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .

    ID              reduce using rule 56 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    PRINT           reduce using rule 56 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    IF              reduce using rule 56 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    WHILE           reduce using rule 56 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    DO              reduce using rule 56 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    FOR             reduce using rule 56 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)
    RBRACK          reduce using rule 56 (c_while -> WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3 .)


state 338

    (146) np_statutes_b3 -> empty .

    ID              reduce using rule 146 (np_statutes_b3 -> empty .)
    PRINT           reduce using rule 146 (np_statutes_b3 -> empty .)
    IF              reduce using rule 146 (np_statutes_b3 -> empty .)
    WHILE           reduce using rule 146 (np_statutes_b3 -> empty .)
    DO              reduce using rule 146 (np_statutes_b3 -> empty .)
    FOR             reduce using rule 146 (np_statutes_b3 -> empty .)
    RBRACK          reduce using rule 146 (np_statutes_b3 -> empty .)


state 339

    (57) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO . np_statutes_c2
    (148) np_statutes_c2 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    np_statutes_c2                 shift and go to state 345
    empty                          shift and go to state 346

state 340

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 . RPAREN LBRACK statutes RBRACK np_statutes_d4

    RPAREN          shift and go to state 347


state 341

    (151) np_statutes_d3 -> empty .

    RPAREN          reduce using rule 151 (np_statutes_d3 -> empty .)


state 342

    (50) condition_1 -> ELSE np_statutes_a2 LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    statutes                       shift and go to state 348
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    assignation                    shift and go to state 94
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 343

    (94) arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .

    MUL             reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DIV             reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RESD            reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUMA            reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUB             reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESST           reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MORET           reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESSEQUAL       reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MOREEQUAL       reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    EQUALTO         reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    NOTEQUALTO      reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    AND             reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    OR              reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RPAREN          reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    COMA            reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LPAREN          reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SCOLO           reduce using rule 94 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)


state 344

    (113) method_v -> LBRACK ID COMA ID RBRACK .

    COMA            reduce using rule 113 (method_v -> LBRACK ID COMA ID RBRACK .)
    RPAREN          reduce using rule 113 (method_v -> LBRACK ID COMA ID RBRACK .)


state 345

    (57) c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .

    ID              reduce using rule 57 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    PRINT           reduce using rule 57 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    IF              reduce using rule 57 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    WHILE           reduce using rule 57 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    DO              reduce using rule 57 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    FOR             reduce using rule 57 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)
    RBRACK          reduce using rule 57 (c_do -> DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2 .)


state 346

    (148) np_statutes_c2 -> empty .

    ID              reduce using rule 148 (np_statutes_c2 -> empty .)
    PRINT           reduce using rule 148 (np_statutes_c2 -> empty .)
    IF              reduce using rule 148 (np_statutes_c2 -> empty .)
    WHILE           reduce using rule 148 (np_statutes_c2 -> empty .)
    DO              reduce using rule 148 (np_statutes_c2 -> empty .)
    FOR             reduce using rule 148 (np_statutes_c2 -> empty .)
    RBRACK          reduce using rule 148 (np_statutes_c2 -> empty .)


state 347

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN . LBRACK statutes RBRACK np_statutes_d4

    LBRACK          shift and go to state 349


state 348

    (50) condition_1 -> ELSE np_statutes_a2 LBRACK statutes . RBRACK

    RBRACK          shift and go to state 350


state 349

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK . statutes RBRACK np_statutes_d4
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (160) empty -> .
    (45) assignation -> . ID np_quad_a2 EQL np_quad_b expression np_quad_assign SCOLO
    (46) writing -> . PRINT np_quad_b LPAREN writing_1 RPAREN np_quad_print SCOLO
    (49) condition -> . IF LPAREN expression np_statutes_a1 RPAREN LBRACK statutes RBRACK condition_1 np_statutes_a3
    (52) cycle -> . c_while
    (53) cycle -> . c_do
    (54) cycle -> . c_for
    (55) cycle -> . c_forin
    (60) function_call -> . ID np_era LPAREN function_call_2 RPAREN np_gosub SCOLO
    (61) function_call -> . ID np_era LPAREN RPAREN np_gosub SCOLO
    (56) c_while -> . WHILE np_statutes_b1 LPAREN expression RPAREN np_statutes_b2 LBRACK statutes RBRACK np_statutes_b3
    (57) c_do -> . DO np_statutes_c1 LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO np_statutes_c2
    (58) c_for -> . FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4
    (59) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 160 (empty -> .)
    ID              shift and go to state 99
    PRINT           shift and go to state 100
    IF              shift and go to state 101
    WHILE           shift and go to state 106
    DO              shift and go to state 107
    FOR             shift and go to state 108

    assignation                    shift and go to state 94
    statutes                       shift and go to state 351
    statutes_1                     shift and go to state 92
    empty                          shift and go to state 93
    writing                        shift and go to state 95
    condition                      shift and go to state 96
    cycle                          shift and go to state 97
    function_call                  shift and go to state 98
    c_while                        shift and go to state 102
    c_do                           shift and go to state 103
    c_for                          shift and go to state 104
    c_forin                        shift and go to state 105

state 350

    (50) condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .

    ID              reduce using rule 50 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    PRINT           reduce using rule 50 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    IF              reduce using rule 50 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    WHILE           reduce using rule 50 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    DO              reduce using rule 50 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    FOR             reduce using rule 50 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 50 (condition_1 -> ELSE np_statutes_a2 LBRACK statutes RBRACK .)


state 351

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes . RBRACK np_statutes_d4

    RBRACK          shift and go to state 352


state 352

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK . np_statutes_d4
    (152) np_statutes_d4 -> . empty
    (160) empty -> .

    ID              reduce using rule 160 (empty -> .)
    PRINT           reduce using rule 160 (empty -> .)
    IF              reduce using rule 160 (empty -> .)
    WHILE           reduce using rule 160 (empty -> .)
    DO              reduce using rule 160 (empty -> .)
    FOR             reduce using rule 160 (empty -> .)
    RBRACK          reduce using rule 160 (empty -> .)

    np_statutes_d4                 shift and go to state 353
    empty                          shift and go to state 354

state 353

    (58) c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .

    ID              reduce using rule 58 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    PRINT           reduce using rule 58 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    IF              reduce using rule 58 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    WHILE           reduce using rule 58 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    DO              reduce using rule 58 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    FOR             reduce using rule 58 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)
    RBRACK          reduce using rule 58 (c_for -> FOR LPAREN ID SCOLO np_statutes_d1 expression np_statutes_d2 SCOLO assignation np_statutes_d3 RPAREN LBRACK statutes RBRACK np_statutes_d4 .)


state 354

    (152) np_statutes_d4 -> empty .

    ID              reduce using rule 152 (np_statutes_d4 -> empty .)
    PRINT           reduce using rule 152 (np_statutes_d4 -> empty .)
    IF              reduce using rule 152 (np_statutes_d4 -> empty .)
    WHILE           reduce using rule 152 (np_statutes_d4 -> empty .)
    DO              reduce using rule 152 (np_statutes_d4 -> empty .)
    FOR             reduce using rule 152 (np_statutes_d4 -> empty .)
    RBRACK          reduce using rule 152 (np_statutes_d4 -> empty .)

