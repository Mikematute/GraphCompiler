Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SCOLO vars function body
Rule 2     vars -> VAR type vars_1 SCOLO vars
Rule 3     vars -> empty
Rule 4     vars_1 -> ID vars_2
Rule 5     vars_1 -> ID vars_2 COMA vars_1
Rule 6     vars_2 -> array_declare
Rule 7     vars_2 -> empty
Rule 8     function -> function_t ID LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
Rule 9     function -> empty
Rule 10    function_t -> VOID
Rule 11    function_t -> t_number
Rule 12    function_t -> t_string
Rule 13    function_t -> t_bool
Rule 14    function_t -> t_graph
Rule 15    function_v -> function_v1
Rule 16    function_v -> empty
Rule 17    function_v1 -> type ID
Rule 18    function_v1 -> type ID COMA function_v1
Rule 19    function_v1 -> type ID array_declare
Rule 20    function_v1 -> type ID array_declare COMA function_v1
Rule 21    body -> MAIN LPAREN RPAREN LBRACK vars statutes RBRACK
Rule 22    type -> t_number
Rule 23    type -> t_string
Rule 24    type -> t_bool
Rule 25    type -> t_graph
Rule 26    t_number -> INT
Rule 27    t_number -> FLOAT
Rule 28    t_string -> STRING
Rule 29    t_string -> CHAR
Rule 30    t_bool -> BOOL
Rule 31    t_graph -> NODE
Rule 32    t_graph -> ARC
Rule 33    t_graph -> UNDIRECTED
Rule 34    t_graph -> DIRECTED
Rule 35    array_declare -> LCORCH CTE_INT RCORCH array_declare_1
Rule 36    array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1
Rule 37    array_declare_1 -> empty
Rule 38    statutes -> statutes_1 statutes
Rule 39    statutes -> empty
Rule 40    statutes_1 -> assignation
Rule 41    statutes_1 -> writing
Rule 42    statutes_1 -> condition
Rule 43    statutes_1 -> cycle
Rule 44    statutes_1 -> function_call
Rule 45    assignation -> ID EQL expression
Rule 46    writing -> PRINT LPAREN writing_1 RPAREN SCOLO
Rule 47    writing_1 -> expression
Rule 48    writing_1 -> CTE_STRING
Rule 49    writing_1 -> writing_2
Rule 50    writing_2 -> expression SUMA writing_1
Rule 51    writing_2 -> CTE_STRING SUMA writing_1
Rule 52    condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
Rule 53    condition_1 -> ELSE LBRACK expression RBRACK
Rule 54    condition_1 -> empty
Rule 55    cycle -> c_while
Rule 56    cycle -> c_do
Rule 57    cycle -> c_for
Rule 58    cycle -> c_forin
Rule 59    c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
Rule 60    c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
Rule 61    c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
Rule 62    c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK
Rule 63    function_call -> ID LPAREN function_call_1 RPAREN SCOLO
Rule 64    function_call_1 -> function_call_2
Rule 65    function_call_1 -> empty
Rule 66    function_call_2 -> expression
Rule 67    function_call_2 -> ID
Rule 68    function_call_2 -> expression SCOLO function_call_2
Rule 69    function_call_2 -> ID SCOLO function_call_2
Rule 70    expression -> exp_lv1
Rule 71    expression -> exp_lv1 AND expression
Rule 72    expression -> exp_lv1 OR expression
Rule 73    exp_lv1 -> exp_lv2 exp_lv1_1
Rule 74    exp_lv1_1 -> LESST exp_lv2
Rule 75    exp_lv1_1 -> MORET exp_lv2
Rule 76    exp_lv1_1 -> LESSEQUAL exp_lv2
Rule 77    exp_lv1_1 -> MOREEQUAL exp_lv2
Rule 78    exp_lv1_1 -> EQUALTO exp_lv2
Rule 79    exp_lv1_1 -> NOTEQUALTO exp_lv2
Rule 80    exp_lv1_1 -> empty
Rule 81    exp_lv2 -> exp_lv3
Rule 82    exp_lv2 -> exp_lv3 SUMA exp_lv2
Rule 83    exp_lv2 -> exp_lv3 SUB exp_lv2
Rule 84    exp_lv3 -> exp_lv4
Rule 85    exp_lv3 -> exp_lv4 MUL exp_lv3
Rule 86    exp_lv3 -> exp_lv4 DIV exp_lv3
Rule 87    exp_lv3 -> exp_lv4 RESD exp_lv3
Rule 88    exp_lv4 -> exp_lv5
Rule 89    exp_lv4 -> NOT exp_lv5
Rule 90    exp_lv5 -> RPAREN expression LPAREN
Rule 91    exp_lv5 -> var_cte
Rule 92    exp_lv5 -> method
Rule 93    exp_lv5 -> ID
Rule 94    exp_lv5 -> ID array_access
Rule 95    array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2
Rule 96    arrary_access_1 -> CTE_INT
Rule 97    arrary_access_1 -> ID
Rule 98    arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2
Rule 99    arrary_access_2 -> empty
Rule 100   var_cte -> CTE_INT
Rule 101   var_cte -> CTE_FLO
Rule 102   var_cte -> CTE_BOO
Rule 103   var_cte -> CTE_STRING
Rule 104   var_cte -> CTE_CHAR
Rule 105   method -> ID DOT method_t LPAREN method_1 RPAREN
Rule 106   method_1 -> method_1_1
Rule 107   method_1 -> empty
Rule 108   method_1_1 -> method_v
Rule 109   method_1_1 -> method_v COMA method_1_1
Rule 110   method_t -> DEG
Rule 111   method_t -> SHORTPATH
Rule 112   method_t -> DIAMETER
Rule 113   method_t -> ADD
Rule 114   method_t -> DELETE
Rule 115   method_t -> ARC
Rule 116   method_v -> ID
Rule 117   method_v -> LBRACK ID COMA ID RBRACK
Rule 118   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 113
AND                  : 71
ARC                  : 32 115
BOOL                 : 30
CHAR                 : 29
COLON                : 
COMA                 : 5 18 20 109 117
CTE_BOO              : 102
CTE_CHAR             : 104
CTE_FLO              : 101
CTE_INT              : 35 36 96 100
CTE_STRING           : 48 51 103
DEG                  : 110
DELETE               : 114
DIAMETER             : 112
DIRECTED             : 34
DIV                  : 86
DO                   : 60
DOT                  : 105
ELSE                 : 53
EQL                  : 45
EQUALTO              : 78
FLOAT                : 27
FOR                  : 61 62
ID                   : 1 4 5 8 17 18 19 20 45 61 62 62 63 67 69 93 94 97 105 116 117 117
IF                   : 52
IN                   : 62
INT                  : 26
LBRACK               : 8 21 52 53 59 60 61 62 117
LCORCH               : 35 36 95 98
LESSEQUAL            : 76
LESST                : 74
LPAREN               : 8 21 46 52 59 60 61 62 63 90 105
MAIN                 : 21
MOREEQUAL            : 77
MORET                : 75
MUL                  : 85
NODE                 : 31
NOT                  : 89
NOTEQUALTO           : 79
OR                   : 72
PRINT                : 46
PROGRAM              : 1
RBRACK               : 8 21 52 53 59 60 61 62 117
RCORCH               : 35 36 95 98
RESD                 : 87
RPAREN               : 8 21 46 52 59 60 61 62 63 90 105
SCOLO                : 1 2 46 52 61 61 63 68 69
SHORTPATH            : 111
STRING               : 28
SUB                  : 83
SUMA                 : 50 51 82
UNDIRECTED           : 33
VAR                  : 2
VOID                 : 10
WHILE                : 59 60
error                : 

Nonterminals, with rules where they appear

arrary_access_1      : 95 98
arrary_access_2      : 95 98
array_access         : 94
array_declare        : 6 19 20
array_declare_1      : 35 36
assignation          : 40 61
body                 : 1
c_do                 : 56
c_for                : 57
c_forin              : 58
c_while              : 55
condition            : 42
condition_1          : 52
cycle                : 43
empty                : 3 7 9 16 37 39 54 65 80 99 107
exp_lv1              : 70 71 72
exp_lv1_1            : 73
exp_lv2              : 73 74 75 76 77 78 79 82 83
exp_lv3              : 81 82 83 85 86 87
exp_lv4              : 84 85 86 87
exp_lv5              : 88 89
expression           : 45 47 50 52 53 59 60 61 66 68 71 72 90
function             : 1 8
function_call        : 44
function_call_1      : 63
function_call_2      : 64 68 69
function_t           : 8
function_v           : 8
function_v1          : 15 18 20
method               : 92
method_1             : 105
method_1_1           : 106 109
method_t             : 105
method_v             : 108 109
program              : 0
statutes             : 8 21 38 52 59 60 61 62
statutes_1           : 38
t_bool               : 13 24
t_graph              : 14 25
t_number             : 11 22
t_string             : 12 23
type                 : 2 17 18 19 20
var_cte              : 91
vars                 : 1 2 8 21
vars_1               : 2 5
vars_2               : 4 5
writing              : 41
writing_1            : 46 50 51
writing_2            : 49

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SCOLO vars function body

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SCOLO vars function body

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SCOLO vars function body

    SCOLO           shift and go to state 4


state 4

    (1) program -> PROGRAM ID SCOLO . vars function body
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (118) empty -> .

    VAR             shift and go to state 6
    VOID            reduce using rule 118 (empty -> .)
    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    CHAR            reduce using rule 118 (empty -> .)
    BOOL            reduce using rule 118 (empty -> .)
    NODE            reduce using rule 118 (empty -> .)
    ARC             reduce using rule 118 (empty -> .)
    UNDIRECTED      reduce using rule 118 (empty -> .)
    DIRECTED        reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SCOLO vars . function body
    (8) function -> . function_t ID LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
    (9) function -> . empty
    (10) function_t -> . VOID
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (118) empty -> .
    (26) t_number -> . INT
    (27) t_number -> . FLOAT
    (28) t_string -> . STRING
    (29) t_string -> . CHAR
    (30) t_bool -> . BOOL
    (31) t_graph -> . NODE
    (32) t_graph -> . ARC
    (33) t_graph -> . UNDIRECTED
    (34) t_graph -> . DIRECTED

    VOID            shift and go to state 11
    MAIN            reduce using rule 118 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NODE            shift and go to state 21
    ARC             shift and go to state 22
    UNDIRECTED      shift and go to state 23
    DIRECTED        shift and go to state 24

    function                       shift and go to state 8
    function_t                     shift and go to state 9
    empty                          shift and go to state 10
    t_number                       shift and go to state 12
    t_string                       shift and go to state 13
    t_bool                         shift and go to state 14
    t_graph                        shift and go to state 15

state 6

    (2) vars -> VAR . type vars_1 SCOLO vars
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT
    (27) t_number -> . FLOAT
    (28) t_string -> . STRING
    (29) t_string -> . CHAR
    (30) t_bool -> . BOOL
    (31) t_graph -> . NODE
    (32) t_graph -> . ARC
    (33) t_graph -> . UNDIRECTED
    (34) t_graph -> . DIRECTED

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NODE            shift and go to state 21
    ARC             shift and go to state 22
    UNDIRECTED      shift and go to state 23
    DIRECTED        shift and go to state 24

    type                           shift and go to state 25
    t_number                       shift and go to state 26
    t_string                       shift and go to state 27
    t_bool                         shift and go to state 28
    t_graph                        shift and go to state 29

state 7

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    INT             reduce using rule 3 (vars -> empty .)
    FLOAT           reduce using rule 3 (vars -> empty .)
    STRING          reduce using rule 3 (vars -> empty .)
    CHAR            reduce using rule 3 (vars -> empty .)
    BOOL            reduce using rule 3 (vars -> empty .)
    NODE            reduce using rule 3 (vars -> empty .)
    ARC             reduce using rule 3 (vars -> empty .)
    UNDIRECTED      reduce using rule 3 (vars -> empty .)
    DIRECTED        reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)
    ID              reduce using rule 3 (vars -> empty .)
    PRINT           reduce using rule 3 (vars -> empty .)
    IF              reduce using rule 3 (vars -> empty .)
    WHILE           reduce using rule 3 (vars -> empty .)
    DO              reduce using rule 3 (vars -> empty .)
    FOR             reduce using rule 3 (vars -> empty .)
    RBRACK          reduce using rule 3 (vars -> empty .)


state 8

    (1) program -> PROGRAM ID SCOLO vars function . body
    (21) body -> . MAIN LPAREN RPAREN LBRACK vars statutes RBRACK

    MAIN            shift and go to state 31

    body                           shift and go to state 30

state 9

    (8) function -> function_t . ID LPAREN function_v RPAREN LBRACK vars statutes RBRACK function

    ID              shift and go to state 32


state 10

    (9) function -> empty .

    MAIN            reduce using rule 9 (function -> empty .)


state 11

    (10) function_t -> VOID .

    ID              reduce using rule 10 (function_t -> VOID .)


state 12

    (11) function_t -> t_number .

    ID              reduce using rule 11 (function_t -> t_number .)


state 13

    (12) function_t -> t_string .

    ID              reduce using rule 12 (function_t -> t_string .)


state 14

    (13) function_t -> t_bool .

    ID              reduce using rule 13 (function_t -> t_bool .)


state 15

    (14) function_t -> t_graph .

    ID              reduce using rule 14 (function_t -> t_graph .)


state 16

    (26) t_number -> INT .

    ID              reduce using rule 26 (t_number -> INT .)


state 17

    (27) t_number -> FLOAT .

    ID              reduce using rule 27 (t_number -> FLOAT .)


state 18

    (28) t_string -> STRING .

    ID              reduce using rule 28 (t_string -> STRING .)


state 19

    (29) t_string -> CHAR .

    ID              reduce using rule 29 (t_string -> CHAR .)


state 20

    (30) t_bool -> BOOL .

    ID              reduce using rule 30 (t_bool -> BOOL .)


state 21

    (31) t_graph -> NODE .

    ID              reduce using rule 31 (t_graph -> NODE .)


state 22

    (32) t_graph -> ARC .

    ID              reduce using rule 32 (t_graph -> ARC .)


state 23

    (33) t_graph -> UNDIRECTED .

    ID              reduce using rule 33 (t_graph -> UNDIRECTED .)


state 24

    (34) t_graph -> DIRECTED .

    ID              reduce using rule 34 (t_graph -> DIRECTED .)


state 25

    (2) vars -> VAR type . vars_1 SCOLO vars
    (4) vars_1 -> . ID vars_2
    (5) vars_1 -> . ID vars_2 COMA vars_1

    ID              shift and go to state 34

    vars_1                         shift and go to state 33

state 26

    (22) type -> t_number .

    ID              reduce using rule 22 (type -> t_number .)


state 27

    (23) type -> t_string .

    ID              reduce using rule 23 (type -> t_string .)


state 28

    (24) type -> t_bool .

    ID              reduce using rule 24 (type -> t_bool .)


state 29

    (25) type -> t_graph .

    ID              reduce using rule 25 (type -> t_graph .)


state 30

    (1) program -> PROGRAM ID SCOLO vars function body .

    $end            reduce using rule 1 (program -> PROGRAM ID SCOLO vars function body .)


state 31

    (21) body -> MAIN . LPAREN RPAREN LBRACK vars statutes RBRACK

    LPAREN          shift and go to state 35


state 32

    (8) function -> function_t ID . LPAREN function_v RPAREN LBRACK vars statutes RBRACK function

    LPAREN          shift and go to state 36


state 33

    (2) vars -> VAR type vars_1 . SCOLO vars

    SCOLO           shift and go to state 37


state 34

    (4) vars_1 -> ID . vars_2
    (5) vars_1 -> ID . vars_2 COMA vars_1
    (6) vars_2 -> . array_declare
    (7) vars_2 -> . empty
    (35) array_declare -> . LCORCH CTE_INT RCORCH array_declare_1
    (118) empty -> .

    LCORCH          shift and go to state 41
    COMA            reduce using rule 118 (empty -> .)
    SCOLO           reduce using rule 118 (empty -> .)

    vars_2                         shift and go to state 38
    array_declare                  shift and go to state 39
    empty                          shift and go to state 40

state 35

    (21) body -> MAIN LPAREN . RPAREN LBRACK vars statutes RBRACK

    RPAREN          shift and go to state 42


state 36

    (8) function -> function_t ID LPAREN . function_v RPAREN LBRACK vars statutes RBRACK function
    (15) function_v -> . function_v1
    (16) function_v -> . empty
    (17) function_v1 -> . type ID
    (18) function_v1 -> . type ID COMA function_v1
    (19) function_v1 -> . type ID array_declare
    (20) function_v1 -> . type ID array_declare COMA function_v1
    (118) empty -> .
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT
    (27) t_number -> . FLOAT
    (28) t_string -> . STRING
    (29) t_string -> . CHAR
    (30) t_bool -> . BOOL
    (31) t_graph -> . NODE
    (32) t_graph -> . ARC
    (33) t_graph -> . UNDIRECTED
    (34) t_graph -> . DIRECTED

    RPAREN          reduce using rule 118 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NODE            shift and go to state 21
    ARC             shift and go to state 22
    UNDIRECTED      shift and go to state 23
    DIRECTED        shift and go to state 24

    function_v                     shift and go to state 43
    function_v1                    shift and go to state 44
    empty                          shift and go to state 45
    type                           shift and go to state 46
    t_number                       shift and go to state 26
    t_string                       shift and go to state 27
    t_bool                         shift and go to state 28
    t_graph                        shift and go to state 29

state 37

    (2) vars -> VAR type vars_1 SCOLO . vars
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (118) empty -> .

    VAR             shift and go to state 6
    VOID            reduce using rule 118 (empty -> .)
    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    CHAR            reduce using rule 118 (empty -> .)
    BOOL            reduce using rule 118 (empty -> .)
    NODE            reduce using rule 118 (empty -> .)
    ARC             reduce using rule 118 (empty -> .)
    UNDIRECTED      reduce using rule 118 (empty -> .)
    DIRECTED        reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    RBRACK          reduce using rule 118 (empty -> .)

    vars                           shift and go to state 47
    empty                          shift and go to state 7

state 38

    (4) vars_1 -> ID vars_2 .
    (5) vars_1 -> ID vars_2 . COMA vars_1

    SCOLO           reduce using rule 4 (vars_1 -> ID vars_2 .)
    COMA            shift and go to state 48


state 39

    (6) vars_2 -> array_declare .

    COMA            reduce using rule 6 (vars_2 -> array_declare .)
    SCOLO           reduce using rule 6 (vars_2 -> array_declare .)


state 40

    (7) vars_2 -> empty .

    COMA            reduce using rule 7 (vars_2 -> empty .)
    SCOLO           reduce using rule 7 (vars_2 -> empty .)


state 41

    (35) array_declare -> LCORCH . CTE_INT RCORCH array_declare_1

    CTE_INT         shift and go to state 49


state 42

    (21) body -> MAIN LPAREN RPAREN . LBRACK vars statutes RBRACK

    LBRACK          shift and go to state 50


state 43

    (8) function -> function_t ID LPAREN function_v . RPAREN LBRACK vars statutes RBRACK function

    RPAREN          shift and go to state 51


state 44

    (15) function_v -> function_v1 .

    RPAREN          reduce using rule 15 (function_v -> function_v1 .)


state 45

    (16) function_v -> empty .

    RPAREN          reduce using rule 16 (function_v -> empty .)


state 46

    (17) function_v1 -> type . ID
    (18) function_v1 -> type . ID COMA function_v1
    (19) function_v1 -> type . ID array_declare
    (20) function_v1 -> type . ID array_declare COMA function_v1

    ID              shift and go to state 52


state 47

    (2) vars -> VAR type vars_1 SCOLO vars .

    VOID            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    INT             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FLOAT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    STRING          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    CHAR            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    BOOL            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    NODE            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ARC             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    UNDIRECTED      reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DIRECTED        reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    MAIN            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ID              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    PRINT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    IF              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    WHILE           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DO              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FOR             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    RBRACK          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)


state 48

    (5) vars_1 -> ID vars_2 COMA . vars_1
    (4) vars_1 -> . ID vars_2
    (5) vars_1 -> . ID vars_2 COMA vars_1

    ID              shift and go to state 34

    vars_1                         shift and go to state 53

state 49

    (35) array_declare -> LCORCH CTE_INT . RCORCH array_declare_1

    RCORCH          shift and go to state 54


state 50

    (21) body -> MAIN LPAREN RPAREN LBRACK . vars statutes RBRACK
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (118) empty -> .

    VAR             shift and go to state 6
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    RBRACK          reduce using rule 118 (empty -> .)

    vars                           shift and go to state 55
    empty                          shift and go to state 7

state 51

    (8) function -> function_t ID LPAREN function_v RPAREN . LBRACK vars statutes RBRACK function

    LBRACK          shift and go to state 56


state 52

    (17) function_v1 -> type ID .
    (18) function_v1 -> type ID . COMA function_v1
    (19) function_v1 -> type ID . array_declare
    (20) function_v1 -> type ID . array_declare COMA function_v1
    (35) array_declare -> . LCORCH CTE_INT RCORCH array_declare_1

    RPAREN          reduce using rule 17 (function_v1 -> type ID .)
    COMA            shift and go to state 57
    LCORCH          shift and go to state 41

    array_declare                  shift and go to state 58

state 53

    (5) vars_1 -> ID vars_2 COMA vars_1 .

    SCOLO           reduce using rule 5 (vars_1 -> ID vars_2 COMA vars_1 .)


state 54

    (35) array_declare -> LCORCH CTE_INT RCORCH . array_declare_1
    (36) array_declare_1 -> . LCORCH CTE_INT RCORCH array_declare_1
    (37) array_declare_1 -> . empty
    (118) empty -> .

    LCORCH          shift and go to state 59
    COMA            reduce using rule 118 (empty -> .)
    SCOLO           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)

    array_declare_1                shift and go to state 60
    empty                          shift and go to state 61

state 55

    (21) body -> MAIN LPAREN RPAREN LBRACK vars . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    statutes                       shift and go to state 62
    statutes_1                     shift and go to state 63
    empty                          shift and go to state 64
    assignation                    shift and go to state 65
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 56

    (8) function -> function_t ID LPAREN function_v RPAREN LBRACK . vars statutes RBRACK function
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (118) empty -> .

    VAR             shift and go to state 6
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    RBRACK          reduce using rule 118 (empty -> .)

    vars                           shift and go to state 80
    empty                          shift and go to state 7

state 57

    (18) function_v1 -> type ID COMA . function_v1
    (17) function_v1 -> . type ID
    (18) function_v1 -> . type ID COMA function_v1
    (19) function_v1 -> . type ID array_declare
    (20) function_v1 -> . type ID array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT
    (27) t_number -> . FLOAT
    (28) t_string -> . STRING
    (29) t_string -> . CHAR
    (30) t_bool -> . BOOL
    (31) t_graph -> . NODE
    (32) t_graph -> . ARC
    (33) t_graph -> . UNDIRECTED
    (34) t_graph -> . DIRECTED

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NODE            shift and go to state 21
    ARC             shift and go to state 22
    UNDIRECTED      shift and go to state 23
    DIRECTED        shift and go to state 24

    type                           shift and go to state 46
    function_v1                    shift and go to state 81
    t_number                       shift and go to state 26
    t_string                       shift and go to state 27
    t_bool                         shift and go to state 28
    t_graph                        shift and go to state 29

state 58

    (19) function_v1 -> type ID array_declare .
    (20) function_v1 -> type ID array_declare . COMA function_v1

    RPAREN          reduce using rule 19 (function_v1 -> type ID array_declare .)
    COMA            shift and go to state 82


state 59

    (36) array_declare_1 -> LCORCH . CTE_INT RCORCH array_declare_1

    CTE_INT         shift and go to state 83


state 60

    (35) array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .

    COMA            reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)
    SCOLO           reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)
    RPAREN          reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)


state 61

    (37) array_declare_1 -> empty .

    COMA            reduce using rule 37 (array_declare_1 -> empty .)
    SCOLO           reduce using rule 37 (array_declare_1 -> empty .)
    RPAREN          reduce using rule 37 (array_declare_1 -> empty .)


state 62

    (21) body -> MAIN LPAREN RPAREN LBRACK vars statutes . RBRACK

    RBRACK          shift and go to state 84


state 63

    (38) statutes -> statutes_1 . statutes
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    statutes_1                     shift and go to state 63
    statutes                       shift and go to state 85
    empty                          shift and go to state 64
    assignation                    shift and go to state 65
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 64

    (39) statutes -> empty .

    RBRACK          reduce using rule 39 (statutes -> empty .)


state 65

    (40) statutes_1 -> assignation .

    ID              reduce using rule 40 (statutes_1 -> assignation .)
    PRINT           reduce using rule 40 (statutes_1 -> assignation .)
    IF              reduce using rule 40 (statutes_1 -> assignation .)
    WHILE           reduce using rule 40 (statutes_1 -> assignation .)
    DO              reduce using rule 40 (statutes_1 -> assignation .)
    FOR             reduce using rule 40 (statutes_1 -> assignation .)
    RBRACK          reduce using rule 40 (statutes_1 -> assignation .)


state 66

    (41) statutes_1 -> writing .

    ID              reduce using rule 41 (statutes_1 -> writing .)
    PRINT           reduce using rule 41 (statutes_1 -> writing .)
    IF              reduce using rule 41 (statutes_1 -> writing .)
    WHILE           reduce using rule 41 (statutes_1 -> writing .)
    DO              reduce using rule 41 (statutes_1 -> writing .)
    FOR             reduce using rule 41 (statutes_1 -> writing .)
    RBRACK          reduce using rule 41 (statutes_1 -> writing .)


state 67

    (42) statutes_1 -> condition .

    ID              reduce using rule 42 (statutes_1 -> condition .)
    PRINT           reduce using rule 42 (statutes_1 -> condition .)
    IF              reduce using rule 42 (statutes_1 -> condition .)
    WHILE           reduce using rule 42 (statutes_1 -> condition .)
    DO              reduce using rule 42 (statutes_1 -> condition .)
    FOR             reduce using rule 42 (statutes_1 -> condition .)
    RBRACK          reduce using rule 42 (statutes_1 -> condition .)


state 68

    (43) statutes_1 -> cycle .

    ID              reduce using rule 43 (statutes_1 -> cycle .)
    PRINT           reduce using rule 43 (statutes_1 -> cycle .)
    IF              reduce using rule 43 (statutes_1 -> cycle .)
    WHILE           reduce using rule 43 (statutes_1 -> cycle .)
    DO              reduce using rule 43 (statutes_1 -> cycle .)
    FOR             reduce using rule 43 (statutes_1 -> cycle .)
    RBRACK          reduce using rule 43 (statutes_1 -> cycle .)


state 69

    (44) statutes_1 -> function_call .

    ID              reduce using rule 44 (statutes_1 -> function_call .)
    PRINT           reduce using rule 44 (statutes_1 -> function_call .)
    IF              reduce using rule 44 (statutes_1 -> function_call .)
    WHILE           reduce using rule 44 (statutes_1 -> function_call .)
    DO              reduce using rule 44 (statutes_1 -> function_call .)
    FOR             reduce using rule 44 (statutes_1 -> function_call .)
    RBRACK          reduce using rule 44 (statutes_1 -> function_call .)


state 70

    (45) assignation -> ID . EQL expression
    (63) function_call -> ID . LPAREN function_call_1 RPAREN SCOLO

    EQL             shift and go to state 86
    LPAREN          shift and go to state 87


state 71

    (46) writing -> PRINT . LPAREN writing_1 RPAREN SCOLO

    LPAREN          shift and go to state 88


state 72

    (52) condition -> IF . LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO

    LPAREN          shift and go to state 89


state 73

    (55) cycle -> c_while .

    ID              reduce using rule 55 (cycle -> c_while .)
    PRINT           reduce using rule 55 (cycle -> c_while .)
    IF              reduce using rule 55 (cycle -> c_while .)
    WHILE           reduce using rule 55 (cycle -> c_while .)
    DO              reduce using rule 55 (cycle -> c_while .)
    FOR             reduce using rule 55 (cycle -> c_while .)
    RBRACK          reduce using rule 55 (cycle -> c_while .)


state 74

    (56) cycle -> c_do .

    ID              reduce using rule 56 (cycle -> c_do .)
    PRINT           reduce using rule 56 (cycle -> c_do .)
    IF              reduce using rule 56 (cycle -> c_do .)
    WHILE           reduce using rule 56 (cycle -> c_do .)
    DO              reduce using rule 56 (cycle -> c_do .)
    FOR             reduce using rule 56 (cycle -> c_do .)
    RBRACK          reduce using rule 56 (cycle -> c_do .)


state 75

    (57) cycle -> c_for .

    ID              reduce using rule 57 (cycle -> c_for .)
    PRINT           reduce using rule 57 (cycle -> c_for .)
    IF              reduce using rule 57 (cycle -> c_for .)
    WHILE           reduce using rule 57 (cycle -> c_for .)
    DO              reduce using rule 57 (cycle -> c_for .)
    FOR             reduce using rule 57 (cycle -> c_for .)
    RBRACK          reduce using rule 57 (cycle -> c_for .)


state 76

    (58) cycle -> c_forin .

    ID              reduce using rule 58 (cycle -> c_forin .)
    PRINT           reduce using rule 58 (cycle -> c_forin .)
    IF              reduce using rule 58 (cycle -> c_forin .)
    WHILE           reduce using rule 58 (cycle -> c_forin .)
    DO              reduce using rule 58 (cycle -> c_forin .)
    FOR             reduce using rule 58 (cycle -> c_forin .)
    RBRACK          reduce using rule 58 (cycle -> c_forin .)


state 77

    (59) c_while -> WHILE . LPAREN expression RPAREN LBRACK statutes RBRACK

    LPAREN          shift and go to state 90


state 78

    (60) c_do -> DO . LBRACK statutes RBRACK WHILE LPAREN expression RPAREN

    LBRACK          shift and go to state 91


state 79

    (61) c_for -> FOR . LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> FOR . LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    LPAREN          shift and go to state 92


state 80

    (8) function -> function_t ID LPAREN function_v RPAREN LBRACK vars . statutes RBRACK function
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    statutes                       shift and go to state 93
    statutes_1                     shift and go to state 63
    empty                          shift and go to state 64
    assignation                    shift and go to state 65
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 81

    (18) function_v1 -> type ID COMA function_v1 .

    RPAREN          reduce using rule 18 (function_v1 -> type ID COMA function_v1 .)


state 82

    (20) function_v1 -> type ID array_declare COMA . function_v1
    (17) function_v1 -> . type ID
    (18) function_v1 -> . type ID COMA function_v1
    (19) function_v1 -> . type ID array_declare
    (20) function_v1 -> . type ID array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT
    (27) t_number -> . FLOAT
    (28) t_string -> . STRING
    (29) t_string -> . CHAR
    (30) t_bool -> . BOOL
    (31) t_graph -> . NODE
    (32) t_graph -> . ARC
    (33) t_graph -> . UNDIRECTED
    (34) t_graph -> . DIRECTED

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NODE            shift and go to state 21
    ARC             shift and go to state 22
    UNDIRECTED      shift and go to state 23
    DIRECTED        shift and go to state 24

    type                           shift and go to state 46
    function_v1                    shift and go to state 94
    t_number                       shift and go to state 26
    t_string                       shift and go to state 27
    t_bool                         shift and go to state 28
    t_graph                        shift and go to state 29

state 83

    (36) array_declare_1 -> LCORCH CTE_INT . RCORCH array_declare_1

    RCORCH          shift and go to state 95


state 84

    (21) body -> MAIN LPAREN RPAREN LBRACK vars statutes RBRACK .

    $end            reduce using rule 21 (body -> MAIN LPAREN RPAREN LBRACK vars statutes RBRACK .)


state 85

    (38) statutes -> statutes_1 statutes .

    RBRACK          reduce using rule 38 (statutes -> statutes_1 statutes .)


state 86

    (45) assignation -> ID EQL . expression
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 97
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 87

    (63) function_call -> ID LPAREN . function_call_1 RPAREN SCOLO
    (64) function_call_1 -> . function_call_2
    (65) function_call_1 -> . empty
    (66) function_call_2 -> . expression
    (67) function_call_2 -> . ID
    (68) function_call_2 -> . expression SCOLO function_call_2
    (69) function_call_2 -> . ID SCOLO function_call_2
    (118) empty -> .
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    ID              shift and go to state 112
    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

  ! RPAREN          [ reduce using rule 118 (empty -> .) ]

    function_call_1                shift and go to state 113
    function_call_2                shift and go to state 114
    empty                          shift and go to state 115
    expression                     shift and go to state 116
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 88

    (46) writing -> PRINT LPAREN . writing_1 RPAREN SCOLO
    (47) writing_1 -> . expression
    (48) writing_1 -> . CTE_STRING
    (49) writing_1 -> . writing_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (50) writing_2 -> . expression SUMA writing_1
    (51) writing_2 -> . CTE_STRING SUMA writing_1
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    CTE_STRING      shift and go to state 119
    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_CHAR        shift and go to state 111

    writing_1                      shift and go to state 117
    expression                     shift and go to state 118
    writing_2                      shift and go to state 120
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 89

    (52) condition -> IF LPAREN . expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 121
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 90

    (59) c_while -> WHILE LPAREN . expression RPAREN LBRACK statutes RBRACK
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 122
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 91

    (60) c_do -> DO LBRACK . statutes RBRACK WHILE LPAREN expression RPAREN
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    statutes                       shift and go to state 123
    statutes_1                     shift and go to state 63
    empty                          shift and go to state 64
    assignation                    shift and go to state 65
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 92

    (61) c_for -> FOR LPAREN . ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> FOR LPAREN . ID IN ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 124


state 93

    (8) function -> function_t ID LPAREN function_v RPAREN LBRACK vars statutes . RBRACK function

    RBRACK          shift and go to state 125


state 94

    (20) function_v1 -> type ID array_declare COMA function_v1 .

    RPAREN          reduce using rule 20 (function_v1 -> type ID array_declare COMA function_v1 .)


state 95

    (36) array_declare_1 -> LCORCH CTE_INT RCORCH . array_declare_1
    (36) array_declare_1 -> . LCORCH CTE_INT RCORCH array_declare_1
    (37) array_declare_1 -> . empty
    (118) empty -> .

    LCORCH          shift and go to state 59
    COMA            reduce using rule 118 (empty -> .)
    SCOLO           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)

    array_declare_1                shift and go to state 126
    empty                          shift and go to state 61

state 96

    (93) exp_lv5 -> ID .
    (94) exp_lv5 -> ID . array_access
    (105) method -> ID . DOT method_t LPAREN method_1 RPAREN
    (95) array_access -> . LCORCH arrary_access_1 RCORCH arrary_access_2

    MUL             reduce using rule 93 (exp_lv5 -> ID .)
    DIV             reduce using rule 93 (exp_lv5 -> ID .)
    RESD            reduce using rule 93 (exp_lv5 -> ID .)
    SUMA            reduce using rule 93 (exp_lv5 -> ID .)
    SUB             reduce using rule 93 (exp_lv5 -> ID .)
    LESST           reduce using rule 93 (exp_lv5 -> ID .)
    MORET           reduce using rule 93 (exp_lv5 -> ID .)
    LESSEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    MOREEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    EQUALTO         reduce using rule 93 (exp_lv5 -> ID .)
    NOTEQUALTO      reduce using rule 93 (exp_lv5 -> ID .)
    AND             reduce using rule 93 (exp_lv5 -> ID .)
    OR              reduce using rule 93 (exp_lv5 -> ID .)
    ID              reduce using rule 93 (exp_lv5 -> ID .)
    PRINT           reduce using rule 93 (exp_lv5 -> ID .)
    IF              reduce using rule 93 (exp_lv5 -> ID .)
    WHILE           reduce using rule 93 (exp_lv5 -> ID .)
    DO              reduce using rule 93 (exp_lv5 -> ID .)
    FOR             reduce using rule 93 (exp_lv5 -> ID .)
    RBRACK          reduce using rule 93 (exp_lv5 -> ID .)
    RPAREN          reduce using rule 93 (exp_lv5 -> ID .)
    SCOLO           reduce using rule 93 (exp_lv5 -> ID .)
    LPAREN          reduce using rule 93 (exp_lv5 -> ID .)
    DOT             shift and go to state 128
    LCORCH          shift and go to state 129

    array_access                   shift and go to state 127

state 97

    (45) assignation -> ID EQL expression .

    ID              reduce using rule 45 (assignation -> ID EQL expression .)
    PRINT           reduce using rule 45 (assignation -> ID EQL expression .)
    IF              reduce using rule 45 (assignation -> ID EQL expression .)
    WHILE           reduce using rule 45 (assignation -> ID EQL expression .)
    DO              reduce using rule 45 (assignation -> ID EQL expression .)
    FOR             reduce using rule 45 (assignation -> ID EQL expression .)
    RBRACK          reduce using rule 45 (assignation -> ID EQL expression .)
    RPAREN          reduce using rule 45 (assignation -> ID EQL expression .)


state 98

    (70) expression -> exp_lv1 .
    (71) expression -> exp_lv1 . AND expression
    (72) expression -> exp_lv1 . OR expression

    ID              reduce using rule 70 (expression -> exp_lv1 .)
    PRINT           reduce using rule 70 (expression -> exp_lv1 .)
    IF              reduce using rule 70 (expression -> exp_lv1 .)
    WHILE           reduce using rule 70 (expression -> exp_lv1 .)
    DO              reduce using rule 70 (expression -> exp_lv1 .)
    FOR             reduce using rule 70 (expression -> exp_lv1 .)
    RBRACK          reduce using rule 70 (expression -> exp_lv1 .)
    RPAREN          reduce using rule 70 (expression -> exp_lv1 .)
    SCOLO           reduce using rule 70 (expression -> exp_lv1 .)
    SUMA            reduce using rule 70 (expression -> exp_lv1 .)
    LPAREN          reduce using rule 70 (expression -> exp_lv1 .)
    AND             shift and go to state 130
    OR              shift and go to state 131


state 99

    (73) exp_lv1 -> exp_lv2 . exp_lv1_1
    (74) exp_lv1_1 -> . LESST exp_lv2
    (75) exp_lv1_1 -> . MORET exp_lv2
    (76) exp_lv1_1 -> . LESSEQUAL exp_lv2
    (77) exp_lv1_1 -> . MOREEQUAL exp_lv2
    (78) exp_lv1_1 -> . EQUALTO exp_lv2
    (79) exp_lv1_1 -> . NOTEQUALTO exp_lv2
    (80) exp_lv1_1 -> . empty
    (118) empty -> .

    LESST           shift and go to state 133
    MORET           shift and go to state 134
    LESSEQUAL       shift and go to state 135
    MOREEQUAL       shift and go to state 136
    EQUALTO         shift and go to state 137
    NOTEQUALTO      shift and go to state 138
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    RBRACK          reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    SCOLO           reduce using rule 118 (empty -> .)
    SUMA            reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)

    exp_lv1_1                      shift and go to state 132
    empty                          shift and go to state 139

state 100

    (81) exp_lv2 -> exp_lv3 .
    (82) exp_lv2 -> exp_lv3 . SUMA exp_lv2
    (83) exp_lv2 -> exp_lv3 . SUB exp_lv2

  ! shift/reduce conflict for SUMA resolved as shift
    LESST           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    MORET           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    LESSEQUAL       reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    MOREEQUAL       reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    EQUALTO         reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    NOTEQUALTO      reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    AND             reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    OR              reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    ID              reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    PRINT           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    IF              reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    WHILE           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    DO              reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    FOR             reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    RBRACK          reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    RPAREN          reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    SCOLO           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    LPAREN          reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    SUMA            shift and go to state 140
    SUB             shift and go to state 141

  ! SUMA            [ reduce using rule 81 (exp_lv2 -> exp_lv3 .) ]


state 101

    (84) exp_lv3 -> exp_lv4 .
    (85) exp_lv3 -> exp_lv4 . MUL exp_lv3
    (86) exp_lv3 -> exp_lv4 . DIV exp_lv3
    (87) exp_lv3 -> exp_lv4 . RESD exp_lv3

    SUMA            reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    SUB             reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    LESST           reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    MORET           reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    LESSEQUAL       reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    MOREEQUAL       reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    EQUALTO         reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    NOTEQUALTO      reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    AND             reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    OR              reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    ID              reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    PRINT           reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    IF              reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    WHILE           reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    DO              reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    FOR             reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    RBRACK          reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    RPAREN          reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    SCOLO           reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    LPAREN          reduce using rule 84 (exp_lv3 -> exp_lv4 .)
    MUL             shift and go to state 142
    DIV             shift and go to state 143
    RESD            shift and go to state 144


state 102

    (88) exp_lv4 -> exp_lv5 .

    MUL             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    DIV             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    RESD            reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    SUMA            reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    SUB             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    LESST           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    MORET           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    LESSEQUAL       reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    MOREEQUAL       reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    EQUALTO         reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    NOTEQUALTO      reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    AND             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    OR              reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    ID              reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    PRINT           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    IF              reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    WHILE           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    DO              reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    FOR             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    RBRACK          reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    RPAREN          reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    SCOLO           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    LPAREN          reduce using rule 88 (exp_lv4 -> exp_lv5 .)


state 103

    (89) exp_lv4 -> NOT . exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv5                        shift and go to state 145
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 104

    (90) exp_lv5 -> RPAREN . expression LPAREN
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 146
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 105

    (91) exp_lv5 -> var_cte .

    MUL             reduce using rule 91 (exp_lv5 -> var_cte .)
    DIV             reduce using rule 91 (exp_lv5 -> var_cte .)
    RESD            reduce using rule 91 (exp_lv5 -> var_cte .)
    SUMA            reduce using rule 91 (exp_lv5 -> var_cte .)
    SUB             reduce using rule 91 (exp_lv5 -> var_cte .)
    LESST           reduce using rule 91 (exp_lv5 -> var_cte .)
    MORET           reduce using rule 91 (exp_lv5 -> var_cte .)
    LESSEQUAL       reduce using rule 91 (exp_lv5 -> var_cte .)
    MOREEQUAL       reduce using rule 91 (exp_lv5 -> var_cte .)
    EQUALTO         reduce using rule 91 (exp_lv5 -> var_cte .)
    NOTEQUALTO      reduce using rule 91 (exp_lv5 -> var_cte .)
    AND             reduce using rule 91 (exp_lv5 -> var_cte .)
    OR              reduce using rule 91 (exp_lv5 -> var_cte .)
    ID              reduce using rule 91 (exp_lv5 -> var_cte .)
    PRINT           reduce using rule 91 (exp_lv5 -> var_cte .)
    IF              reduce using rule 91 (exp_lv5 -> var_cte .)
    WHILE           reduce using rule 91 (exp_lv5 -> var_cte .)
    DO              reduce using rule 91 (exp_lv5 -> var_cte .)
    FOR             reduce using rule 91 (exp_lv5 -> var_cte .)
    RBRACK          reduce using rule 91 (exp_lv5 -> var_cte .)
    RPAREN          reduce using rule 91 (exp_lv5 -> var_cte .)
    SCOLO           reduce using rule 91 (exp_lv5 -> var_cte .)
    LPAREN          reduce using rule 91 (exp_lv5 -> var_cte .)


state 106

    (92) exp_lv5 -> method .

    MUL             reduce using rule 92 (exp_lv5 -> method .)
    DIV             reduce using rule 92 (exp_lv5 -> method .)
    RESD            reduce using rule 92 (exp_lv5 -> method .)
    SUMA            reduce using rule 92 (exp_lv5 -> method .)
    SUB             reduce using rule 92 (exp_lv5 -> method .)
    LESST           reduce using rule 92 (exp_lv5 -> method .)
    MORET           reduce using rule 92 (exp_lv5 -> method .)
    LESSEQUAL       reduce using rule 92 (exp_lv5 -> method .)
    MOREEQUAL       reduce using rule 92 (exp_lv5 -> method .)
    EQUALTO         reduce using rule 92 (exp_lv5 -> method .)
    NOTEQUALTO      reduce using rule 92 (exp_lv5 -> method .)
    AND             reduce using rule 92 (exp_lv5 -> method .)
    OR              reduce using rule 92 (exp_lv5 -> method .)
    ID              reduce using rule 92 (exp_lv5 -> method .)
    PRINT           reduce using rule 92 (exp_lv5 -> method .)
    IF              reduce using rule 92 (exp_lv5 -> method .)
    WHILE           reduce using rule 92 (exp_lv5 -> method .)
    DO              reduce using rule 92 (exp_lv5 -> method .)
    FOR             reduce using rule 92 (exp_lv5 -> method .)
    RBRACK          reduce using rule 92 (exp_lv5 -> method .)
    RPAREN          reduce using rule 92 (exp_lv5 -> method .)
    SCOLO           reduce using rule 92 (exp_lv5 -> method .)
    LPAREN          reduce using rule 92 (exp_lv5 -> method .)


state 107

    (100) var_cte -> CTE_INT .

    MUL             reduce using rule 100 (var_cte -> CTE_INT .)
    DIV             reduce using rule 100 (var_cte -> CTE_INT .)
    RESD            reduce using rule 100 (var_cte -> CTE_INT .)
    SUMA            reduce using rule 100 (var_cte -> CTE_INT .)
    SUB             reduce using rule 100 (var_cte -> CTE_INT .)
    LESST           reduce using rule 100 (var_cte -> CTE_INT .)
    MORET           reduce using rule 100 (var_cte -> CTE_INT .)
    LESSEQUAL       reduce using rule 100 (var_cte -> CTE_INT .)
    MOREEQUAL       reduce using rule 100 (var_cte -> CTE_INT .)
    EQUALTO         reduce using rule 100 (var_cte -> CTE_INT .)
    NOTEQUALTO      reduce using rule 100 (var_cte -> CTE_INT .)
    AND             reduce using rule 100 (var_cte -> CTE_INT .)
    OR              reduce using rule 100 (var_cte -> CTE_INT .)
    ID              reduce using rule 100 (var_cte -> CTE_INT .)
    PRINT           reduce using rule 100 (var_cte -> CTE_INT .)
    IF              reduce using rule 100 (var_cte -> CTE_INT .)
    WHILE           reduce using rule 100 (var_cte -> CTE_INT .)
    DO              reduce using rule 100 (var_cte -> CTE_INT .)
    FOR             reduce using rule 100 (var_cte -> CTE_INT .)
    RBRACK          reduce using rule 100 (var_cte -> CTE_INT .)
    RPAREN          reduce using rule 100 (var_cte -> CTE_INT .)
    SCOLO           reduce using rule 100 (var_cte -> CTE_INT .)
    LPAREN          reduce using rule 100 (var_cte -> CTE_INT .)


state 108

    (101) var_cte -> CTE_FLO .

    MUL             reduce using rule 101 (var_cte -> CTE_FLO .)
    DIV             reduce using rule 101 (var_cte -> CTE_FLO .)
    RESD            reduce using rule 101 (var_cte -> CTE_FLO .)
    SUMA            reduce using rule 101 (var_cte -> CTE_FLO .)
    SUB             reduce using rule 101 (var_cte -> CTE_FLO .)
    LESST           reduce using rule 101 (var_cte -> CTE_FLO .)
    MORET           reduce using rule 101 (var_cte -> CTE_FLO .)
    LESSEQUAL       reduce using rule 101 (var_cte -> CTE_FLO .)
    MOREEQUAL       reduce using rule 101 (var_cte -> CTE_FLO .)
    EQUALTO         reduce using rule 101 (var_cte -> CTE_FLO .)
    NOTEQUALTO      reduce using rule 101 (var_cte -> CTE_FLO .)
    AND             reduce using rule 101 (var_cte -> CTE_FLO .)
    OR              reduce using rule 101 (var_cte -> CTE_FLO .)
    ID              reduce using rule 101 (var_cte -> CTE_FLO .)
    PRINT           reduce using rule 101 (var_cte -> CTE_FLO .)
    IF              reduce using rule 101 (var_cte -> CTE_FLO .)
    WHILE           reduce using rule 101 (var_cte -> CTE_FLO .)
    DO              reduce using rule 101 (var_cte -> CTE_FLO .)
    FOR             reduce using rule 101 (var_cte -> CTE_FLO .)
    RBRACK          reduce using rule 101 (var_cte -> CTE_FLO .)
    RPAREN          reduce using rule 101 (var_cte -> CTE_FLO .)
    SCOLO           reduce using rule 101 (var_cte -> CTE_FLO .)
    LPAREN          reduce using rule 101 (var_cte -> CTE_FLO .)


state 109

    (102) var_cte -> CTE_BOO .

    MUL             reduce using rule 102 (var_cte -> CTE_BOO .)
    DIV             reduce using rule 102 (var_cte -> CTE_BOO .)
    RESD            reduce using rule 102 (var_cte -> CTE_BOO .)
    SUMA            reduce using rule 102 (var_cte -> CTE_BOO .)
    SUB             reduce using rule 102 (var_cte -> CTE_BOO .)
    LESST           reduce using rule 102 (var_cte -> CTE_BOO .)
    MORET           reduce using rule 102 (var_cte -> CTE_BOO .)
    LESSEQUAL       reduce using rule 102 (var_cte -> CTE_BOO .)
    MOREEQUAL       reduce using rule 102 (var_cte -> CTE_BOO .)
    EQUALTO         reduce using rule 102 (var_cte -> CTE_BOO .)
    NOTEQUALTO      reduce using rule 102 (var_cte -> CTE_BOO .)
    AND             reduce using rule 102 (var_cte -> CTE_BOO .)
    OR              reduce using rule 102 (var_cte -> CTE_BOO .)
    ID              reduce using rule 102 (var_cte -> CTE_BOO .)
    PRINT           reduce using rule 102 (var_cte -> CTE_BOO .)
    IF              reduce using rule 102 (var_cte -> CTE_BOO .)
    WHILE           reduce using rule 102 (var_cte -> CTE_BOO .)
    DO              reduce using rule 102 (var_cte -> CTE_BOO .)
    FOR             reduce using rule 102 (var_cte -> CTE_BOO .)
    RBRACK          reduce using rule 102 (var_cte -> CTE_BOO .)
    RPAREN          reduce using rule 102 (var_cte -> CTE_BOO .)
    SCOLO           reduce using rule 102 (var_cte -> CTE_BOO .)
    LPAREN          reduce using rule 102 (var_cte -> CTE_BOO .)


state 110

    (103) var_cte -> CTE_STRING .

    MUL             reduce using rule 103 (var_cte -> CTE_STRING .)
    DIV             reduce using rule 103 (var_cte -> CTE_STRING .)
    RESD            reduce using rule 103 (var_cte -> CTE_STRING .)
    SUMA            reduce using rule 103 (var_cte -> CTE_STRING .)
    SUB             reduce using rule 103 (var_cte -> CTE_STRING .)
    LESST           reduce using rule 103 (var_cte -> CTE_STRING .)
    MORET           reduce using rule 103 (var_cte -> CTE_STRING .)
    LESSEQUAL       reduce using rule 103 (var_cte -> CTE_STRING .)
    MOREEQUAL       reduce using rule 103 (var_cte -> CTE_STRING .)
    EQUALTO         reduce using rule 103 (var_cte -> CTE_STRING .)
    NOTEQUALTO      reduce using rule 103 (var_cte -> CTE_STRING .)
    AND             reduce using rule 103 (var_cte -> CTE_STRING .)
    OR              reduce using rule 103 (var_cte -> CTE_STRING .)
    ID              reduce using rule 103 (var_cte -> CTE_STRING .)
    PRINT           reduce using rule 103 (var_cte -> CTE_STRING .)
    IF              reduce using rule 103 (var_cte -> CTE_STRING .)
    WHILE           reduce using rule 103 (var_cte -> CTE_STRING .)
    DO              reduce using rule 103 (var_cte -> CTE_STRING .)
    FOR             reduce using rule 103 (var_cte -> CTE_STRING .)
    RBRACK          reduce using rule 103 (var_cte -> CTE_STRING .)
    RPAREN          reduce using rule 103 (var_cte -> CTE_STRING .)
    SCOLO           reduce using rule 103 (var_cte -> CTE_STRING .)
    LPAREN          reduce using rule 103 (var_cte -> CTE_STRING .)


state 111

    (104) var_cte -> CTE_CHAR .

    MUL             reduce using rule 104 (var_cte -> CTE_CHAR .)
    DIV             reduce using rule 104 (var_cte -> CTE_CHAR .)
    RESD            reduce using rule 104 (var_cte -> CTE_CHAR .)
    SUMA            reduce using rule 104 (var_cte -> CTE_CHAR .)
    SUB             reduce using rule 104 (var_cte -> CTE_CHAR .)
    LESST           reduce using rule 104 (var_cte -> CTE_CHAR .)
    MORET           reduce using rule 104 (var_cte -> CTE_CHAR .)
    LESSEQUAL       reduce using rule 104 (var_cte -> CTE_CHAR .)
    MOREEQUAL       reduce using rule 104 (var_cte -> CTE_CHAR .)
    EQUALTO         reduce using rule 104 (var_cte -> CTE_CHAR .)
    NOTEQUALTO      reduce using rule 104 (var_cte -> CTE_CHAR .)
    AND             reduce using rule 104 (var_cte -> CTE_CHAR .)
    OR              reduce using rule 104 (var_cte -> CTE_CHAR .)
    ID              reduce using rule 104 (var_cte -> CTE_CHAR .)
    PRINT           reduce using rule 104 (var_cte -> CTE_CHAR .)
    IF              reduce using rule 104 (var_cte -> CTE_CHAR .)
    WHILE           reduce using rule 104 (var_cte -> CTE_CHAR .)
    DO              reduce using rule 104 (var_cte -> CTE_CHAR .)
    FOR             reduce using rule 104 (var_cte -> CTE_CHAR .)
    RBRACK          reduce using rule 104 (var_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 104 (var_cte -> CTE_CHAR .)
    SCOLO           reduce using rule 104 (var_cte -> CTE_CHAR .)
    LPAREN          reduce using rule 104 (var_cte -> CTE_CHAR .)


state 112

    (67) function_call_2 -> ID .
    (69) function_call_2 -> ID . SCOLO function_call_2
    (93) exp_lv5 -> ID .
    (94) exp_lv5 -> ID . array_access
    (105) method -> ID . DOT method_t LPAREN method_1 RPAREN
    (95) array_access -> . LCORCH arrary_access_1 RCORCH arrary_access_2

  ! shift/reduce conflict for SCOLO resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 67 (function_call_2 -> ID .)
    RPAREN          reduce using rule 67 (function_call_2 -> ID .)
    SCOLO           shift and go to state 147
    MUL             reduce using rule 93 (exp_lv5 -> ID .)
    DIV             reduce using rule 93 (exp_lv5 -> ID .)
    RESD            reduce using rule 93 (exp_lv5 -> ID .)
    SUMA            reduce using rule 93 (exp_lv5 -> ID .)
    SUB             reduce using rule 93 (exp_lv5 -> ID .)
    LESST           reduce using rule 93 (exp_lv5 -> ID .)
    MORET           reduce using rule 93 (exp_lv5 -> ID .)
    LESSEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    MOREEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    EQUALTO         reduce using rule 93 (exp_lv5 -> ID .)
    NOTEQUALTO      reduce using rule 93 (exp_lv5 -> ID .)
    AND             reduce using rule 93 (exp_lv5 -> ID .)
    OR              reduce using rule 93 (exp_lv5 -> ID .)
    DOT             shift and go to state 128
    LCORCH          shift and go to state 129

  ! SCOLO           [ reduce using rule 93 (exp_lv5 -> ID .) ]
  ! RPAREN          [ reduce using rule 93 (exp_lv5 -> ID .) ]

    array_access                   shift and go to state 127

state 113

    (63) function_call -> ID LPAREN function_call_1 . RPAREN SCOLO

    RPAREN          shift and go to state 148


state 114

    (64) function_call_1 -> function_call_2 .

    RPAREN          reduce using rule 64 (function_call_1 -> function_call_2 .)


state 115

    (65) function_call_1 -> empty .

    RPAREN          reduce using rule 65 (function_call_1 -> empty .)


state 116

    (66) function_call_2 -> expression .
    (68) function_call_2 -> expression . SCOLO function_call_2

    RPAREN          reduce using rule 66 (function_call_2 -> expression .)
    SCOLO           shift and go to state 149


state 117

    (46) writing -> PRINT LPAREN writing_1 . RPAREN SCOLO

    RPAREN          shift and go to state 150


state 118

    (47) writing_1 -> expression .
    (50) writing_2 -> expression . SUMA writing_1

    RPAREN          reduce using rule 47 (writing_1 -> expression .)
    SUMA            shift and go to state 151


state 119

    (48) writing_1 -> CTE_STRING .
    (51) writing_2 -> CTE_STRING . SUMA writing_1
    (103) var_cte -> CTE_STRING .

  ! shift/reduce conflict for SUMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 48 (writing_1 -> CTE_STRING .)
    RPAREN          reduce using rule 48 (writing_1 -> CTE_STRING .)
    SUMA            shift and go to state 152
    MUL             reduce using rule 103 (var_cte -> CTE_STRING .)
    DIV             reduce using rule 103 (var_cte -> CTE_STRING .)
    RESD            reduce using rule 103 (var_cte -> CTE_STRING .)
    SUB             reduce using rule 103 (var_cte -> CTE_STRING .)
    LESST           reduce using rule 103 (var_cte -> CTE_STRING .)
    MORET           reduce using rule 103 (var_cte -> CTE_STRING .)
    LESSEQUAL       reduce using rule 103 (var_cte -> CTE_STRING .)
    MOREEQUAL       reduce using rule 103 (var_cte -> CTE_STRING .)
    EQUALTO         reduce using rule 103 (var_cte -> CTE_STRING .)
    NOTEQUALTO      reduce using rule 103 (var_cte -> CTE_STRING .)
    AND             reduce using rule 103 (var_cte -> CTE_STRING .)
    OR              reduce using rule 103 (var_cte -> CTE_STRING .)

  ! SUMA            [ reduce using rule 103 (var_cte -> CTE_STRING .) ]
  ! RPAREN          [ reduce using rule 103 (var_cte -> CTE_STRING .) ]


state 120

    (49) writing_1 -> writing_2 .

    RPAREN          reduce using rule 49 (writing_1 -> writing_2 .)


state 121

    (52) condition -> IF LPAREN expression . RPAREN LBRACK statutes RBRACK condition_1 SCOLO

    RPAREN          shift and go to state 153


state 122

    (59) c_while -> WHILE LPAREN expression . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 154


state 123

    (60) c_do -> DO LBRACK statutes . RBRACK WHILE LPAREN expression RPAREN

    RBRACK          shift and go to state 155


state 124

    (61) c_for -> FOR LPAREN ID . SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> FOR LPAREN ID . IN ID RPAREN LBRACK statutes RBRACK

    SCOLO           shift and go to state 156
    IN              shift and go to state 157


state 125

    (8) function -> function_t ID LPAREN function_v RPAREN LBRACK vars statutes RBRACK . function
    (8) function -> . function_t ID LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
    (9) function -> . empty
    (10) function_t -> . VOID
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (118) empty -> .
    (26) t_number -> . INT
    (27) t_number -> . FLOAT
    (28) t_string -> . STRING
    (29) t_string -> . CHAR
    (30) t_bool -> . BOOL
    (31) t_graph -> . NODE
    (32) t_graph -> . ARC
    (33) t_graph -> . UNDIRECTED
    (34) t_graph -> . DIRECTED

    VOID            shift and go to state 11
    MAIN            reduce using rule 118 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NODE            shift and go to state 21
    ARC             shift and go to state 22
    UNDIRECTED      shift and go to state 23
    DIRECTED        shift and go to state 24

    function_t                     shift and go to state 9
    function                       shift and go to state 158
    empty                          shift and go to state 10
    t_number                       shift and go to state 12
    t_string                       shift and go to state 13
    t_bool                         shift and go to state 14
    t_graph                        shift and go to state 15

state 126

    (36) array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .

    COMA            reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)
    SCOLO           reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)
    RPAREN          reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)


state 127

    (94) exp_lv5 -> ID array_access .

    MUL             reduce using rule 94 (exp_lv5 -> ID array_access .)
    DIV             reduce using rule 94 (exp_lv5 -> ID array_access .)
    RESD            reduce using rule 94 (exp_lv5 -> ID array_access .)
    SUMA            reduce using rule 94 (exp_lv5 -> ID array_access .)
    SUB             reduce using rule 94 (exp_lv5 -> ID array_access .)
    LESST           reduce using rule 94 (exp_lv5 -> ID array_access .)
    MORET           reduce using rule 94 (exp_lv5 -> ID array_access .)
    LESSEQUAL       reduce using rule 94 (exp_lv5 -> ID array_access .)
    MOREEQUAL       reduce using rule 94 (exp_lv5 -> ID array_access .)
    EQUALTO         reduce using rule 94 (exp_lv5 -> ID array_access .)
    NOTEQUALTO      reduce using rule 94 (exp_lv5 -> ID array_access .)
    AND             reduce using rule 94 (exp_lv5 -> ID array_access .)
    OR              reduce using rule 94 (exp_lv5 -> ID array_access .)
    ID              reduce using rule 94 (exp_lv5 -> ID array_access .)
    PRINT           reduce using rule 94 (exp_lv5 -> ID array_access .)
    IF              reduce using rule 94 (exp_lv5 -> ID array_access .)
    WHILE           reduce using rule 94 (exp_lv5 -> ID array_access .)
    DO              reduce using rule 94 (exp_lv5 -> ID array_access .)
    FOR             reduce using rule 94 (exp_lv5 -> ID array_access .)
    RBRACK          reduce using rule 94 (exp_lv5 -> ID array_access .)
    RPAREN          reduce using rule 94 (exp_lv5 -> ID array_access .)
    SCOLO           reduce using rule 94 (exp_lv5 -> ID array_access .)
    LPAREN          reduce using rule 94 (exp_lv5 -> ID array_access .)


state 128

    (105) method -> ID DOT . method_t LPAREN method_1 RPAREN
    (110) method_t -> . DEG
    (111) method_t -> . SHORTPATH
    (112) method_t -> . DIAMETER
    (113) method_t -> . ADD
    (114) method_t -> . DELETE
    (115) method_t -> . ARC

    DEG             shift and go to state 160
    SHORTPATH       shift and go to state 161
    DIAMETER        shift and go to state 162
    ADD             shift and go to state 163
    DELETE          shift and go to state 164
    ARC             shift and go to state 165

    method_t                       shift and go to state 159

state 129

    (95) array_access -> LCORCH . arrary_access_1 RCORCH arrary_access_2
    (96) arrary_access_1 -> . CTE_INT
    (97) arrary_access_1 -> . ID

    CTE_INT         shift and go to state 167
    ID              shift and go to state 168

    arrary_access_1                shift and go to state 166

state 130

    (71) expression -> exp_lv1 AND . expression
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv1                        shift and go to state 98
    expression                     shift and go to state 169
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 131

    (72) expression -> exp_lv1 OR . expression
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv1                        shift and go to state 98
    expression                     shift and go to state 170
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 132

    (73) exp_lv1 -> exp_lv2 exp_lv1_1 .

    AND             reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    OR              reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    ID              reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    PRINT           reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    IF              reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    WHILE           reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    DO              reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    FOR             reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    RBRACK          reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    RPAREN          reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    SCOLO           reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    SUMA            reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    LPAREN          reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)


state 133

    (74) exp_lv1_1 -> LESST . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv2                        shift and go to state 171
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 134

    (75) exp_lv1_1 -> MORET . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv2                        shift and go to state 172
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 135

    (76) exp_lv1_1 -> LESSEQUAL . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv2                        shift and go to state 173
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 136

    (77) exp_lv1_1 -> MOREEQUAL . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv2                        shift and go to state 174
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 137

    (78) exp_lv1_1 -> EQUALTO . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv2                        shift and go to state 175
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 138

    (79) exp_lv1_1 -> NOTEQUALTO . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv2                        shift and go to state 176
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 139

    (80) exp_lv1_1 -> empty .

    AND             reduce using rule 80 (exp_lv1_1 -> empty .)
    OR              reduce using rule 80 (exp_lv1_1 -> empty .)
    ID              reduce using rule 80 (exp_lv1_1 -> empty .)
    PRINT           reduce using rule 80 (exp_lv1_1 -> empty .)
    IF              reduce using rule 80 (exp_lv1_1 -> empty .)
    WHILE           reduce using rule 80 (exp_lv1_1 -> empty .)
    DO              reduce using rule 80 (exp_lv1_1 -> empty .)
    FOR             reduce using rule 80 (exp_lv1_1 -> empty .)
    RBRACK          reduce using rule 80 (exp_lv1_1 -> empty .)
    RPAREN          reduce using rule 80 (exp_lv1_1 -> empty .)
    SCOLO           reduce using rule 80 (exp_lv1_1 -> empty .)
    SUMA            reduce using rule 80 (exp_lv1_1 -> empty .)
    LPAREN          reduce using rule 80 (exp_lv1_1 -> empty .)


state 140

    (82) exp_lv2 -> exp_lv3 SUMA . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv3                        shift and go to state 100
    exp_lv2                        shift and go to state 177
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 141

    (83) exp_lv2 -> exp_lv3 SUB . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv3                        shift and go to state 100
    exp_lv2                        shift and go to state 178
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 142

    (85) exp_lv3 -> exp_lv4 MUL . exp_lv3
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv4                        shift and go to state 101
    exp_lv3                        shift and go to state 179
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 143

    (86) exp_lv3 -> exp_lv4 DIV . exp_lv3
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv4                        shift and go to state 101
    exp_lv3                        shift and go to state 180
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 144

    (87) exp_lv3 -> exp_lv4 RESD . exp_lv3
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    exp_lv4                        shift and go to state 101
    exp_lv3                        shift and go to state 181
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 145

    (89) exp_lv4 -> NOT exp_lv5 .

    MUL             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    DIV             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    RESD            reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    SUMA            reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    SUB             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    LESST           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    MORET           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    LESSEQUAL       reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    MOREEQUAL       reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    EQUALTO         reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    NOTEQUALTO      reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    AND             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    OR              reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    ID              reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    PRINT           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    IF              reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    WHILE           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    DO              reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    FOR             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    RBRACK          reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    RPAREN          reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    SCOLO           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    LPAREN          reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)


state 146

    (90) exp_lv5 -> RPAREN expression . LPAREN

    LPAREN          shift and go to state 182


state 147

    (69) function_call_2 -> ID SCOLO . function_call_2
    (66) function_call_2 -> . expression
    (67) function_call_2 -> . ID
    (68) function_call_2 -> . expression SCOLO function_call_2
    (69) function_call_2 -> . ID SCOLO function_call_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    ID              shift and go to state 112
    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    function_call_2                shift and go to state 183
    expression                     shift and go to state 116
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 148

    (63) function_call -> ID LPAREN function_call_1 RPAREN . SCOLO

    SCOLO           shift and go to state 184


state 149

    (68) function_call_2 -> expression SCOLO . function_call_2
    (66) function_call_2 -> . expression
    (67) function_call_2 -> . ID
    (68) function_call_2 -> . expression SCOLO function_call_2
    (69) function_call_2 -> . ID SCOLO function_call_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    ID              shift and go to state 112
    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 116
    function_call_2                shift and go to state 185
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 150

    (46) writing -> PRINT LPAREN writing_1 RPAREN . SCOLO

    SCOLO           shift and go to state 186


state 151

    (50) writing_2 -> expression SUMA . writing_1
    (47) writing_1 -> . expression
    (48) writing_1 -> . CTE_STRING
    (49) writing_1 -> . writing_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (50) writing_2 -> . expression SUMA writing_1
    (51) writing_2 -> . CTE_STRING SUMA writing_1
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    CTE_STRING      shift and go to state 119
    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 118
    writing_1                      shift and go to state 187
    writing_2                      shift and go to state 120
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 152

    (51) writing_2 -> CTE_STRING SUMA . writing_1
    (47) writing_1 -> . expression
    (48) writing_1 -> . CTE_STRING
    (49) writing_1 -> . writing_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (50) writing_2 -> . expression SUMA writing_1
    (51) writing_2 -> . CTE_STRING SUMA writing_1
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    CTE_STRING      shift and go to state 119
    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_CHAR        shift and go to state 111

    writing_1                      shift and go to state 188
    expression                     shift and go to state 118
    writing_2                      shift and go to state 120
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 153

    (52) condition -> IF LPAREN expression RPAREN . LBRACK statutes RBRACK condition_1 SCOLO

    LBRACK          shift and go to state 189


state 154

    (59) c_while -> WHILE LPAREN expression RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 190


state 155

    (60) c_do -> DO LBRACK statutes RBRACK . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 191


state 156

    (61) c_for -> FOR LPAREN ID SCOLO . expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 192
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 157

    (62) c_forin -> FOR LPAREN ID IN . ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 193


state 158

    (8) function -> function_t ID LPAREN function_v RPAREN LBRACK vars statutes RBRACK function .

    MAIN            reduce using rule 8 (function -> function_t ID LPAREN function_v RPAREN LBRACK vars statutes RBRACK function .)


state 159

    (105) method -> ID DOT method_t . LPAREN method_1 RPAREN

    LPAREN          shift and go to state 194


state 160

    (110) method_t -> DEG .

    LPAREN          reduce using rule 110 (method_t -> DEG .)


state 161

    (111) method_t -> SHORTPATH .

    LPAREN          reduce using rule 111 (method_t -> SHORTPATH .)


state 162

    (112) method_t -> DIAMETER .

    LPAREN          reduce using rule 112 (method_t -> DIAMETER .)


state 163

    (113) method_t -> ADD .

    LPAREN          reduce using rule 113 (method_t -> ADD .)


state 164

    (114) method_t -> DELETE .

    LPAREN          reduce using rule 114 (method_t -> DELETE .)


state 165

    (115) method_t -> ARC .

    LPAREN          reduce using rule 115 (method_t -> ARC .)


state 166

    (95) array_access -> LCORCH arrary_access_1 . RCORCH arrary_access_2

    RCORCH          shift and go to state 195


state 167

    (96) arrary_access_1 -> CTE_INT .

    RCORCH          reduce using rule 96 (arrary_access_1 -> CTE_INT .)


state 168

    (97) arrary_access_1 -> ID .

    RCORCH          reduce using rule 97 (arrary_access_1 -> ID .)


state 169

    (71) expression -> exp_lv1 AND expression .

    ID              reduce using rule 71 (expression -> exp_lv1 AND expression .)
    PRINT           reduce using rule 71 (expression -> exp_lv1 AND expression .)
    IF              reduce using rule 71 (expression -> exp_lv1 AND expression .)
    WHILE           reduce using rule 71 (expression -> exp_lv1 AND expression .)
    DO              reduce using rule 71 (expression -> exp_lv1 AND expression .)
    FOR             reduce using rule 71 (expression -> exp_lv1 AND expression .)
    RBRACK          reduce using rule 71 (expression -> exp_lv1 AND expression .)
    RPAREN          reduce using rule 71 (expression -> exp_lv1 AND expression .)
    SCOLO           reduce using rule 71 (expression -> exp_lv1 AND expression .)
    SUMA            reduce using rule 71 (expression -> exp_lv1 AND expression .)
    LPAREN          reduce using rule 71 (expression -> exp_lv1 AND expression .)


state 170

    (72) expression -> exp_lv1 OR expression .

    ID              reduce using rule 72 (expression -> exp_lv1 OR expression .)
    PRINT           reduce using rule 72 (expression -> exp_lv1 OR expression .)
    IF              reduce using rule 72 (expression -> exp_lv1 OR expression .)
    WHILE           reduce using rule 72 (expression -> exp_lv1 OR expression .)
    DO              reduce using rule 72 (expression -> exp_lv1 OR expression .)
    FOR             reduce using rule 72 (expression -> exp_lv1 OR expression .)
    RBRACK          reduce using rule 72 (expression -> exp_lv1 OR expression .)
    RPAREN          reduce using rule 72 (expression -> exp_lv1 OR expression .)
    SCOLO           reduce using rule 72 (expression -> exp_lv1 OR expression .)
    SUMA            reduce using rule 72 (expression -> exp_lv1 OR expression .)
    LPAREN          reduce using rule 72 (expression -> exp_lv1 OR expression .)


state 171

    (74) exp_lv1_1 -> LESST exp_lv2 .

    AND             reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    OR              reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    ID              reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    PRINT           reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    IF              reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    WHILE           reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    DO              reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    FOR             reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    RBRACK          reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    RPAREN          reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    SCOLO           reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    SUMA            reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    LPAREN          reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)


state 172

    (75) exp_lv1_1 -> MORET exp_lv2 .

    AND             reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    OR              reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    ID              reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    PRINT           reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    IF              reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    WHILE           reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    DO              reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    FOR             reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    RBRACK          reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    RPAREN          reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    SCOLO           reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    SUMA            reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    LPAREN          reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)


state 173

    (76) exp_lv1_1 -> LESSEQUAL exp_lv2 .

    AND             reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    OR              reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    ID              reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    PRINT           reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    IF              reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    WHILE           reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    DO              reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    FOR             reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    RBRACK          reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    RPAREN          reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    SCOLO           reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    SUMA            reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    LPAREN          reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)


state 174

    (77) exp_lv1_1 -> MOREEQUAL exp_lv2 .

    AND             reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    OR              reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    ID              reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    PRINT           reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    IF              reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    WHILE           reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    DO              reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    FOR             reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    RBRACK          reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    RPAREN          reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    SCOLO           reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    SUMA            reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    LPAREN          reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)


state 175

    (78) exp_lv1_1 -> EQUALTO exp_lv2 .

    AND             reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    OR              reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    ID              reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    PRINT           reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    IF              reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    WHILE           reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    DO              reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    FOR             reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    RBRACK          reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    RPAREN          reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    SCOLO           reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    SUMA            reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    LPAREN          reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)


state 176

    (79) exp_lv1_1 -> NOTEQUALTO exp_lv2 .

    AND             reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    OR              reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    ID              reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    PRINT           reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    IF              reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    WHILE           reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    DO              reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    FOR             reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    RBRACK          reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    RPAREN          reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    SCOLO           reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    SUMA            reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    LPAREN          reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)


state 177

    (82) exp_lv2 -> exp_lv3 SUMA exp_lv2 .

    LESST           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    MORET           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    LESSEQUAL       reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    MOREEQUAL       reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    EQUALTO         reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    NOTEQUALTO      reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    AND             reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    OR              reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    ID              reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    PRINT           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    IF              reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    WHILE           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    DO              reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    FOR             reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    RBRACK          reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    RPAREN          reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    SCOLO           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    SUMA            reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    LPAREN          reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)


state 178

    (83) exp_lv2 -> exp_lv3 SUB exp_lv2 .

    LESST           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    MORET           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    LESSEQUAL       reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    MOREEQUAL       reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    EQUALTO         reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    NOTEQUALTO      reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    AND             reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    OR              reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    ID              reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    PRINT           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    IF              reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    WHILE           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    DO              reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    FOR             reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    RBRACK          reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    RPAREN          reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    SCOLO           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    SUMA            reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    LPAREN          reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)


state 179

    (85) exp_lv3 -> exp_lv4 MUL exp_lv3 .

    SUMA            reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    SUB             reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    LESST           reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    MORET           reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    LESSEQUAL       reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    MOREEQUAL       reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    EQUALTO         reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    NOTEQUALTO      reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    AND             reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    OR              reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    ID              reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    PRINT           reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    IF              reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    WHILE           reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    DO              reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    FOR             reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    RBRACK          reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    RPAREN          reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    SCOLO           reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)
    LPAREN          reduce using rule 85 (exp_lv3 -> exp_lv4 MUL exp_lv3 .)


state 180

    (86) exp_lv3 -> exp_lv4 DIV exp_lv3 .

    SUMA            reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    SUB             reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    LESST           reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    MORET           reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    LESSEQUAL       reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    MOREEQUAL       reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    EQUALTO         reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    NOTEQUALTO      reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    AND             reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    OR              reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    ID              reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    PRINT           reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    IF              reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    WHILE           reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    DO              reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    FOR             reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    RBRACK          reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    RPAREN          reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    SCOLO           reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)
    LPAREN          reduce using rule 86 (exp_lv3 -> exp_lv4 DIV exp_lv3 .)


state 181

    (87) exp_lv3 -> exp_lv4 RESD exp_lv3 .

    SUMA            reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    SUB             reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    LESST           reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    MORET           reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    LESSEQUAL       reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    MOREEQUAL       reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    EQUALTO         reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    NOTEQUALTO      reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    AND             reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    OR              reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    ID              reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    PRINT           reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    IF              reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    WHILE           reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    DO              reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    FOR             reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    RBRACK          reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    RPAREN          reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    SCOLO           reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)
    LPAREN          reduce using rule 87 (exp_lv3 -> exp_lv4 RESD exp_lv3 .)


state 182

    (90) exp_lv5 -> RPAREN expression LPAREN .

    MUL             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    DIV             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    RESD            reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    SUMA            reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    SUB             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    LESST           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    MORET           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    LESSEQUAL       reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    MOREEQUAL       reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    EQUALTO         reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    NOTEQUALTO      reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    AND             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    OR              reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    ID              reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    PRINT           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    IF              reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    WHILE           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    DO              reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    FOR             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    RBRACK          reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    RPAREN          reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    SCOLO           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    LPAREN          reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)


state 183

    (69) function_call_2 -> ID SCOLO function_call_2 .

    RPAREN          reduce using rule 69 (function_call_2 -> ID SCOLO function_call_2 .)


state 184

    (63) function_call -> ID LPAREN function_call_1 RPAREN SCOLO .

    ID              reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    PRINT           reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    IF              reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    WHILE           reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    DO              reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    FOR             reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    RBRACK          reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)


state 185

    (68) function_call_2 -> expression SCOLO function_call_2 .

    RPAREN          reduce using rule 68 (function_call_2 -> expression SCOLO function_call_2 .)


state 186

    (46) writing -> PRINT LPAREN writing_1 RPAREN SCOLO .

    ID              reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    PRINT           reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    IF              reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    WHILE           reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    DO              reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    FOR             reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    RBRACK          reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)


state 187

    (50) writing_2 -> expression SUMA writing_1 .

    RPAREN          reduce using rule 50 (writing_2 -> expression SUMA writing_1 .)


state 188

    (51) writing_2 -> CTE_STRING SUMA writing_1 .

    RPAREN          reduce using rule 51 (writing_2 -> CTE_STRING SUMA writing_1 .)


state 189

    (52) condition -> IF LPAREN expression RPAREN LBRACK . statutes RBRACK condition_1 SCOLO
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    statutes                       shift and go to state 196
    statutes_1                     shift and go to state 63
    empty                          shift and go to state 64
    assignation                    shift and go to state 65
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 190

    (59) c_while -> WHILE LPAREN expression RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    statutes                       shift and go to state 197
    statutes_1                     shift and go to state 63
    empty                          shift and go to state 64
    assignation                    shift and go to state 65
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 191

    (60) c_do -> DO LBRACK statutes RBRACK WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 198


state 192

    (61) c_for -> FOR LPAREN ID SCOLO expression . SCOLO assignation RPAREN LBRACK statutes RBRACK

    SCOLO           shift and go to state 199


state 193

    (62) c_forin -> FOR LPAREN ID IN ID . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 200


state 194

    (105) method -> ID DOT method_t LPAREN . method_1 RPAREN
    (106) method_1 -> . method_1_1
    (107) method_1 -> . empty
    (108) method_1_1 -> . method_v
    (109) method_1_1 -> . method_v COMA method_1_1
    (118) empty -> .
    (116) method_v -> . ID
    (117) method_v -> . LBRACK ID COMA ID RBRACK

    RPAREN          reduce using rule 118 (empty -> .)
    ID              shift and go to state 201
    LBRACK          shift and go to state 206

    method_1                       shift and go to state 202
    method_1_1                     shift and go to state 203
    empty                          shift and go to state 204
    method_v                       shift and go to state 205

state 195

    (95) array_access -> LCORCH arrary_access_1 RCORCH . arrary_access_2
    (98) arrary_access_2 -> . LCORCH arrary_access_1 RCORCH arrary_access_2
    (99) arrary_access_2 -> . empty
    (118) empty -> .

    LCORCH          shift and go to state 207
    MUL             reduce using rule 118 (empty -> .)
    DIV             reduce using rule 118 (empty -> .)
    RESD            reduce using rule 118 (empty -> .)
    SUMA            reduce using rule 118 (empty -> .)
    SUB             reduce using rule 118 (empty -> .)
    LESST           reduce using rule 118 (empty -> .)
    MORET           reduce using rule 118 (empty -> .)
    LESSEQUAL       reduce using rule 118 (empty -> .)
    MOREEQUAL       reduce using rule 118 (empty -> .)
    EQUALTO         reduce using rule 118 (empty -> .)
    NOTEQUALTO      reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    RBRACK          reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    SCOLO           reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)

    arrary_access_2                shift and go to state 208
    empty                          shift and go to state 209

state 196

    (52) condition -> IF LPAREN expression RPAREN LBRACK statutes . RBRACK condition_1 SCOLO

    RBRACK          shift and go to state 210


state 197

    (59) c_while -> WHILE LPAREN expression RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 211


state 198

    (60) c_do -> DO LBRACK statutes RBRACK WHILE LPAREN . expression RPAREN
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 212
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 199

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO . assignation RPAREN LBRACK statutes RBRACK
    (45) assignation -> . ID EQL expression

    ID              shift and go to state 213

    assignation                    shift and go to state 214

state 200

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 215


state 201

    (116) method_v -> ID .

    COMA            reduce using rule 116 (method_v -> ID .)
    RPAREN          reduce using rule 116 (method_v -> ID .)


state 202

    (105) method -> ID DOT method_t LPAREN method_1 . RPAREN

    RPAREN          shift and go to state 216


state 203

    (106) method_1 -> method_1_1 .

    RPAREN          reduce using rule 106 (method_1 -> method_1_1 .)


state 204

    (107) method_1 -> empty .

    RPAREN          reduce using rule 107 (method_1 -> empty .)


state 205

    (108) method_1_1 -> method_v .
    (109) method_1_1 -> method_v . COMA method_1_1

    RPAREN          reduce using rule 108 (method_1_1 -> method_v .)
    COMA            shift and go to state 217


state 206

    (117) method_v -> LBRACK . ID COMA ID RBRACK

    ID              shift and go to state 218


state 207

    (98) arrary_access_2 -> LCORCH . arrary_access_1 RCORCH arrary_access_2
    (96) arrary_access_1 -> . CTE_INT
    (97) arrary_access_1 -> . ID

    CTE_INT         shift and go to state 167
    ID              shift and go to state 168

    arrary_access_1                shift and go to state 219

state 208

    (95) array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .

    MUL             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DIV             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RESD            reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUMA            reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUB             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESST           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MORET           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESSEQUAL       reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MOREEQUAL       reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    EQUALTO         reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    NOTEQUALTO      reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    AND             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    OR              reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    ID              reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    PRINT           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    IF              reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    WHILE           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DO              reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    FOR             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RBRACK          reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RPAREN          reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SCOLO           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LPAREN          reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)


state 209

    (99) arrary_access_2 -> empty .

    MUL             reduce using rule 99 (arrary_access_2 -> empty .)
    DIV             reduce using rule 99 (arrary_access_2 -> empty .)
    RESD            reduce using rule 99 (arrary_access_2 -> empty .)
    SUMA            reduce using rule 99 (arrary_access_2 -> empty .)
    SUB             reduce using rule 99 (arrary_access_2 -> empty .)
    LESST           reduce using rule 99 (arrary_access_2 -> empty .)
    MORET           reduce using rule 99 (arrary_access_2 -> empty .)
    LESSEQUAL       reduce using rule 99 (arrary_access_2 -> empty .)
    MOREEQUAL       reduce using rule 99 (arrary_access_2 -> empty .)
    EQUALTO         reduce using rule 99 (arrary_access_2 -> empty .)
    NOTEQUALTO      reduce using rule 99 (arrary_access_2 -> empty .)
    AND             reduce using rule 99 (arrary_access_2 -> empty .)
    OR              reduce using rule 99 (arrary_access_2 -> empty .)
    ID              reduce using rule 99 (arrary_access_2 -> empty .)
    PRINT           reduce using rule 99 (arrary_access_2 -> empty .)
    IF              reduce using rule 99 (arrary_access_2 -> empty .)
    WHILE           reduce using rule 99 (arrary_access_2 -> empty .)
    DO              reduce using rule 99 (arrary_access_2 -> empty .)
    FOR             reduce using rule 99 (arrary_access_2 -> empty .)
    RBRACK          reduce using rule 99 (arrary_access_2 -> empty .)
    RPAREN          reduce using rule 99 (arrary_access_2 -> empty .)
    SCOLO           reduce using rule 99 (arrary_access_2 -> empty .)
    LPAREN          reduce using rule 99 (arrary_access_2 -> empty .)


state 210

    (52) condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK . condition_1 SCOLO
    (53) condition_1 -> . ELSE LBRACK expression RBRACK
    (54) condition_1 -> . empty
    (118) empty -> .

    ELSE            shift and go to state 221
    SCOLO           reduce using rule 118 (empty -> .)

    condition_1                    shift and go to state 220
    empty                          shift and go to state 222

state 211

    (59) c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)


state 212

    (60) c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression . RPAREN

    RPAREN          shift and go to state 223


state 213

    (45) assignation -> ID . EQL expression

    EQL             shift and go to state 86


state 214

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 224


state 215

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    statutes                       shift and go to state 225
    statutes_1                     shift and go to state 63
    empty                          shift and go to state 64
    assignation                    shift and go to state 65
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 216

    (105) method -> ID DOT method_t LPAREN method_1 RPAREN .

    MUL             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    DIV             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    RESD            reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SUMA            reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SUB             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LESST           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    MORET           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LESSEQUAL       reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    MOREEQUAL       reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    EQUALTO         reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    NOTEQUALTO      reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    AND             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    OR              reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    ID              reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    PRINT           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    IF              reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    WHILE           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    DO              reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    FOR             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    RBRACK          reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    RPAREN          reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SCOLO           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LPAREN          reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)


state 217

    (109) method_1_1 -> method_v COMA . method_1_1
    (108) method_1_1 -> . method_v
    (109) method_1_1 -> . method_v COMA method_1_1
    (116) method_v -> . ID
    (117) method_v -> . LBRACK ID COMA ID RBRACK

    ID              shift and go to state 201
    LBRACK          shift and go to state 206

    method_v                       shift and go to state 205
    method_1_1                     shift and go to state 226

state 218

    (117) method_v -> LBRACK ID . COMA ID RBRACK

    COMA            shift and go to state 227


state 219

    (98) arrary_access_2 -> LCORCH arrary_access_1 . RCORCH arrary_access_2

    RCORCH          shift and go to state 228


state 220

    (52) condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 . SCOLO

    SCOLO           shift and go to state 229


state 221

    (53) condition_1 -> ELSE . LBRACK expression RBRACK

    LBRACK          shift and go to state 230


state 222

    (54) condition_1 -> empty .

    SCOLO           reduce using rule 54 (condition_1 -> empty .)


state 223

    (60) c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .

    ID              reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .)
    PRINT           reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .)
    RBRACK          reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN .)


state 224

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 231


state 225

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 232


state 226

    (109) method_1_1 -> method_v COMA method_1_1 .

    RPAREN          reduce using rule 109 (method_1_1 -> method_v COMA method_1_1 .)


state 227

    (117) method_v -> LBRACK ID COMA . ID RBRACK

    ID              shift and go to state 233


state 228

    (98) arrary_access_2 -> LCORCH arrary_access_1 RCORCH . arrary_access_2
    (98) arrary_access_2 -> . LCORCH arrary_access_1 RCORCH arrary_access_2
    (99) arrary_access_2 -> . empty
    (118) empty -> .

    LCORCH          shift and go to state 207
    MUL             reduce using rule 118 (empty -> .)
    DIV             reduce using rule 118 (empty -> .)
    RESD            reduce using rule 118 (empty -> .)
    SUMA            reduce using rule 118 (empty -> .)
    SUB             reduce using rule 118 (empty -> .)
    LESST           reduce using rule 118 (empty -> .)
    MORET           reduce using rule 118 (empty -> .)
    LESSEQUAL       reduce using rule 118 (empty -> .)
    MOREEQUAL       reduce using rule 118 (empty -> .)
    EQUALTO         reduce using rule 118 (empty -> .)
    NOTEQUALTO      reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    RBRACK          reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    SCOLO           reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)

    arrary_access_2                shift and go to state 234
    empty                          shift and go to state 209

state 229

    (52) condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .

    ID              reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .)
    PRINT           reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .)
    IF              reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .)
    WHILE           reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .)
    DO              reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .)
    FOR             reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .)
    RBRACK          reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO .)


state 230

    (53) condition_1 -> ELSE LBRACK . expression RBRACK
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4
    (85) exp_lv3 -> . exp_lv4 MUL exp_lv3
    (86) exp_lv3 -> . exp_lv4 DIV exp_lv3
    (87) exp_lv3 -> . exp_lv4 RESD exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT
    (101) var_cte -> . CTE_FLO
    (102) var_cte -> . CTE_BOO
    (103) var_cte -> . CTE_STRING
    (104) var_cte -> . CTE_CHAR
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 103
    RPAREN          shift and go to state 104
    ID              shift and go to state 96
    CTE_INT         shift and go to state 107
    CTE_FLO         shift and go to state 108
    CTE_BOO         shift and go to state 109
    CTE_STRING      shift and go to state 110
    CTE_CHAR        shift and go to state 111

    expression                     shift and go to state 235
    exp_lv1                        shift and go to state 98
    exp_lv2                        shift and go to state 99
    exp_lv3                        shift and go to state 100
    exp_lv4                        shift and go to state 101
    exp_lv5                        shift and go to state 102
    var_cte                        shift and go to state 105
    method                         shift and go to state 106

state 231

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (118) empty -> .
    (45) assignation -> . ID EQL expression
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 SCOLO
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 118 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    FOR             shift and go to state 79

    assignation                    shift and go to state 65
    statutes                       shift and go to state 236
    statutes_1                     shift and go to state 63
    empty                          shift and go to state 64
    writing                        shift and go to state 66
    condition                      shift and go to state 67
    cycle                          shift and go to state 68
    function_call                  shift and go to state 69
    c_while                        shift and go to state 73
    c_do                           shift and go to state 74
    c_for                          shift and go to state 75
    c_forin                        shift and go to state 76

state 232

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)


state 233

    (117) method_v -> LBRACK ID COMA ID . RBRACK

    RBRACK          shift and go to state 237


state 234

    (98) arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .

    MUL             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DIV             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RESD            reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUMA            reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUB             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESST           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MORET           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESSEQUAL       reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MOREEQUAL       reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    EQUALTO         reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    NOTEQUALTO      reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    AND             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    OR              reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    ID              reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    PRINT           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    IF              reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    WHILE           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DO              reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    FOR             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RBRACK          reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RPAREN          reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SCOLO           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LPAREN          reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)


state 235

    (53) condition_1 -> ELSE LBRACK expression . RBRACK

    RBRACK          shift and go to state 238


state 236

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 239


state 237

    (117) method_v -> LBRACK ID COMA ID RBRACK .

    COMA            reduce using rule 117 (method_v -> LBRACK ID COMA ID RBRACK .)
    RPAREN          reduce using rule 117 (method_v -> LBRACK ID COMA ID RBRACK .)


state 238

    (53) condition_1 -> ELSE LBRACK expression RBRACK .

    SCOLO           reduce using rule 53 (condition_1 -> ELSE LBRACK expression RBRACK .)


state 239

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 100 resolved as shift
WARNING: shift/reduce conflict for SCOLO in state 112 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 119 resolved as shift
WARNING: reduce/reduce conflict in state 112 resolved using rule (function_call_2 -> ID)
WARNING: rejected rule (exp_lv5 -> ID) in state 112
WARNING: reduce/reduce conflict in state 119 resolved using rule (writing_1 -> CTE_STRING)
WARNING: rejected rule (var_cte -> CTE_STRING) in state 119
