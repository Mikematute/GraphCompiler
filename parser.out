Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars function body
Rule 2     vars -> VAR type vars_1 SCOLO vars
Rule 3     vars -> empty
Rule 4     vars_1 -> ID np_var_2 vars_2
Rule 5     vars_1 -> ID np_var_2 vars_2 COMA vars_1
Rule 6     vars_2 -> array_declare
Rule 7     vars_2 -> empty
Rule 8     function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
Rule 9     function -> empty
Rule 10    function_t -> VOID np_var_1
Rule 11    function_t -> t_number
Rule 12    function_t -> t_string
Rule 13    function_t -> t_bool
Rule 14    function_t -> t_graph
Rule 15    function_v -> function_v1
Rule 16    function_v -> empty
Rule 17    function_v1 -> type np_var_b4 ID np_var_b5
Rule 18    function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1
Rule 19    function_v1 -> type np_var_b4 ID np_var_b5 array_declare
Rule 20    function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1
Rule 21    body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3
Rule 22    type -> t_number
Rule 23    type -> t_string
Rule 24    type -> t_bool
Rule 25    type -> t_graph
Rule 26    t_number -> INT np_var_1
Rule 27    t_number -> FLOAT np_var_1
Rule 28    t_string -> STRING np_var_1
Rule 29    t_string -> CHAR np_var_1
Rule 30    t_bool -> BOOL np_var_1
Rule 31    t_graph -> NODE np_var_1
Rule 32    t_graph -> ARC np_var_1
Rule 33    t_graph -> UNDIRECTED np_var_1
Rule 34    t_graph -> DIRECTED np_var_1
Rule 35    array_declare -> LCORCH CTE_INT RCORCH array_declare_1
Rule 36    array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1
Rule 37    array_declare_1 -> empty
Rule 38    statutes -> statutes_1 statutes
Rule 39    statutes -> empty
Rule 40    statutes_1 -> assignation
Rule 41    statutes_1 -> writing
Rule 42    statutes_1 -> condition
Rule 43    statutes_1 -> cycle
Rule 44    statutes_1 -> function_call
Rule 45    assignation -> ID EQL expression SCOLO
Rule 46    writing -> PRINT LPAREN writing_1 RPAREN SCOLO
Rule 47    writing_1 -> expression
Rule 48    writing_1 -> CTE_STRING
Rule 49    writing_1 -> writing_2
Rule 50    writing_2 -> expression SUMA writing_1
Rule 51    writing_2 -> CTE_STRING SUMA writing_1
Rule 52    condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
Rule 53    condition_1 -> ELSE LBRACK statutes RBRACK
Rule 54    condition_1 -> empty
Rule 55    cycle -> c_while
Rule 56    cycle -> c_do
Rule 57    cycle -> c_for
Rule 58    cycle -> c_forin
Rule 59    c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
Rule 60    c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
Rule 61    c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
Rule 62    c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK
Rule 63    function_call -> ID LPAREN function_call_1 RPAREN SCOLO
Rule 64    function_call_1 -> function_call_2
Rule 65    function_call_1 -> empty
Rule 66    function_call_2 -> expression
Rule 67    function_call_2 -> ID
Rule 68    function_call_2 -> expression SCOLO function_call_2
Rule 69    function_call_2 -> ID SCOLO function_call_2
Rule 70    expression -> exp_lv1
Rule 71    expression -> exp_lv1 AND expression
Rule 72    expression -> exp_lv1 OR expression
Rule 73    exp_lv1 -> exp_lv2 exp_lv1_1
Rule 74    exp_lv1_1 -> LESST exp_lv2
Rule 75    exp_lv1_1 -> MORET exp_lv2
Rule 76    exp_lv1_1 -> LESSEQUAL exp_lv2
Rule 77    exp_lv1_1 -> MOREEQUAL exp_lv2
Rule 78    exp_lv1_1 -> EQUALTO exp_lv2
Rule 79    exp_lv1_1 -> NOTEQUALTO exp_lv2
Rule 80    exp_lv1_1 -> empty
Rule 81    exp_lv2 -> exp_lv3
Rule 82    exp_lv2 -> exp_lv3 SUMA exp_lv2
Rule 83    exp_lv2 -> exp_lv3 SUB exp_lv2
Rule 84    exp_lv3 -> exp_lv4 np_quad_1
Rule 85    exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
Rule 86    exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
Rule 87    exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
Rule 88    exp_lv4 -> exp_lv5
Rule 89    exp_lv4 -> NOT exp_lv5
Rule 90    exp_lv5 -> RPAREN expression LPAREN
Rule 91    exp_lv5 -> var_cte
Rule 92    exp_lv5 -> method
Rule 93    exp_lv5 -> ID
Rule 94    exp_lv5 -> ID array_access
Rule 95    array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2
Rule 96    arrary_access_1 -> CTE_INT
Rule 97    arrary_access_1 -> ID
Rule 98    arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2
Rule 99    arrary_access_2 -> empty
Rule 100   var_cte -> CTE_INT np_operand_cte_int
Rule 101   var_cte -> CTE_FLO np_operand_cte_flt
Rule 102   var_cte -> CTE_BOO np_operand_cte_bol
Rule 103   var_cte -> CTE_STRING np_operand_cte_str
Rule 104   var_cte -> CTE_CHAR np_operand_cte_chr
Rule 105   method -> ID DOT method_t LPAREN method_1 RPAREN
Rule 106   method_1 -> method_1_1
Rule 107   method_1 -> empty
Rule 108   method_1_1 -> method_v
Rule 109   method_1_1 -> method_v COMA method_1_1
Rule 110   method_t -> DEG
Rule 111   method_t -> SHORTPATH
Rule 112   method_t -> DIAMETER
Rule 113   method_t -> ADD
Rule 114   method_t -> DELETE
Rule 115   method_t -> ARC
Rule 116   method_v -> ID
Rule 117   method_v -> LBRACK ID COMA ID RBRACK
Rule 118   np_var_a1 -> empty
Rule 119   np_var_a2 -> empty
Rule 120   np_var_b1 -> empty
Rule 121   np_var_b2 -> empty
Rule 122   np_var_b3 -> empty
Rule 123   np_var_b4 -> empty
Rule 124   np_var_b5 -> empty
Rule 125   np_var_c1 -> empty
Rule 126   np_var_c2 -> empty
Rule 127   np_var_c3 -> empty
Rule 128   np_var_1 -> empty
Rule 129   np_var_2 -> empty
Rule 130   np_operand_cte_int -> empty
Rule 131   np_operand_cte_flt -> empty
Rule 132   np_operand_cte_chr -> empty
Rule 133   np_operand_cte_str -> empty
Rule 134   np_operand_cte_bol -> empty
Rule 135   np_operator_stack -> empty
Rule 136   np_quad_1 -> empty
Rule 137   debug -> empty
Rule 138   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 113
AND                  : 71
ARC                  : 32 115
BOOL                 : 30
CHAR                 : 29
COLON                : 
COMA                 : 5 18 20 109 117
CTE_BOO              : 102
CTE_CHAR             : 104
CTE_FLO              : 101
CTE_INT              : 35 36 96 100
CTE_STRING           : 48 51 103
DEG                  : 110
DELETE               : 114
DIAMETER             : 112
DIRECTED             : 34
DIV                  : 86
DO                   : 60
DOT                  : 105
ELSE                 : 53
EQL                  : 45
EQUALTO              : 78
FLOAT                : 27
FOR                  : 61 62
ID                   : 1 4 5 8 17 18 19 20 45 61 62 62 63 67 69 93 94 97 105 116 117 117
IF                   : 52
IN                   : 62
INT                  : 26
LBRACK               : 8 21 52 53 59 60 61 62 117
LCORCH               : 35 36 95 98
LESSEQUAL            : 76
LESST                : 74
LPAREN               : 8 21 46 52 59 60 61 62 63 90 105
MAIN                 : 21
MOREEQUAL            : 77
MORET                : 75
MUL                  : 85
NODE                 : 31
NOT                  : 89
NOTEQUALTO           : 79
OR                   : 72
PRINT                : 46
PROGRAM              : 1
RBRACK               : 8 21 52 53 59 60 61 62 117
RCORCH               : 35 36 95 98
RESD                 : 87
RPAREN               : 8 21 46 52 59 60 61 62 63 90 105
SCOLO                : 1 2 45 46 60 61 61 63 68 69
SHORTPATH            : 111
STRING               : 28
SUB                  : 83
SUMA                 : 50 51 82
UNDIRECTED           : 33
VAR                  : 2
VOID                 : 10
WHILE                : 59 60
error                : 

Nonterminals, with rules where they appear

arrary_access_1      : 95 98
arrary_access_2      : 95 98
array_access         : 94
array_declare        : 6 19 20
array_declare_1      : 35 36
assignation          : 40 61
body                 : 1
c_do                 : 56
c_for                : 57
c_forin              : 58
c_while              : 55
condition            : 42
condition_1          : 52
cycle                : 43
debug                : 21
empty                : 3 7 9 16 37 39 54 65 80 99 107 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137
exp_lv1              : 70 71 72
exp_lv1_1            : 73
exp_lv2              : 73 74 75 76 77 78 79 82 83
exp_lv3              : 81 82 83 85 86 87
exp_lv4              : 84 85 86 87
exp_lv5              : 88 89
expression           : 45 47 50 52 59 60 61 66 68 71 72 90
function             : 1 8
function_call        : 44
function_call_1      : 63
function_call_2      : 64 68 69
function_t           : 8
function_v           : 8
function_v1          : 15 18 20
method               : 92
method_1             : 105
method_1_1           : 106 109
method_t             : 105
method_v             : 108 109
np_operand_cte_bol   : 102
np_operand_cte_chr   : 104
np_operand_cte_flt   : 101
np_operand_cte_int   : 100
np_operand_cte_str   : 103
np_operator_stack    : 85 86 87
np_quad_1            : 84 85 86 87
np_var_1             : 10 26 27 28 29 30 31 32 33 34
np_var_2             : 4 5
np_var_a1            : 1
np_var_a2            : 1
np_var_b1            : 
np_var_b2            : 8
np_var_b3            : 8
np_var_b4            : 17 18 19 20
np_var_b5            : 17 18 19 20
np_var_c1            : 21
np_var_c2            : 21
np_var_c3            : 21
program              : 0
statutes             : 8 21 38 52 53 59 60 61 62
statutes_1           : 38
t_bool               : 13 24
t_graph              : 14 25
t_number             : 11 22
t_string             : 12 23
type                 : 2 17 18 19 20
var_cte              : 91
vars                 : 1 2 8 21
vars_1               : 2 5
vars_2               : 4 5
writing              : 41
writing_1            : 46 50 51
writing_2            : 49

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID np_var_a1 SCOLO np_var_a2 vars function body

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID np_var_a1 SCOLO np_var_a2 vars function body

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . np_var_a1 SCOLO np_var_a2 vars function body
    (118) np_var_a1 -> . empty
    (138) empty -> .

    SCOLO           reduce using rule 138 (empty -> .)

    np_var_a1                      shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) program -> PROGRAM ID np_var_a1 . SCOLO np_var_a2 vars function body

    SCOLO           shift and go to state 6


state 5

    (118) np_var_a1 -> empty .

    SCOLO           reduce using rule 118 (np_var_a1 -> empty .)


state 6

    (1) program -> PROGRAM ID np_var_a1 SCOLO . np_var_a2 vars function body
    (119) np_var_a2 -> . empty
    (138) empty -> .

    VAR             reduce using rule 138 (empty -> .)
    VOID            reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    STRING          reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)
    BOOL            reduce using rule 138 (empty -> .)
    NODE            reduce using rule 138 (empty -> .)
    ARC             reduce using rule 138 (empty -> .)
    UNDIRECTED      reduce using rule 138 (empty -> .)
    DIRECTED        reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)

    np_var_a2                      shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 . vars function body
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (138) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    STRING          reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)
    BOOL            reduce using rule 138 (empty -> .)
    NODE            reduce using rule 138 (empty -> .)
    ARC             reduce using rule 138 (empty -> .)
    UNDIRECTED      reduce using rule 138 (empty -> .)
    DIRECTED        reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)

    vars                           shift and go to state 9
    empty                          shift and go to state 11

state 8

    (119) np_var_a2 -> empty .

    VAR             reduce using rule 119 (np_var_a2 -> empty .)
    VOID            reduce using rule 119 (np_var_a2 -> empty .)
    INT             reduce using rule 119 (np_var_a2 -> empty .)
    FLOAT           reduce using rule 119 (np_var_a2 -> empty .)
    STRING          reduce using rule 119 (np_var_a2 -> empty .)
    CHAR            reduce using rule 119 (np_var_a2 -> empty .)
    BOOL            reduce using rule 119 (np_var_a2 -> empty .)
    NODE            reduce using rule 119 (np_var_a2 -> empty .)
    ARC             reduce using rule 119 (np_var_a2 -> empty .)
    UNDIRECTED      reduce using rule 119 (np_var_a2 -> empty .)
    DIRECTED        reduce using rule 119 (np_var_a2 -> empty .)
    MAIN            reduce using rule 119 (np_var_a2 -> empty .)


state 9

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars . function body
    (8) function -> . function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
    (9) function -> . empty
    (10) function_t -> . VOID np_var_1
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (138) empty -> .
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    VOID            shift and go to state 15
    MAIN            reduce using rule 138 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24
    NODE            shift and go to state 25
    ARC             shift and go to state 26
    UNDIRECTED      shift and go to state 27
    DIRECTED        shift and go to state 28

    function                       shift and go to state 12
    function_t                     shift and go to state 13
    empty                          shift and go to state 14
    t_number                       shift and go to state 16
    t_string                       shift and go to state 17
    t_bool                         shift and go to state 18
    t_graph                        shift and go to state 19

state 10

    (2) vars -> VAR . type vars_1 SCOLO vars
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24
    NODE            shift and go to state 25
    ARC             shift and go to state 26
    UNDIRECTED      shift and go to state 27
    DIRECTED        shift and go to state 28

    type                           shift and go to state 29
    t_number                       shift and go to state 30
    t_string                       shift and go to state 31
    t_bool                         shift and go to state 32
    t_graph                        shift and go to state 33

state 11

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    INT             reduce using rule 3 (vars -> empty .)
    FLOAT           reduce using rule 3 (vars -> empty .)
    STRING          reduce using rule 3 (vars -> empty .)
    CHAR            reduce using rule 3 (vars -> empty .)
    BOOL            reduce using rule 3 (vars -> empty .)
    NODE            reduce using rule 3 (vars -> empty .)
    ARC             reduce using rule 3 (vars -> empty .)
    UNDIRECTED      reduce using rule 3 (vars -> empty .)
    DIRECTED        reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)
    ID              reduce using rule 3 (vars -> empty .)
    PRINT           reduce using rule 3 (vars -> empty .)
    IF              reduce using rule 3 (vars -> empty .)
    WHILE           reduce using rule 3 (vars -> empty .)
    DO              reduce using rule 3 (vars -> empty .)
    FOR             reduce using rule 3 (vars -> empty .)
    RBRACK          reduce using rule 3 (vars -> empty .)


state 12

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars function . body
    (21) body -> . MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3

    MAIN            shift and go to state 35

    body                           shift and go to state 34

state 13

    (8) function -> function_t . ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function

    ID              shift and go to state 36


state 14

    (9) function -> empty .

    MAIN            reduce using rule 9 (function -> empty .)


state 15

    (10) function_t -> VOID . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 37
    empty                          shift and go to state 38

state 16

    (11) function_t -> t_number .

    ID              reduce using rule 11 (function_t -> t_number .)


state 17

    (12) function_t -> t_string .

    ID              reduce using rule 12 (function_t -> t_string .)


state 18

    (13) function_t -> t_bool .

    ID              reduce using rule 13 (function_t -> t_bool .)


state 19

    (14) function_t -> t_graph .

    ID              reduce using rule 14 (function_t -> t_graph .)


state 20

    (26) t_number -> INT . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 39
    empty                          shift and go to state 38

state 21

    (27) t_number -> FLOAT . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 40
    empty                          shift and go to state 38

state 22

    (28) t_string -> STRING . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 41
    empty                          shift and go to state 38

state 23

    (29) t_string -> CHAR . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 42
    empty                          shift and go to state 38

state 24

    (30) t_bool -> BOOL . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 43
    empty                          shift and go to state 38

state 25

    (31) t_graph -> NODE . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 44
    empty                          shift and go to state 38

state 26

    (32) t_graph -> ARC . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 45
    empty                          shift and go to state 38

state 27

    (33) t_graph -> UNDIRECTED . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 46
    empty                          shift and go to state 38

state 28

    (34) t_graph -> DIRECTED . np_var_1
    (128) np_var_1 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_1                       shift and go to state 47
    empty                          shift and go to state 38

state 29

    (2) vars -> VAR type . vars_1 SCOLO vars
    (4) vars_1 -> . ID np_var_2 vars_2
    (5) vars_1 -> . ID np_var_2 vars_2 COMA vars_1

    ID              shift and go to state 49

    vars_1                         shift and go to state 48

state 30

    (22) type -> t_number .

    ID              reduce using rule 22 (type -> t_number .)


state 31

    (23) type -> t_string .

    ID              reduce using rule 23 (type -> t_string .)


state 32

    (24) type -> t_bool .

    ID              reduce using rule 24 (type -> t_bool .)


state 33

    (25) type -> t_graph .

    ID              reduce using rule 25 (type -> t_graph .)


state 34

    (1) program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars function body .

    $end            reduce using rule 1 (program -> PROGRAM ID np_var_a1 SCOLO np_var_a2 vars function body .)


state 35

    (21) body -> MAIN . np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3
    (125) np_var_c1 -> . empty
    (138) empty -> .

    LPAREN          reduce using rule 138 (empty -> .)

    np_var_c1                      shift and go to state 50
    empty                          shift and go to state 51

state 36

    (8) function -> function_t ID . np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
    (121) np_var_b2 -> . empty
    (138) empty -> .

    LPAREN          reduce using rule 138 (empty -> .)

    np_var_b2                      shift and go to state 52
    empty                          shift and go to state 53

state 37

    (10) function_t -> VOID np_var_1 .

    ID              reduce using rule 10 (function_t -> VOID np_var_1 .)


state 38

    (128) np_var_1 -> empty .

    ID              reduce using rule 128 (np_var_1 -> empty .)


state 39

    (26) t_number -> INT np_var_1 .

    ID              reduce using rule 26 (t_number -> INT np_var_1 .)


state 40

    (27) t_number -> FLOAT np_var_1 .

    ID              reduce using rule 27 (t_number -> FLOAT np_var_1 .)


state 41

    (28) t_string -> STRING np_var_1 .

    ID              reduce using rule 28 (t_string -> STRING np_var_1 .)


state 42

    (29) t_string -> CHAR np_var_1 .

    ID              reduce using rule 29 (t_string -> CHAR np_var_1 .)


state 43

    (30) t_bool -> BOOL np_var_1 .

    ID              reduce using rule 30 (t_bool -> BOOL np_var_1 .)


state 44

    (31) t_graph -> NODE np_var_1 .

    ID              reduce using rule 31 (t_graph -> NODE np_var_1 .)


state 45

    (32) t_graph -> ARC np_var_1 .

    ID              reduce using rule 32 (t_graph -> ARC np_var_1 .)


state 46

    (33) t_graph -> UNDIRECTED np_var_1 .

    ID              reduce using rule 33 (t_graph -> UNDIRECTED np_var_1 .)


state 47

    (34) t_graph -> DIRECTED np_var_1 .

    ID              reduce using rule 34 (t_graph -> DIRECTED np_var_1 .)


state 48

    (2) vars -> VAR type vars_1 . SCOLO vars

    SCOLO           shift and go to state 54


state 49

    (4) vars_1 -> ID . np_var_2 vars_2
    (5) vars_1 -> ID . np_var_2 vars_2 COMA vars_1
    (129) np_var_2 -> . empty
    (138) empty -> .

    LCORCH          reduce using rule 138 (empty -> .)
    COMA            reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)

    np_var_2                       shift and go to state 55
    empty                          shift and go to state 56

state 50

    (21) body -> MAIN np_var_c1 . LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3

    LPAREN          shift and go to state 57


state 51

    (125) np_var_c1 -> empty .

    LPAREN          reduce using rule 125 (np_var_c1 -> empty .)


state 52

    (8) function -> function_t ID np_var_b2 . np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
    (122) np_var_b3 -> . empty
    (138) empty -> .

    LPAREN          reduce using rule 138 (empty -> .)

    np_var_b3                      shift and go to state 58
    empty                          shift and go to state 59

state 53

    (121) np_var_b2 -> empty .

    LPAREN          reduce using rule 121 (np_var_b2 -> empty .)


state 54

    (2) vars -> VAR type vars_1 SCOLO . vars
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (138) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    STRING          reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)
    BOOL            reduce using rule 138 (empty -> .)
    NODE            reduce using rule 138 (empty -> .)
    ARC             reduce using rule 138 (empty -> .)
    UNDIRECTED      reduce using rule 138 (empty -> .)
    DIRECTED        reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    RBRACK          reduce using rule 138 (empty -> .)

    vars                           shift and go to state 60
    empty                          shift and go to state 11

state 55

    (4) vars_1 -> ID np_var_2 . vars_2
    (5) vars_1 -> ID np_var_2 . vars_2 COMA vars_1
    (6) vars_2 -> . array_declare
    (7) vars_2 -> . empty
    (35) array_declare -> . LCORCH CTE_INT RCORCH array_declare_1
    (138) empty -> .

    LCORCH          shift and go to state 64
    COMA            reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)

    vars_2                         shift and go to state 61
    array_declare                  shift and go to state 62
    empty                          shift and go to state 63

state 56

    (129) np_var_2 -> empty .

    LCORCH          reduce using rule 129 (np_var_2 -> empty .)
    COMA            reduce using rule 129 (np_var_2 -> empty .)
    SCOLO           reduce using rule 129 (np_var_2 -> empty .)


state 57

    (21) body -> MAIN np_var_c1 LPAREN . RPAREN LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3

    RPAREN          shift and go to state 65


state 58

    (8) function -> function_t ID np_var_b2 np_var_b3 . LPAREN function_v RPAREN LBRACK vars statutes RBRACK function

    LPAREN          shift and go to state 66


state 59

    (122) np_var_b3 -> empty .

    LPAREN          reduce using rule 122 (np_var_b3 -> empty .)


state 60

    (2) vars -> VAR type vars_1 SCOLO vars .

    VOID            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    INT             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FLOAT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    STRING          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    CHAR            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    BOOL            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    NODE            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ARC             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    UNDIRECTED      reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DIRECTED        reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    MAIN            reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    ID              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    PRINT           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    IF              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    WHILE           reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    DO              reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    FOR             reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)
    RBRACK          reduce using rule 2 (vars -> VAR type vars_1 SCOLO vars .)


state 61

    (4) vars_1 -> ID np_var_2 vars_2 .
    (5) vars_1 -> ID np_var_2 vars_2 . COMA vars_1

    SCOLO           reduce using rule 4 (vars_1 -> ID np_var_2 vars_2 .)
    COMA            shift and go to state 67


state 62

    (6) vars_2 -> array_declare .

    COMA            reduce using rule 6 (vars_2 -> array_declare .)
    SCOLO           reduce using rule 6 (vars_2 -> array_declare .)


state 63

    (7) vars_2 -> empty .

    COMA            reduce using rule 7 (vars_2 -> empty .)
    SCOLO           reduce using rule 7 (vars_2 -> empty .)


state 64

    (35) array_declare -> LCORCH . CTE_INT RCORCH array_declare_1

    CTE_INT         shift and go to state 68


state 65

    (21) body -> MAIN np_var_c1 LPAREN RPAREN . LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3

    LBRACK          shift and go to state 69


state 66

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN . function_v RPAREN LBRACK vars statutes RBRACK function
    (15) function_v -> . function_v1
    (16) function_v -> . empty
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (138) empty -> .
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    RPAREN          reduce using rule 138 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24
    NODE            shift and go to state 25
    ARC             shift and go to state 26
    UNDIRECTED      shift and go to state 27
    DIRECTED        shift and go to state 28

    function_v                     shift and go to state 70
    function_v1                    shift and go to state 71
    empty                          shift and go to state 72
    type                           shift and go to state 73
    t_number                       shift and go to state 30
    t_string                       shift and go to state 31
    t_bool                         shift and go to state 32
    t_graph                        shift and go to state 33

state 67

    (5) vars_1 -> ID np_var_2 vars_2 COMA . vars_1
    (4) vars_1 -> . ID np_var_2 vars_2
    (5) vars_1 -> . ID np_var_2 vars_2 COMA vars_1

    ID              shift and go to state 49

    vars_1                         shift and go to state 74

state 68

    (35) array_declare -> LCORCH CTE_INT . RCORCH array_declare_1

    RCORCH          shift and go to state 75


state 69

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK . np_var_c2 vars statutes RBRACK debug np_var_c3
    (126) np_var_c2 -> . empty
    (138) empty -> .

    VAR             reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    RBRACK          reduce using rule 138 (empty -> .)

    np_var_c2                      shift and go to state 76
    empty                          shift and go to state 77

state 70

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v . RPAREN LBRACK vars statutes RBRACK function

    RPAREN          shift and go to state 78


state 71

    (15) function_v -> function_v1 .

    RPAREN          reduce using rule 15 (function_v -> function_v1 .)


state 72

    (16) function_v -> empty .

    RPAREN          reduce using rule 16 (function_v -> empty .)


state 73

    (17) function_v1 -> type . np_var_b4 ID np_var_b5
    (18) function_v1 -> type . np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> type . np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> type . np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (123) np_var_b4 -> . empty
    (138) empty -> .

    ID              reduce using rule 138 (empty -> .)

    np_var_b4                      shift and go to state 79
    empty                          shift and go to state 80

state 74

    (5) vars_1 -> ID np_var_2 vars_2 COMA vars_1 .

    SCOLO           reduce using rule 5 (vars_1 -> ID np_var_2 vars_2 COMA vars_1 .)


state 75

    (35) array_declare -> LCORCH CTE_INT RCORCH . array_declare_1
    (36) array_declare_1 -> . LCORCH CTE_INT RCORCH array_declare_1
    (37) array_declare_1 -> . empty
    (138) empty -> .

    LCORCH          shift and go to state 81
    COMA            reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    array_declare_1                shift and go to state 82
    empty                          shift and go to state 83

state 76

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 . vars statutes RBRACK debug np_var_c3
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (138) empty -> .

    VAR             shift and go to state 10
    ID              reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    RBRACK          reduce using rule 138 (empty -> .)

    vars                           shift and go to state 84
    empty                          shift and go to state 11

state 77

    (126) np_var_c2 -> empty .

    VAR             reduce using rule 126 (np_var_c2 -> empty .)
    ID              reduce using rule 126 (np_var_c2 -> empty .)
    PRINT           reduce using rule 126 (np_var_c2 -> empty .)
    IF              reduce using rule 126 (np_var_c2 -> empty .)
    WHILE           reduce using rule 126 (np_var_c2 -> empty .)
    DO              reduce using rule 126 (np_var_c2 -> empty .)
    FOR             reduce using rule 126 (np_var_c2 -> empty .)
    RBRACK          reduce using rule 126 (np_var_c2 -> empty .)


state 78

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN . LBRACK vars statutes RBRACK function

    LBRACK          shift and go to state 85


state 79

    (17) function_v1 -> type np_var_b4 . ID np_var_b5
    (18) function_v1 -> type np_var_b4 . ID np_var_b5 COMA function_v1
    (19) function_v1 -> type np_var_b4 . ID np_var_b5 array_declare
    (20) function_v1 -> type np_var_b4 . ID np_var_b5 array_declare COMA function_v1

    ID              shift and go to state 86


state 80

    (123) np_var_b4 -> empty .

    ID              reduce using rule 123 (np_var_b4 -> empty .)


state 81

    (36) array_declare_1 -> LCORCH . CTE_INT RCORCH array_declare_1

    CTE_INT         shift and go to state 87


state 82

    (35) array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .

    COMA            reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)
    SCOLO           reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)
    RPAREN          reduce using rule 35 (array_declare -> LCORCH CTE_INT RCORCH array_declare_1 .)


state 83

    (37) array_declare_1 -> empty .

    COMA            reduce using rule 37 (array_declare_1 -> empty .)
    SCOLO           reduce using rule 37 (array_declare_1 -> empty .)
    RPAREN          reduce using rule 37 (array_declare_1 -> empty .)


state 84

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars . statutes RBRACK debug np_var_c3
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes                       shift and go to state 88
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 85

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK . vars statutes RBRACK function
    (2) vars -> . VAR type vars_1 SCOLO vars
    (3) vars -> . empty
    (138) empty -> .

    VAR             shift and go to state 10
    ID              reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    RBRACK          reduce using rule 138 (empty -> .)

    vars                           shift and go to state 106
    empty                          shift and go to state 11

state 86

    (17) function_v1 -> type np_var_b4 ID . np_var_b5
    (18) function_v1 -> type np_var_b4 ID . np_var_b5 COMA function_v1
    (19) function_v1 -> type np_var_b4 ID . np_var_b5 array_declare
    (20) function_v1 -> type np_var_b4 ID . np_var_b5 array_declare COMA function_v1
    (124) np_var_b5 -> . empty
    (138) empty -> .

    COMA            reduce using rule 138 (empty -> .)
    LCORCH          reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    np_var_b5                      shift and go to state 107
    empty                          shift and go to state 108

state 87

    (36) array_declare_1 -> LCORCH CTE_INT . RCORCH array_declare_1

    RCORCH          shift and go to state 109


state 88

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes . RBRACK debug np_var_c3

    RBRACK          shift and go to state 110


state 89

    (38) statutes -> statutes_1 . statutes
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes_1                     shift and go to state 89
    statutes                       shift and go to state 111
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 90

    (39) statutes -> empty .

    RBRACK          reduce using rule 39 (statutes -> empty .)


state 91

    (40) statutes_1 -> assignation .

    ID              reduce using rule 40 (statutes_1 -> assignation .)
    PRINT           reduce using rule 40 (statutes_1 -> assignation .)
    IF              reduce using rule 40 (statutes_1 -> assignation .)
    WHILE           reduce using rule 40 (statutes_1 -> assignation .)
    DO              reduce using rule 40 (statutes_1 -> assignation .)
    FOR             reduce using rule 40 (statutes_1 -> assignation .)
    RBRACK          reduce using rule 40 (statutes_1 -> assignation .)


state 92

    (41) statutes_1 -> writing .

    ID              reduce using rule 41 (statutes_1 -> writing .)
    PRINT           reduce using rule 41 (statutes_1 -> writing .)
    IF              reduce using rule 41 (statutes_1 -> writing .)
    WHILE           reduce using rule 41 (statutes_1 -> writing .)
    DO              reduce using rule 41 (statutes_1 -> writing .)
    FOR             reduce using rule 41 (statutes_1 -> writing .)
    RBRACK          reduce using rule 41 (statutes_1 -> writing .)


state 93

    (42) statutes_1 -> condition .

    ID              reduce using rule 42 (statutes_1 -> condition .)
    PRINT           reduce using rule 42 (statutes_1 -> condition .)
    IF              reduce using rule 42 (statutes_1 -> condition .)
    WHILE           reduce using rule 42 (statutes_1 -> condition .)
    DO              reduce using rule 42 (statutes_1 -> condition .)
    FOR             reduce using rule 42 (statutes_1 -> condition .)
    RBRACK          reduce using rule 42 (statutes_1 -> condition .)


state 94

    (43) statutes_1 -> cycle .

    ID              reduce using rule 43 (statutes_1 -> cycle .)
    PRINT           reduce using rule 43 (statutes_1 -> cycle .)
    IF              reduce using rule 43 (statutes_1 -> cycle .)
    WHILE           reduce using rule 43 (statutes_1 -> cycle .)
    DO              reduce using rule 43 (statutes_1 -> cycle .)
    FOR             reduce using rule 43 (statutes_1 -> cycle .)
    RBRACK          reduce using rule 43 (statutes_1 -> cycle .)


state 95

    (44) statutes_1 -> function_call .

    ID              reduce using rule 44 (statutes_1 -> function_call .)
    PRINT           reduce using rule 44 (statutes_1 -> function_call .)
    IF              reduce using rule 44 (statutes_1 -> function_call .)
    WHILE           reduce using rule 44 (statutes_1 -> function_call .)
    DO              reduce using rule 44 (statutes_1 -> function_call .)
    FOR             reduce using rule 44 (statutes_1 -> function_call .)
    RBRACK          reduce using rule 44 (statutes_1 -> function_call .)


state 96

    (45) assignation -> ID . EQL expression SCOLO
    (63) function_call -> ID . LPAREN function_call_1 RPAREN SCOLO

    EQL             shift and go to state 112
    LPAREN          shift and go to state 113


state 97

    (46) writing -> PRINT . LPAREN writing_1 RPAREN SCOLO

    LPAREN          shift and go to state 114


state 98

    (52) condition -> IF . LPAREN expression RPAREN LBRACK statutes RBRACK condition_1

    LPAREN          shift and go to state 115


state 99

    (55) cycle -> c_while .

    ID              reduce using rule 55 (cycle -> c_while .)
    PRINT           reduce using rule 55 (cycle -> c_while .)
    IF              reduce using rule 55 (cycle -> c_while .)
    WHILE           reduce using rule 55 (cycle -> c_while .)
    DO              reduce using rule 55 (cycle -> c_while .)
    FOR             reduce using rule 55 (cycle -> c_while .)
    RBRACK          reduce using rule 55 (cycle -> c_while .)


state 100

    (56) cycle -> c_do .

    ID              reduce using rule 56 (cycle -> c_do .)
    PRINT           reduce using rule 56 (cycle -> c_do .)
    IF              reduce using rule 56 (cycle -> c_do .)
    WHILE           reduce using rule 56 (cycle -> c_do .)
    DO              reduce using rule 56 (cycle -> c_do .)
    FOR             reduce using rule 56 (cycle -> c_do .)
    RBRACK          reduce using rule 56 (cycle -> c_do .)


state 101

    (57) cycle -> c_for .

    ID              reduce using rule 57 (cycle -> c_for .)
    PRINT           reduce using rule 57 (cycle -> c_for .)
    IF              reduce using rule 57 (cycle -> c_for .)
    WHILE           reduce using rule 57 (cycle -> c_for .)
    DO              reduce using rule 57 (cycle -> c_for .)
    FOR             reduce using rule 57 (cycle -> c_for .)
    RBRACK          reduce using rule 57 (cycle -> c_for .)


state 102

    (58) cycle -> c_forin .

    ID              reduce using rule 58 (cycle -> c_forin .)
    PRINT           reduce using rule 58 (cycle -> c_forin .)
    IF              reduce using rule 58 (cycle -> c_forin .)
    WHILE           reduce using rule 58 (cycle -> c_forin .)
    DO              reduce using rule 58 (cycle -> c_forin .)
    FOR             reduce using rule 58 (cycle -> c_forin .)
    RBRACK          reduce using rule 58 (cycle -> c_forin .)


state 103

    (59) c_while -> WHILE . LPAREN expression RPAREN LBRACK statutes RBRACK

    LPAREN          shift and go to state 116


state 104

    (60) c_do -> DO . LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO

    LBRACK          shift and go to state 117


state 105

    (61) c_for -> FOR . LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> FOR . LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    LPAREN          shift and go to state 118


state 106

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars . statutes RBRACK function
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes                       shift and go to state 119
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 107

    (17) function_v1 -> type np_var_b4 ID np_var_b5 .
    (18) function_v1 -> type np_var_b4 ID np_var_b5 . COMA function_v1
    (19) function_v1 -> type np_var_b4 ID np_var_b5 . array_declare
    (20) function_v1 -> type np_var_b4 ID np_var_b5 . array_declare COMA function_v1
    (35) array_declare -> . LCORCH CTE_INT RCORCH array_declare_1

    RPAREN          reduce using rule 17 (function_v1 -> type np_var_b4 ID np_var_b5 .)
    COMA            shift and go to state 120
    LCORCH          shift and go to state 64

    array_declare                  shift and go to state 121

state 108

    (124) np_var_b5 -> empty .

    COMA            reduce using rule 124 (np_var_b5 -> empty .)
    LCORCH          reduce using rule 124 (np_var_b5 -> empty .)
    RPAREN          reduce using rule 124 (np_var_b5 -> empty .)


state 109

    (36) array_declare_1 -> LCORCH CTE_INT RCORCH . array_declare_1
    (36) array_declare_1 -> . LCORCH CTE_INT RCORCH array_declare_1
    (37) array_declare_1 -> . empty
    (138) empty -> .

    LCORCH          shift and go to state 81
    COMA            reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    array_declare_1                shift and go to state 122
    empty                          shift and go to state 83

state 110

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK . debug np_var_c3
    (137) debug -> . empty
    (138) empty -> .

    $end            reduce using rule 138 (empty -> .)

    debug                          shift and go to state 123
    empty                          shift and go to state 124

state 111

    (38) statutes -> statutes_1 statutes .

    RBRACK          reduce using rule 38 (statutes -> statutes_1 statutes .)


state 112

    (45) assignation -> ID EQL . expression SCOLO
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 126
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 113

    (63) function_call -> ID LPAREN . function_call_1 RPAREN SCOLO
    (64) function_call_1 -> . function_call_2
    (65) function_call_1 -> . empty
    (66) function_call_2 -> . expression
    (67) function_call_2 -> . ID
    (68) function_call_2 -> . expression SCOLO function_call_2
    (69) function_call_2 -> . ID SCOLO function_call_2
    (138) empty -> .
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    ID              shift and go to state 141
    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

  ! RPAREN          [ reduce using rule 138 (empty -> .) ]

    function_call_1                shift and go to state 142
    function_call_2                shift and go to state 143
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 114

    (46) writing -> PRINT LPAREN . writing_1 RPAREN SCOLO
    (47) writing_1 -> . expression
    (48) writing_1 -> . CTE_STRING
    (49) writing_1 -> . writing_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (50) writing_2 -> . expression SUMA writing_1
    (51) writing_2 -> . CTE_STRING SUMA writing_1
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    CTE_STRING      shift and go to state 148
    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_CHAR        shift and go to state 140

    writing_1                      shift and go to state 146
    expression                     shift and go to state 147
    writing_2                      shift and go to state 149
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 115

    (52) condition -> IF LPAREN . expression RPAREN LBRACK statutes RBRACK condition_1
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 150
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 116

    (59) c_while -> WHILE LPAREN . expression RPAREN LBRACK statutes RBRACK
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 151
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 117

    (60) c_do -> DO LBRACK . statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes                       shift and go to state 152
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 118

    (61) c_for -> FOR LPAREN . ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> FOR LPAREN . ID IN ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 153


state 119

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes . RBRACK function

    RBRACK          shift and go to state 154


state 120

    (18) function_v1 -> type np_var_b4 ID np_var_b5 COMA . function_v1
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24
    NODE            shift and go to state 25
    ARC             shift and go to state 26
    UNDIRECTED      shift and go to state 27
    DIRECTED        shift and go to state 28

    type                           shift and go to state 73
    function_v1                    shift and go to state 155
    t_number                       shift and go to state 30
    t_string                       shift and go to state 31
    t_bool                         shift and go to state 32
    t_graph                        shift and go to state 33

state 121

    (19) function_v1 -> type np_var_b4 ID np_var_b5 array_declare .
    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare . COMA function_v1

    RPAREN          reduce using rule 19 (function_v1 -> type np_var_b4 ID np_var_b5 array_declare .)
    COMA            shift and go to state 156


state 122

    (36) array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .

    COMA            reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)
    SCOLO           reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)
    RPAREN          reduce using rule 36 (array_declare_1 -> LCORCH CTE_INT RCORCH array_declare_1 .)


state 123

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK debug . np_var_c3
    (127) np_var_c3 -> . empty
    (138) empty -> .

    $end            reduce using rule 138 (empty -> .)

    np_var_c3                      shift and go to state 157
    empty                          shift and go to state 158

state 124

    (137) debug -> empty .

    $end            reduce using rule 137 (debug -> empty .)


state 125

    (93) exp_lv5 -> ID .
    (94) exp_lv5 -> ID . array_access
    (105) method -> ID . DOT method_t LPAREN method_1 RPAREN
    (95) array_access -> . LCORCH arrary_access_1 RCORCH arrary_access_2

    MUL             reduce using rule 93 (exp_lv5 -> ID .)
    DIV             reduce using rule 93 (exp_lv5 -> ID .)
    RESD            reduce using rule 93 (exp_lv5 -> ID .)
    SUMA            reduce using rule 93 (exp_lv5 -> ID .)
    SUB             reduce using rule 93 (exp_lv5 -> ID .)
    LESST           reduce using rule 93 (exp_lv5 -> ID .)
    MORET           reduce using rule 93 (exp_lv5 -> ID .)
    LESSEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    MOREEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    EQUALTO         reduce using rule 93 (exp_lv5 -> ID .)
    NOTEQUALTO      reduce using rule 93 (exp_lv5 -> ID .)
    AND             reduce using rule 93 (exp_lv5 -> ID .)
    OR              reduce using rule 93 (exp_lv5 -> ID .)
    SCOLO           reduce using rule 93 (exp_lv5 -> ID .)
    RPAREN          reduce using rule 93 (exp_lv5 -> ID .)
    LPAREN          reduce using rule 93 (exp_lv5 -> ID .)
    DOT             shift and go to state 160
    LCORCH          shift and go to state 161

    array_access                   shift and go to state 159

state 126

    (45) assignation -> ID EQL expression . SCOLO

    SCOLO           shift and go to state 162


state 127

    (70) expression -> exp_lv1 .
    (71) expression -> exp_lv1 . AND expression
    (72) expression -> exp_lv1 . OR expression

    SCOLO           reduce using rule 70 (expression -> exp_lv1 .)
    RPAREN          reduce using rule 70 (expression -> exp_lv1 .)
    SUMA            reduce using rule 70 (expression -> exp_lv1 .)
    LPAREN          reduce using rule 70 (expression -> exp_lv1 .)
    AND             shift and go to state 163
    OR              shift and go to state 164


state 128

    (73) exp_lv1 -> exp_lv2 . exp_lv1_1
    (74) exp_lv1_1 -> . LESST exp_lv2
    (75) exp_lv1_1 -> . MORET exp_lv2
    (76) exp_lv1_1 -> . LESSEQUAL exp_lv2
    (77) exp_lv1_1 -> . MOREEQUAL exp_lv2
    (78) exp_lv1_1 -> . EQUALTO exp_lv2
    (79) exp_lv1_1 -> . NOTEQUALTO exp_lv2
    (80) exp_lv1_1 -> . empty
    (138) empty -> .

    LESST           shift and go to state 166
    MORET           shift and go to state 167
    LESSEQUAL       shift and go to state 168
    MOREEQUAL       shift and go to state 169
    EQUALTO         shift and go to state 170
    NOTEQUALTO      shift and go to state 171
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    exp_lv1_1                      shift and go to state 165
    empty                          shift and go to state 172

state 129

    (81) exp_lv2 -> exp_lv3 .
    (82) exp_lv2 -> exp_lv3 . SUMA exp_lv2
    (83) exp_lv2 -> exp_lv3 . SUB exp_lv2

  ! shift/reduce conflict for SUMA resolved as shift
    LESST           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    MORET           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    LESSEQUAL       reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    MOREEQUAL       reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    EQUALTO         reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    NOTEQUALTO      reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    AND             reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    OR              reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    SCOLO           reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    RPAREN          reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    LPAREN          reduce using rule 81 (exp_lv2 -> exp_lv3 .)
    SUMA            shift and go to state 173
    SUB             shift and go to state 174

  ! SUMA            [ reduce using rule 81 (exp_lv2 -> exp_lv3 .) ]


state 130

    (84) exp_lv3 -> exp_lv4 . np_quad_1
    (85) exp_lv3 -> exp_lv4 . np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> exp_lv4 . np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> exp_lv4 . np_quad_1 RESD np_operator_stack exp_lv3
    (136) np_quad_1 -> . empty
    (138) empty -> .

    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    np_quad_1                      shift and go to state 175
    empty                          shift and go to state 176

state 131

    (88) exp_lv4 -> exp_lv5 .

    MUL             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    DIV             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    RESD            reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    SUMA            reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    SUB             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    LESST           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    MORET           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    LESSEQUAL       reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    MOREEQUAL       reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    EQUALTO         reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    NOTEQUALTO      reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    AND             reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    OR              reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    SCOLO           reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    RPAREN          reduce using rule 88 (exp_lv4 -> exp_lv5 .)
    LPAREN          reduce using rule 88 (exp_lv4 -> exp_lv5 .)


state 132

    (89) exp_lv4 -> NOT . exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv5                        shift and go to state 177
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 133

    (90) exp_lv5 -> RPAREN . expression LPAREN
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 178
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 134

    (91) exp_lv5 -> var_cte .

    MUL             reduce using rule 91 (exp_lv5 -> var_cte .)
    DIV             reduce using rule 91 (exp_lv5 -> var_cte .)
    RESD            reduce using rule 91 (exp_lv5 -> var_cte .)
    SUMA            reduce using rule 91 (exp_lv5 -> var_cte .)
    SUB             reduce using rule 91 (exp_lv5 -> var_cte .)
    LESST           reduce using rule 91 (exp_lv5 -> var_cte .)
    MORET           reduce using rule 91 (exp_lv5 -> var_cte .)
    LESSEQUAL       reduce using rule 91 (exp_lv5 -> var_cte .)
    MOREEQUAL       reduce using rule 91 (exp_lv5 -> var_cte .)
    EQUALTO         reduce using rule 91 (exp_lv5 -> var_cte .)
    NOTEQUALTO      reduce using rule 91 (exp_lv5 -> var_cte .)
    AND             reduce using rule 91 (exp_lv5 -> var_cte .)
    OR              reduce using rule 91 (exp_lv5 -> var_cte .)
    SCOLO           reduce using rule 91 (exp_lv5 -> var_cte .)
    RPAREN          reduce using rule 91 (exp_lv5 -> var_cte .)
    LPAREN          reduce using rule 91 (exp_lv5 -> var_cte .)


state 135

    (92) exp_lv5 -> method .

    MUL             reduce using rule 92 (exp_lv5 -> method .)
    DIV             reduce using rule 92 (exp_lv5 -> method .)
    RESD            reduce using rule 92 (exp_lv5 -> method .)
    SUMA            reduce using rule 92 (exp_lv5 -> method .)
    SUB             reduce using rule 92 (exp_lv5 -> method .)
    LESST           reduce using rule 92 (exp_lv5 -> method .)
    MORET           reduce using rule 92 (exp_lv5 -> method .)
    LESSEQUAL       reduce using rule 92 (exp_lv5 -> method .)
    MOREEQUAL       reduce using rule 92 (exp_lv5 -> method .)
    EQUALTO         reduce using rule 92 (exp_lv5 -> method .)
    NOTEQUALTO      reduce using rule 92 (exp_lv5 -> method .)
    AND             reduce using rule 92 (exp_lv5 -> method .)
    OR              reduce using rule 92 (exp_lv5 -> method .)
    SCOLO           reduce using rule 92 (exp_lv5 -> method .)
    RPAREN          reduce using rule 92 (exp_lv5 -> method .)
    LPAREN          reduce using rule 92 (exp_lv5 -> method .)


state 136

    (100) var_cte -> CTE_INT . np_operand_cte_int
    (130) np_operand_cte_int -> . empty
    (138) empty -> .

    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    np_operand_cte_int             shift and go to state 179
    empty                          shift and go to state 180

state 137

    (101) var_cte -> CTE_FLO . np_operand_cte_flt
    (131) np_operand_cte_flt -> . empty
    (138) empty -> .

    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    np_operand_cte_flt             shift and go to state 181
    empty                          shift and go to state 182

state 138

    (102) var_cte -> CTE_BOO . np_operand_cte_bol
    (134) np_operand_cte_bol -> . empty
    (138) empty -> .

    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    np_operand_cte_bol             shift and go to state 183
    empty                          shift and go to state 184

state 139

    (103) var_cte -> CTE_STRING . np_operand_cte_str
    (133) np_operand_cte_str -> . empty
    (138) empty -> .

    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    np_operand_cte_str             shift and go to state 185
    empty                          shift and go to state 186

state 140

    (104) var_cte -> CTE_CHAR . np_operand_cte_chr
    (132) np_operand_cte_chr -> . empty
    (138) empty -> .

    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    np_operand_cte_chr             shift and go to state 187
    empty                          shift and go to state 188

state 141

    (67) function_call_2 -> ID .
    (69) function_call_2 -> ID . SCOLO function_call_2
    (93) exp_lv5 -> ID .
    (94) exp_lv5 -> ID . array_access
    (105) method -> ID . DOT method_t LPAREN method_1 RPAREN
    (95) array_access -> . LCORCH arrary_access_1 RCORCH arrary_access_2

  ! shift/reduce conflict for SCOLO resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 67 (function_call_2 -> ID .)
    RPAREN          reduce using rule 67 (function_call_2 -> ID .)
    SCOLO           shift and go to state 189
    MUL             reduce using rule 93 (exp_lv5 -> ID .)
    DIV             reduce using rule 93 (exp_lv5 -> ID .)
    RESD            reduce using rule 93 (exp_lv5 -> ID .)
    SUMA            reduce using rule 93 (exp_lv5 -> ID .)
    SUB             reduce using rule 93 (exp_lv5 -> ID .)
    LESST           reduce using rule 93 (exp_lv5 -> ID .)
    MORET           reduce using rule 93 (exp_lv5 -> ID .)
    LESSEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    MOREEQUAL       reduce using rule 93 (exp_lv5 -> ID .)
    EQUALTO         reduce using rule 93 (exp_lv5 -> ID .)
    NOTEQUALTO      reduce using rule 93 (exp_lv5 -> ID .)
    AND             reduce using rule 93 (exp_lv5 -> ID .)
    OR              reduce using rule 93 (exp_lv5 -> ID .)
    DOT             shift and go to state 160
    LCORCH          shift and go to state 161

  ! SCOLO           [ reduce using rule 93 (exp_lv5 -> ID .) ]
  ! RPAREN          [ reduce using rule 93 (exp_lv5 -> ID .) ]

    array_access                   shift and go to state 159

state 142

    (63) function_call -> ID LPAREN function_call_1 . RPAREN SCOLO

    RPAREN          shift and go to state 190


state 143

    (64) function_call_1 -> function_call_2 .

    RPAREN          reduce using rule 64 (function_call_1 -> function_call_2 .)


state 144

    (65) function_call_1 -> empty .

    RPAREN          reduce using rule 65 (function_call_1 -> empty .)


state 145

    (66) function_call_2 -> expression .
    (68) function_call_2 -> expression . SCOLO function_call_2

    RPAREN          reduce using rule 66 (function_call_2 -> expression .)
    SCOLO           shift and go to state 191


state 146

    (46) writing -> PRINT LPAREN writing_1 . RPAREN SCOLO

    RPAREN          shift and go to state 192


state 147

    (47) writing_1 -> expression .
    (50) writing_2 -> expression . SUMA writing_1

    RPAREN          reduce using rule 47 (writing_1 -> expression .)
    SUMA            shift and go to state 193


state 148

    (48) writing_1 -> CTE_STRING .
    (51) writing_2 -> CTE_STRING . SUMA writing_1
    (103) var_cte -> CTE_STRING . np_operand_cte_str
    (133) np_operand_cte_str -> . empty
    (138) empty -> .

  ! shift/reduce conflict for SUMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 48 (writing_1 -> CTE_STRING .)
    RPAREN          reduce using rule 48 (writing_1 -> CTE_STRING .)
    SUMA            shift and go to state 194
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)

  ! SUMA            [ reduce using rule 138 (empty -> .) ]
  ! RPAREN          [ reduce using rule 138 (empty -> .) ]

    np_operand_cte_str             shift and go to state 185
    empty                          shift and go to state 186

state 149

    (49) writing_1 -> writing_2 .

    RPAREN          reduce using rule 49 (writing_1 -> writing_2 .)


state 150

    (52) condition -> IF LPAREN expression . RPAREN LBRACK statutes RBRACK condition_1

    RPAREN          shift and go to state 195


state 151

    (59) c_while -> WHILE LPAREN expression . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 196


state 152

    (60) c_do -> DO LBRACK statutes . RBRACK WHILE LPAREN expression RPAREN SCOLO

    RBRACK          shift and go to state 197


state 153

    (61) c_for -> FOR LPAREN ID . SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> FOR LPAREN ID . IN ID RPAREN LBRACK statutes RBRACK

    SCOLO           shift and go to state 198
    IN              shift and go to state 199


state 154

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK . function
    (8) function -> . function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function
    (9) function -> . empty
    (10) function_t -> . VOID np_var_1
    (11) function_t -> . t_number
    (12) function_t -> . t_string
    (13) function_t -> . t_bool
    (14) function_t -> . t_graph
    (138) empty -> .
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    VOID            shift and go to state 15
    MAIN            reduce using rule 138 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24
    NODE            shift and go to state 25
    ARC             shift and go to state 26
    UNDIRECTED      shift and go to state 27
    DIRECTED        shift and go to state 28

    function_t                     shift and go to state 13
    function                       shift and go to state 200
    empty                          shift and go to state 14
    t_number                       shift and go to state 16
    t_string                       shift and go to state 17
    t_bool                         shift and go to state 18
    t_graph                        shift and go to state 19

state 155

    (18) function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1 .

    RPAREN          reduce using rule 18 (function_v1 -> type np_var_b4 ID np_var_b5 COMA function_v1 .)


state 156

    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA . function_v1
    (17) function_v1 -> . type np_var_b4 ID np_var_b5
    (18) function_v1 -> . type np_var_b4 ID np_var_b5 COMA function_v1
    (19) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare
    (20) function_v1 -> . type np_var_b4 ID np_var_b5 array_declare COMA function_v1
    (22) type -> . t_number
    (23) type -> . t_string
    (24) type -> . t_bool
    (25) type -> . t_graph
    (26) t_number -> . INT np_var_1
    (27) t_number -> . FLOAT np_var_1
    (28) t_string -> . STRING np_var_1
    (29) t_string -> . CHAR np_var_1
    (30) t_bool -> . BOOL np_var_1
    (31) t_graph -> . NODE np_var_1
    (32) t_graph -> . ARC np_var_1
    (33) t_graph -> . UNDIRECTED np_var_1
    (34) t_graph -> . DIRECTED np_var_1

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24
    NODE            shift and go to state 25
    ARC             shift and go to state 26
    UNDIRECTED      shift and go to state 27
    DIRECTED        shift and go to state 28

    type                           shift and go to state 73
    function_v1                    shift and go to state 201
    t_number                       shift and go to state 30
    t_string                       shift and go to state 31
    t_bool                         shift and go to state 32
    t_graph                        shift and go to state 33

state 157

    (21) body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3 .

    $end            reduce using rule 21 (body -> MAIN np_var_c1 LPAREN RPAREN LBRACK np_var_c2 vars statutes RBRACK debug np_var_c3 .)


state 158

    (127) np_var_c3 -> empty .

    $end            reduce using rule 127 (np_var_c3 -> empty .)


state 159

    (94) exp_lv5 -> ID array_access .

    MUL             reduce using rule 94 (exp_lv5 -> ID array_access .)
    DIV             reduce using rule 94 (exp_lv5 -> ID array_access .)
    RESD            reduce using rule 94 (exp_lv5 -> ID array_access .)
    SUMA            reduce using rule 94 (exp_lv5 -> ID array_access .)
    SUB             reduce using rule 94 (exp_lv5 -> ID array_access .)
    LESST           reduce using rule 94 (exp_lv5 -> ID array_access .)
    MORET           reduce using rule 94 (exp_lv5 -> ID array_access .)
    LESSEQUAL       reduce using rule 94 (exp_lv5 -> ID array_access .)
    MOREEQUAL       reduce using rule 94 (exp_lv5 -> ID array_access .)
    EQUALTO         reduce using rule 94 (exp_lv5 -> ID array_access .)
    NOTEQUALTO      reduce using rule 94 (exp_lv5 -> ID array_access .)
    AND             reduce using rule 94 (exp_lv5 -> ID array_access .)
    OR              reduce using rule 94 (exp_lv5 -> ID array_access .)
    SCOLO           reduce using rule 94 (exp_lv5 -> ID array_access .)
    RPAREN          reduce using rule 94 (exp_lv5 -> ID array_access .)
    LPAREN          reduce using rule 94 (exp_lv5 -> ID array_access .)


state 160

    (105) method -> ID DOT . method_t LPAREN method_1 RPAREN
    (110) method_t -> . DEG
    (111) method_t -> . SHORTPATH
    (112) method_t -> . DIAMETER
    (113) method_t -> . ADD
    (114) method_t -> . DELETE
    (115) method_t -> . ARC

    DEG             shift and go to state 203
    SHORTPATH       shift and go to state 204
    DIAMETER        shift and go to state 205
    ADD             shift and go to state 206
    DELETE          shift and go to state 207
    ARC             shift and go to state 208

    method_t                       shift and go to state 202

state 161

    (95) array_access -> LCORCH . arrary_access_1 RCORCH arrary_access_2
    (96) arrary_access_1 -> . CTE_INT
    (97) arrary_access_1 -> . ID

    CTE_INT         shift and go to state 210
    ID              shift and go to state 211

    arrary_access_1                shift and go to state 209

state 162

    (45) assignation -> ID EQL expression SCOLO .

    ID              reduce using rule 45 (assignation -> ID EQL expression SCOLO .)
    PRINT           reduce using rule 45 (assignation -> ID EQL expression SCOLO .)
    IF              reduce using rule 45 (assignation -> ID EQL expression SCOLO .)
    WHILE           reduce using rule 45 (assignation -> ID EQL expression SCOLO .)
    DO              reduce using rule 45 (assignation -> ID EQL expression SCOLO .)
    FOR             reduce using rule 45 (assignation -> ID EQL expression SCOLO .)
    RBRACK          reduce using rule 45 (assignation -> ID EQL expression SCOLO .)
    RPAREN          reduce using rule 45 (assignation -> ID EQL expression SCOLO .)


state 163

    (71) expression -> exp_lv1 AND . expression
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv1                        shift and go to state 127
    expression                     shift and go to state 212
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 164

    (72) expression -> exp_lv1 OR . expression
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv1                        shift and go to state 127
    expression                     shift and go to state 213
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 165

    (73) exp_lv1 -> exp_lv2 exp_lv1_1 .

    AND             reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    OR              reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    SCOLO           reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    RPAREN          reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    SUMA            reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)
    LPAREN          reduce using rule 73 (exp_lv1 -> exp_lv2 exp_lv1_1 .)


state 166

    (74) exp_lv1_1 -> LESST . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv2                        shift and go to state 214
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 167

    (75) exp_lv1_1 -> MORET . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv2                        shift and go to state 215
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 168

    (76) exp_lv1_1 -> LESSEQUAL . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv2                        shift and go to state 216
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 169

    (77) exp_lv1_1 -> MOREEQUAL . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv2                        shift and go to state 217
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 170

    (78) exp_lv1_1 -> EQUALTO . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv2                        shift and go to state 218
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 171

    (79) exp_lv1_1 -> NOTEQUALTO . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv2                        shift and go to state 219
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 172

    (80) exp_lv1_1 -> empty .

    AND             reduce using rule 80 (exp_lv1_1 -> empty .)
    OR              reduce using rule 80 (exp_lv1_1 -> empty .)
    SCOLO           reduce using rule 80 (exp_lv1_1 -> empty .)
    RPAREN          reduce using rule 80 (exp_lv1_1 -> empty .)
    SUMA            reduce using rule 80 (exp_lv1_1 -> empty .)
    LPAREN          reduce using rule 80 (exp_lv1_1 -> empty .)


state 173

    (82) exp_lv2 -> exp_lv3 SUMA . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv3                        shift and go to state 129
    exp_lv2                        shift and go to state 220
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 174

    (83) exp_lv2 -> exp_lv3 SUB . exp_lv2
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv3                        shift and go to state 129
    exp_lv2                        shift and go to state 221
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 175

    (84) exp_lv3 -> exp_lv4 np_quad_1 .
    (85) exp_lv3 -> exp_lv4 np_quad_1 . MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> exp_lv4 np_quad_1 . DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> exp_lv4 np_quad_1 . RESD np_operator_stack exp_lv3

    SUMA            reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    SUB             reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    LESST           reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    MORET           reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    LESSEQUAL       reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    MOREEQUAL       reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    EQUALTO         reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    NOTEQUALTO      reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    AND             reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    OR              reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    SCOLO           reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    RPAREN          reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    LPAREN          reduce using rule 84 (exp_lv3 -> exp_lv4 np_quad_1 .)
    MUL             shift and go to state 222
    DIV             shift and go to state 223
    RESD            shift and go to state 224


state 176

    (136) np_quad_1 -> empty .

    MUL             reduce using rule 136 (np_quad_1 -> empty .)
    DIV             reduce using rule 136 (np_quad_1 -> empty .)
    RESD            reduce using rule 136 (np_quad_1 -> empty .)
    SUMA            reduce using rule 136 (np_quad_1 -> empty .)
    SUB             reduce using rule 136 (np_quad_1 -> empty .)
    LESST           reduce using rule 136 (np_quad_1 -> empty .)
    MORET           reduce using rule 136 (np_quad_1 -> empty .)
    LESSEQUAL       reduce using rule 136 (np_quad_1 -> empty .)
    MOREEQUAL       reduce using rule 136 (np_quad_1 -> empty .)
    EQUALTO         reduce using rule 136 (np_quad_1 -> empty .)
    NOTEQUALTO      reduce using rule 136 (np_quad_1 -> empty .)
    AND             reduce using rule 136 (np_quad_1 -> empty .)
    OR              reduce using rule 136 (np_quad_1 -> empty .)
    SCOLO           reduce using rule 136 (np_quad_1 -> empty .)
    RPAREN          reduce using rule 136 (np_quad_1 -> empty .)
    LPAREN          reduce using rule 136 (np_quad_1 -> empty .)


state 177

    (89) exp_lv4 -> NOT exp_lv5 .

    MUL             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    DIV             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    RESD            reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    SUMA            reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    SUB             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    LESST           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    MORET           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    LESSEQUAL       reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    MOREEQUAL       reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    EQUALTO         reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    NOTEQUALTO      reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    AND             reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    OR              reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    SCOLO           reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    RPAREN          reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)
    LPAREN          reduce using rule 89 (exp_lv4 -> NOT exp_lv5 .)


state 178

    (90) exp_lv5 -> RPAREN expression . LPAREN

    LPAREN          shift and go to state 225


state 179

    (100) var_cte -> CTE_INT np_operand_cte_int .

    MUL             reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    DIV             reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    RESD            reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    SUMA            reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    SUB             reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    LESST           reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    MORET           reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    LESSEQUAL       reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    MOREEQUAL       reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    EQUALTO         reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    NOTEQUALTO      reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    AND             reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    OR              reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    SCOLO           reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    RPAREN          reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)
    LPAREN          reduce using rule 100 (var_cte -> CTE_INT np_operand_cte_int .)


state 180

    (130) np_operand_cte_int -> empty .

    MUL             reduce using rule 130 (np_operand_cte_int -> empty .)
    DIV             reduce using rule 130 (np_operand_cte_int -> empty .)
    RESD            reduce using rule 130 (np_operand_cte_int -> empty .)
    SUMA            reduce using rule 130 (np_operand_cte_int -> empty .)
    SUB             reduce using rule 130 (np_operand_cte_int -> empty .)
    LESST           reduce using rule 130 (np_operand_cte_int -> empty .)
    MORET           reduce using rule 130 (np_operand_cte_int -> empty .)
    LESSEQUAL       reduce using rule 130 (np_operand_cte_int -> empty .)
    MOREEQUAL       reduce using rule 130 (np_operand_cte_int -> empty .)
    EQUALTO         reduce using rule 130 (np_operand_cte_int -> empty .)
    NOTEQUALTO      reduce using rule 130 (np_operand_cte_int -> empty .)
    AND             reduce using rule 130 (np_operand_cte_int -> empty .)
    OR              reduce using rule 130 (np_operand_cte_int -> empty .)
    SCOLO           reduce using rule 130 (np_operand_cte_int -> empty .)
    RPAREN          reduce using rule 130 (np_operand_cte_int -> empty .)
    LPAREN          reduce using rule 130 (np_operand_cte_int -> empty .)


state 181

    (101) var_cte -> CTE_FLO np_operand_cte_flt .

    MUL             reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    DIV             reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    RESD            reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    SUMA            reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    SUB             reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    LESST           reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    MORET           reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    LESSEQUAL       reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    MOREEQUAL       reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    EQUALTO         reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    NOTEQUALTO      reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    AND             reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    OR              reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    SCOLO           reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    RPAREN          reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)
    LPAREN          reduce using rule 101 (var_cte -> CTE_FLO np_operand_cte_flt .)


state 182

    (131) np_operand_cte_flt -> empty .

    MUL             reduce using rule 131 (np_operand_cte_flt -> empty .)
    DIV             reduce using rule 131 (np_operand_cte_flt -> empty .)
    RESD            reduce using rule 131 (np_operand_cte_flt -> empty .)
    SUMA            reduce using rule 131 (np_operand_cte_flt -> empty .)
    SUB             reduce using rule 131 (np_operand_cte_flt -> empty .)
    LESST           reduce using rule 131 (np_operand_cte_flt -> empty .)
    MORET           reduce using rule 131 (np_operand_cte_flt -> empty .)
    LESSEQUAL       reduce using rule 131 (np_operand_cte_flt -> empty .)
    MOREEQUAL       reduce using rule 131 (np_operand_cte_flt -> empty .)
    EQUALTO         reduce using rule 131 (np_operand_cte_flt -> empty .)
    NOTEQUALTO      reduce using rule 131 (np_operand_cte_flt -> empty .)
    AND             reduce using rule 131 (np_operand_cte_flt -> empty .)
    OR              reduce using rule 131 (np_operand_cte_flt -> empty .)
    SCOLO           reduce using rule 131 (np_operand_cte_flt -> empty .)
    RPAREN          reduce using rule 131 (np_operand_cte_flt -> empty .)
    LPAREN          reduce using rule 131 (np_operand_cte_flt -> empty .)


state 183

    (102) var_cte -> CTE_BOO np_operand_cte_bol .

    MUL             reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    DIV             reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    RESD            reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    SUMA            reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    SUB             reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    LESST           reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    MORET           reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    LESSEQUAL       reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    MOREEQUAL       reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    EQUALTO         reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    NOTEQUALTO      reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    AND             reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    OR              reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    SCOLO           reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    RPAREN          reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)
    LPAREN          reduce using rule 102 (var_cte -> CTE_BOO np_operand_cte_bol .)


state 184

    (134) np_operand_cte_bol -> empty .

    MUL             reduce using rule 134 (np_operand_cte_bol -> empty .)
    DIV             reduce using rule 134 (np_operand_cte_bol -> empty .)
    RESD            reduce using rule 134 (np_operand_cte_bol -> empty .)
    SUMA            reduce using rule 134 (np_operand_cte_bol -> empty .)
    SUB             reduce using rule 134 (np_operand_cte_bol -> empty .)
    LESST           reduce using rule 134 (np_operand_cte_bol -> empty .)
    MORET           reduce using rule 134 (np_operand_cte_bol -> empty .)
    LESSEQUAL       reduce using rule 134 (np_operand_cte_bol -> empty .)
    MOREEQUAL       reduce using rule 134 (np_operand_cte_bol -> empty .)
    EQUALTO         reduce using rule 134 (np_operand_cte_bol -> empty .)
    NOTEQUALTO      reduce using rule 134 (np_operand_cte_bol -> empty .)
    AND             reduce using rule 134 (np_operand_cte_bol -> empty .)
    OR              reduce using rule 134 (np_operand_cte_bol -> empty .)
    SCOLO           reduce using rule 134 (np_operand_cte_bol -> empty .)
    RPAREN          reduce using rule 134 (np_operand_cte_bol -> empty .)
    LPAREN          reduce using rule 134 (np_operand_cte_bol -> empty .)


state 185

    (103) var_cte -> CTE_STRING np_operand_cte_str .

    MUL             reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    DIV             reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    RESD            reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    SUMA            reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    SUB             reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    LESST           reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    MORET           reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    LESSEQUAL       reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    MOREEQUAL       reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    EQUALTO         reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    NOTEQUALTO      reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    AND             reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    OR              reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    SCOLO           reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    RPAREN          reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)
    LPAREN          reduce using rule 103 (var_cte -> CTE_STRING np_operand_cte_str .)


state 186

    (133) np_operand_cte_str -> empty .

    MUL             reduce using rule 133 (np_operand_cte_str -> empty .)
    DIV             reduce using rule 133 (np_operand_cte_str -> empty .)
    RESD            reduce using rule 133 (np_operand_cte_str -> empty .)
    SUMA            reduce using rule 133 (np_operand_cte_str -> empty .)
    SUB             reduce using rule 133 (np_operand_cte_str -> empty .)
    LESST           reduce using rule 133 (np_operand_cte_str -> empty .)
    MORET           reduce using rule 133 (np_operand_cte_str -> empty .)
    LESSEQUAL       reduce using rule 133 (np_operand_cte_str -> empty .)
    MOREEQUAL       reduce using rule 133 (np_operand_cte_str -> empty .)
    EQUALTO         reduce using rule 133 (np_operand_cte_str -> empty .)
    NOTEQUALTO      reduce using rule 133 (np_operand_cte_str -> empty .)
    AND             reduce using rule 133 (np_operand_cte_str -> empty .)
    OR              reduce using rule 133 (np_operand_cte_str -> empty .)
    SCOLO           reduce using rule 133 (np_operand_cte_str -> empty .)
    RPAREN          reduce using rule 133 (np_operand_cte_str -> empty .)
    LPAREN          reduce using rule 133 (np_operand_cte_str -> empty .)


state 187

    (104) var_cte -> CTE_CHAR np_operand_cte_chr .

    MUL             reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    DIV             reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    RESD            reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    SUMA            reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    SUB             reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    LESST           reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    MORET           reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    LESSEQUAL       reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    MOREEQUAL       reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    EQUALTO         reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    NOTEQUALTO      reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    AND             reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    OR              reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    SCOLO           reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    RPAREN          reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)
    LPAREN          reduce using rule 104 (var_cte -> CTE_CHAR np_operand_cte_chr .)


state 188

    (132) np_operand_cte_chr -> empty .

    MUL             reduce using rule 132 (np_operand_cte_chr -> empty .)
    DIV             reduce using rule 132 (np_operand_cte_chr -> empty .)
    RESD            reduce using rule 132 (np_operand_cte_chr -> empty .)
    SUMA            reduce using rule 132 (np_operand_cte_chr -> empty .)
    SUB             reduce using rule 132 (np_operand_cte_chr -> empty .)
    LESST           reduce using rule 132 (np_operand_cte_chr -> empty .)
    MORET           reduce using rule 132 (np_operand_cte_chr -> empty .)
    LESSEQUAL       reduce using rule 132 (np_operand_cte_chr -> empty .)
    MOREEQUAL       reduce using rule 132 (np_operand_cte_chr -> empty .)
    EQUALTO         reduce using rule 132 (np_operand_cte_chr -> empty .)
    NOTEQUALTO      reduce using rule 132 (np_operand_cte_chr -> empty .)
    AND             reduce using rule 132 (np_operand_cte_chr -> empty .)
    OR              reduce using rule 132 (np_operand_cte_chr -> empty .)
    SCOLO           reduce using rule 132 (np_operand_cte_chr -> empty .)
    RPAREN          reduce using rule 132 (np_operand_cte_chr -> empty .)
    LPAREN          reduce using rule 132 (np_operand_cte_chr -> empty .)


state 189

    (69) function_call_2 -> ID SCOLO . function_call_2
    (66) function_call_2 -> . expression
    (67) function_call_2 -> . ID
    (68) function_call_2 -> . expression SCOLO function_call_2
    (69) function_call_2 -> . ID SCOLO function_call_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    ID              shift and go to state 141
    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    function_call_2                shift and go to state 226
    expression                     shift and go to state 145
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 190

    (63) function_call -> ID LPAREN function_call_1 RPAREN . SCOLO

    SCOLO           shift and go to state 227


state 191

    (68) function_call_2 -> expression SCOLO . function_call_2
    (66) function_call_2 -> . expression
    (67) function_call_2 -> . ID
    (68) function_call_2 -> . expression SCOLO function_call_2
    (69) function_call_2 -> . ID SCOLO function_call_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    ID              shift and go to state 141
    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 145
    function_call_2                shift and go to state 228
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 192

    (46) writing -> PRINT LPAREN writing_1 RPAREN . SCOLO

    SCOLO           shift and go to state 229


state 193

    (50) writing_2 -> expression SUMA . writing_1
    (47) writing_1 -> . expression
    (48) writing_1 -> . CTE_STRING
    (49) writing_1 -> . writing_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (50) writing_2 -> . expression SUMA writing_1
    (51) writing_2 -> . CTE_STRING SUMA writing_1
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    CTE_STRING      shift and go to state 148
    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 147
    writing_1                      shift and go to state 230
    writing_2                      shift and go to state 149
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 194

    (51) writing_2 -> CTE_STRING SUMA . writing_1
    (47) writing_1 -> . expression
    (48) writing_1 -> . CTE_STRING
    (49) writing_1 -> . writing_2
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (50) writing_2 -> . expression SUMA writing_1
    (51) writing_2 -> . CTE_STRING SUMA writing_1
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    CTE_STRING      shift and go to state 148
    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_CHAR        shift and go to state 140

    writing_1                      shift and go to state 231
    expression                     shift and go to state 147
    writing_2                      shift and go to state 149
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 195

    (52) condition -> IF LPAREN expression RPAREN . LBRACK statutes RBRACK condition_1

    LBRACK          shift and go to state 232


state 196

    (59) c_while -> WHILE LPAREN expression RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 233


state 197

    (60) c_do -> DO LBRACK statutes RBRACK . WHILE LPAREN expression RPAREN SCOLO

    WHILE           shift and go to state 234


state 198

    (61) c_for -> FOR LPAREN ID SCOLO . expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 235
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 199

    (62) c_forin -> FOR LPAREN ID IN . ID RPAREN LBRACK statutes RBRACK

    ID              shift and go to state 236


state 200

    (8) function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function .

    MAIN            reduce using rule 8 (function -> function_t ID np_var_b2 np_var_b3 LPAREN function_v RPAREN LBRACK vars statutes RBRACK function .)


state 201

    (20) function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1 .

    RPAREN          reduce using rule 20 (function_v1 -> type np_var_b4 ID np_var_b5 array_declare COMA function_v1 .)


state 202

    (105) method -> ID DOT method_t . LPAREN method_1 RPAREN

    LPAREN          shift and go to state 237


state 203

    (110) method_t -> DEG .

    LPAREN          reduce using rule 110 (method_t -> DEG .)


state 204

    (111) method_t -> SHORTPATH .

    LPAREN          reduce using rule 111 (method_t -> SHORTPATH .)


state 205

    (112) method_t -> DIAMETER .

    LPAREN          reduce using rule 112 (method_t -> DIAMETER .)


state 206

    (113) method_t -> ADD .

    LPAREN          reduce using rule 113 (method_t -> ADD .)


state 207

    (114) method_t -> DELETE .

    LPAREN          reduce using rule 114 (method_t -> DELETE .)


state 208

    (115) method_t -> ARC .

    LPAREN          reduce using rule 115 (method_t -> ARC .)


state 209

    (95) array_access -> LCORCH arrary_access_1 . RCORCH arrary_access_2

    RCORCH          shift and go to state 238


state 210

    (96) arrary_access_1 -> CTE_INT .

    RCORCH          reduce using rule 96 (arrary_access_1 -> CTE_INT .)


state 211

    (97) arrary_access_1 -> ID .

    RCORCH          reduce using rule 97 (arrary_access_1 -> ID .)


state 212

    (71) expression -> exp_lv1 AND expression .

    SCOLO           reduce using rule 71 (expression -> exp_lv1 AND expression .)
    RPAREN          reduce using rule 71 (expression -> exp_lv1 AND expression .)
    SUMA            reduce using rule 71 (expression -> exp_lv1 AND expression .)
    LPAREN          reduce using rule 71 (expression -> exp_lv1 AND expression .)


state 213

    (72) expression -> exp_lv1 OR expression .

    SCOLO           reduce using rule 72 (expression -> exp_lv1 OR expression .)
    RPAREN          reduce using rule 72 (expression -> exp_lv1 OR expression .)
    SUMA            reduce using rule 72 (expression -> exp_lv1 OR expression .)
    LPAREN          reduce using rule 72 (expression -> exp_lv1 OR expression .)


state 214

    (74) exp_lv1_1 -> LESST exp_lv2 .

    AND             reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    OR              reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    SCOLO           reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    RPAREN          reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    SUMA            reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)
    LPAREN          reduce using rule 74 (exp_lv1_1 -> LESST exp_lv2 .)


state 215

    (75) exp_lv1_1 -> MORET exp_lv2 .

    AND             reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    OR              reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    SCOLO           reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    RPAREN          reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    SUMA            reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)
    LPAREN          reduce using rule 75 (exp_lv1_1 -> MORET exp_lv2 .)


state 216

    (76) exp_lv1_1 -> LESSEQUAL exp_lv2 .

    AND             reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    OR              reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    SCOLO           reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    RPAREN          reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    SUMA            reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)
    LPAREN          reduce using rule 76 (exp_lv1_1 -> LESSEQUAL exp_lv2 .)


state 217

    (77) exp_lv1_1 -> MOREEQUAL exp_lv2 .

    AND             reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    OR              reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    SCOLO           reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    RPAREN          reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    SUMA            reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)
    LPAREN          reduce using rule 77 (exp_lv1_1 -> MOREEQUAL exp_lv2 .)


state 218

    (78) exp_lv1_1 -> EQUALTO exp_lv2 .

    AND             reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    OR              reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    SCOLO           reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    RPAREN          reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    SUMA            reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)
    LPAREN          reduce using rule 78 (exp_lv1_1 -> EQUALTO exp_lv2 .)


state 219

    (79) exp_lv1_1 -> NOTEQUALTO exp_lv2 .

    AND             reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    OR              reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    SCOLO           reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    RPAREN          reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    SUMA            reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)
    LPAREN          reduce using rule 79 (exp_lv1_1 -> NOTEQUALTO exp_lv2 .)


state 220

    (82) exp_lv2 -> exp_lv3 SUMA exp_lv2 .

    LESST           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    MORET           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    LESSEQUAL       reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    MOREEQUAL       reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    EQUALTO         reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    NOTEQUALTO      reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    AND             reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    OR              reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    SCOLO           reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    RPAREN          reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    SUMA            reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)
    LPAREN          reduce using rule 82 (exp_lv2 -> exp_lv3 SUMA exp_lv2 .)


state 221

    (83) exp_lv2 -> exp_lv3 SUB exp_lv2 .

    LESST           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    MORET           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    LESSEQUAL       reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    MOREEQUAL       reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    EQUALTO         reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    NOTEQUALTO      reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    AND             reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    OR              reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    SCOLO           reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    RPAREN          reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    SUMA            reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)
    LPAREN          reduce using rule 83 (exp_lv2 -> exp_lv3 SUB exp_lv2 .)


state 222

    (85) exp_lv3 -> exp_lv4 np_quad_1 MUL . np_operator_stack exp_lv3
    (135) np_operator_stack -> . empty
    (138) empty -> .

    NOT             reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    CTE_INT         reduce using rule 138 (empty -> .)
    CTE_FLO         reduce using rule 138 (empty -> .)
    CTE_BOO         reduce using rule 138 (empty -> .)
    CTE_STRING      reduce using rule 138 (empty -> .)
    CTE_CHAR        reduce using rule 138 (empty -> .)

    np_operator_stack              shift and go to state 239
    empty                          shift and go to state 240

state 223

    (86) exp_lv3 -> exp_lv4 np_quad_1 DIV . np_operator_stack exp_lv3
    (135) np_operator_stack -> . empty
    (138) empty -> .

    NOT             reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    CTE_INT         reduce using rule 138 (empty -> .)
    CTE_FLO         reduce using rule 138 (empty -> .)
    CTE_BOO         reduce using rule 138 (empty -> .)
    CTE_STRING      reduce using rule 138 (empty -> .)
    CTE_CHAR        reduce using rule 138 (empty -> .)

    np_operator_stack              shift and go to state 241
    empty                          shift and go to state 240

state 224

    (87) exp_lv3 -> exp_lv4 np_quad_1 RESD . np_operator_stack exp_lv3
    (135) np_operator_stack -> . empty
    (138) empty -> .

    NOT             reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    CTE_INT         reduce using rule 138 (empty -> .)
    CTE_FLO         reduce using rule 138 (empty -> .)
    CTE_BOO         reduce using rule 138 (empty -> .)
    CTE_STRING      reduce using rule 138 (empty -> .)
    CTE_CHAR        reduce using rule 138 (empty -> .)

    np_operator_stack              shift and go to state 242
    empty                          shift and go to state 240

state 225

    (90) exp_lv5 -> RPAREN expression LPAREN .

    MUL             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    DIV             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    RESD            reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    SUMA            reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    SUB             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    LESST           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    MORET           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    LESSEQUAL       reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    MOREEQUAL       reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    EQUALTO         reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    NOTEQUALTO      reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    AND             reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    OR              reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    SCOLO           reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    RPAREN          reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)
    LPAREN          reduce using rule 90 (exp_lv5 -> RPAREN expression LPAREN .)


state 226

    (69) function_call_2 -> ID SCOLO function_call_2 .

    RPAREN          reduce using rule 69 (function_call_2 -> ID SCOLO function_call_2 .)


state 227

    (63) function_call -> ID LPAREN function_call_1 RPAREN SCOLO .

    ID              reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    PRINT           reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    IF              reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    WHILE           reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    DO              reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    FOR             reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)
    RBRACK          reduce using rule 63 (function_call -> ID LPAREN function_call_1 RPAREN SCOLO .)


state 228

    (68) function_call_2 -> expression SCOLO function_call_2 .

    RPAREN          reduce using rule 68 (function_call_2 -> expression SCOLO function_call_2 .)


state 229

    (46) writing -> PRINT LPAREN writing_1 RPAREN SCOLO .

    ID              reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    PRINT           reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    IF              reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    WHILE           reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    DO              reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    FOR             reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)
    RBRACK          reduce using rule 46 (writing -> PRINT LPAREN writing_1 RPAREN SCOLO .)


state 230

    (50) writing_2 -> expression SUMA writing_1 .

    RPAREN          reduce using rule 50 (writing_2 -> expression SUMA writing_1 .)


state 231

    (51) writing_2 -> CTE_STRING SUMA writing_1 .

    RPAREN          reduce using rule 51 (writing_2 -> CTE_STRING SUMA writing_1 .)


state 232

    (52) condition -> IF LPAREN expression RPAREN LBRACK . statutes RBRACK condition_1
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes                       shift and go to state 243
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 233

    (59) c_while -> WHILE LPAREN expression RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes                       shift and go to state 244
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 234

    (60) c_do -> DO LBRACK statutes RBRACK WHILE . LPAREN expression RPAREN SCOLO

    LPAREN          shift and go to state 245


state 235

    (61) c_for -> FOR LPAREN ID SCOLO expression . SCOLO assignation RPAREN LBRACK statutes RBRACK

    SCOLO           shift and go to state 246


state 236

    (62) c_forin -> FOR LPAREN ID IN ID . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 247


state 237

    (105) method -> ID DOT method_t LPAREN . method_1 RPAREN
    (106) method_1 -> . method_1_1
    (107) method_1 -> . empty
    (108) method_1_1 -> . method_v
    (109) method_1_1 -> . method_v COMA method_1_1
    (138) empty -> .
    (116) method_v -> . ID
    (117) method_v -> . LBRACK ID COMA ID RBRACK

    RPAREN          reduce using rule 138 (empty -> .)
    ID              shift and go to state 248
    LBRACK          shift and go to state 253

    method_1                       shift and go to state 249
    method_1_1                     shift and go to state 250
    empty                          shift and go to state 251
    method_v                       shift and go to state 252

state 238

    (95) array_access -> LCORCH arrary_access_1 RCORCH . arrary_access_2
    (98) arrary_access_2 -> . LCORCH arrary_access_1 RCORCH arrary_access_2
    (99) arrary_access_2 -> . empty
    (138) empty -> .

    LCORCH          shift and go to state 254
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    arrary_access_2                shift and go to state 255
    empty                          shift and go to state 256

state 239

    (85) exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack . exp_lv3
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv4                        shift and go to state 130
    exp_lv3                        shift and go to state 257
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 240

    (135) np_operator_stack -> empty .

    NOT             reduce using rule 135 (np_operator_stack -> empty .)
    RPAREN          reduce using rule 135 (np_operator_stack -> empty .)
    ID              reduce using rule 135 (np_operator_stack -> empty .)
    CTE_INT         reduce using rule 135 (np_operator_stack -> empty .)
    CTE_FLO         reduce using rule 135 (np_operator_stack -> empty .)
    CTE_BOO         reduce using rule 135 (np_operator_stack -> empty .)
    CTE_STRING      reduce using rule 135 (np_operator_stack -> empty .)
    CTE_CHAR        reduce using rule 135 (np_operator_stack -> empty .)


state 241

    (86) exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack . exp_lv3
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv4                        shift and go to state 130
    exp_lv3                        shift and go to state 258
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 242

    (87) exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack . exp_lv3
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    exp_lv4                        shift and go to state 130
    exp_lv3                        shift and go to state 259
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 243

    (52) condition -> IF LPAREN expression RPAREN LBRACK statutes . RBRACK condition_1

    RBRACK          shift and go to state 260


state 244

    (59) c_while -> WHILE LPAREN expression RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 261


state 245

    (60) c_do -> DO LBRACK statutes RBRACK WHILE LPAREN . expression RPAREN SCOLO
    (70) expression -> . exp_lv1
    (71) expression -> . exp_lv1 AND expression
    (72) expression -> . exp_lv1 OR expression
    (73) exp_lv1 -> . exp_lv2 exp_lv1_1
    (81) exp_lv2 -> . exp_lv3
    (82) exp_lv2 -> . exp_lv3 SUMA exp_lv2
    (83) exp_lv2 -> . exp_lv3 SUB exp_lv2
    (84) exp_lv3 -> . exp_lv4 np_quad_1
    (85) exp_lv3 -> . exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3
    (86) exp_lv3 -> . exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3
    (87) exp_lv3 -> . exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3
    (88) exp_lv4 -> . exp_lv5
    (89) exp_lv4 -> . NOT exp_lv5
    (90) exp_lv5 -> . RPAREN expression LPAREN
    (91) exp_lv5 -> . var_cte
    (92) exp_lv5 -> . method
    (93) exp_lv5 -> . ID
    (94) exp_lv5 -> . ID array_access
    (100) var_cte -> . CTE_INT np_operand_cte_int
    (101) var_cte -> . CTE_FLO np_operand_cte_flt
    (102) var_cte -> . CTE_BOO np_operand_cte_bol
    (103) var_cte -> . CTE_STRING np_operand_cte_str
    (104) var_cte -> . CTE_CHAR np_operand_cte_chr
    (105) method -> . ID DOT method_t LPAREN method_1 RPAREN

    NOT             shift and go to state 132
    RPAREN          shift and go to state 133
    ID              shift and go to state 125
    CTE_INT         shift and go to state 136
    CTE_FLO         shift and go to state 137
    CTE_BOO         shift and go to state 138
    CTE_STRING      shift and go to state 139
    CTE_CHAR        shift and go to state 140

    expression                     shift and go to state 262
    exp_lv1                        shift and go to state 127
    exp_lv2                        shift and go to state 128
    exp_lv3                        shift and go to state 129
    exp_lv4                        shift and go to state 130
    exp_lv5                        shift and go to state 131
    var_cte                        shift and go to state 134
    method                         shift and go to state 135

state 246

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO . assignation RPAREN LBRACK statutes RBRACK
    (45) assignation -> . ID EQL expression SCOLO

    ID              shift and go to state 263

    assignation                    shift and go to state 264

state 247

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 265


state 248

    (116) method_v -> ID .

    COMA            reduce using rule 116 (method_v -> ID .)
    RPAREN          reduce using rule 116 (method_v -> ID .)


state 249

    (105) method -> ID DOT method_t LPAREN method_1 . RPAREN

    RPAREN          shift and go to state 266


state 250

    (106) method_1 -> method_1_1 .

    RPAREN          reduce using rule 106 (method_1 -> method_1_1 .)


state 251

    (107) method_1 -> empty .

    RPAREN          reduce using rule 107 (method_1 -> empty .)


state 252

    (108) method_1_1 -> method_v .
    (109) method_1_1 -> method_v . COMA method_1_1

    RPAREN          reduce using rule 108 (method_1_1 -> method_v .)
    COMA            shift and go to state 267


state 253

    (117) method_v -> LBRACK . ID COMA ID RBRACK

    ID              shift and go to state 268


state 254

    (98) arrary_access_2 -> LCORCH . arrary_access_1 RCORCH arrary_access_2
    (96) arrary_access_1 -> . CTE_INT
    (97) arrary_access_1 -> . ID

    CTE_INT         shift and go to state 210
    ID              shift and go to state 211

    arrary_access_1                shift and go to state 269

state 255

    (95) array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .

    MUL             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DIV             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RESD            reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUMA            reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUB             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESST           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MORET           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESSEQUAL       reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MOREEQUAL       reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    EQUALTO         reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    NOTEQUALTO      reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    AND             reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    OR              reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SCOLO           reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RPAREN          reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LPAREN          reduce using rule 95 (array_access -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)


state 256

    (99) arrary_access_2 -> empty .

    MUL             reduce using rule 99 (arrary_access_2 -> empty .)
    DIV             reduce using rule 99 (arrary_access_2 -> empty .)
    RESD            reduce using rule 99 (arrary_access_2 -> empty .)
    SUMA            reduce using rule 99 (arrary_access_2 -> empty .)
    SUB             reduce using rule 99 (arrary_access_2 -> empty .)
    LESST           reduce using rule 99 (arrary_access_2 -> empty .)
    MORET           reduce using rule 99 (arrary_access_2 -> empty .)
    LESSEQUAL       reduce using rule 99 (arrary_access_2 -> empty .)
    MOREEQUAL       reduce using rule 99 (arrary_access_2 -> empty .)
    EQUALTO         reduce using rule 99 (arrary_access_2 -> empty .)
    NOTEQUALTO      reduce using rule 99 (arrary_access_2 -> empty .)
    AND             reduce using rule 99 (arrary_access_2 -> empty .)
    OR              reduce using rule 99 (arrary_access_2 -> empty .)
    SCOLO           reduce using rule 99 (arrary_access_2 -> empty .)
    RPAREN          reduce using rule 99 (arrary_access_2 -> empty .)
    LPAREN          reduce using rule 99 (arrary_access_2 -> empty .)


state 257

    (85) exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .

    SUMA            reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    SUB             reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    LESST           reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    MORET           reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    LESSEQUAL       reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    MOREEQUAL       reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    EQUALTO         reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    NOTEQUALTO      reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    AND             reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    OR              reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    SCOLO           reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    RPAREN          reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)
    LPAREN          reduce using rule 85 (exp_lv3 -> exp_lv4 np_quad_1 MUL np_operator_stack exp_lv3 .)


state 258

    (86) exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .

    SUMA            reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    SUB             reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    LESST           reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    MORET           reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    LESSEQUAL       reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    MOREEQUAL       reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    EQUALTO         reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    NOTEQUALTO      reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    AND             reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    OR              reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    SCOLO           reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    RPAREN          reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)
    LPAREN          reduce using rule 86 (exp_lv3 -> exp_lv4 np_quad_1 DIV np_operator_stack exp_lv3 .)


state 259

    (87) exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .

    SUMA            reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    SUB             reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    LESST           reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    MORET           reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    LESSEQUAL       reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    MOREEQUAL       reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    EQUALTO         reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    NOTEQUALTO      reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    AND             reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    OR              reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    SCOLO           reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    RPAREN          reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)
    LPAREN          reduce using rule 87 (exp_lv3 -> exp_lv4 np_quad_1 RESD np_operator_stack exp_lv3 .)


state 260

    (52) condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK . condition_1
    (53) condition_1 -> . ELSE LBRACK statutes RBRACK
    (54) condition_1 -> . empty
    (138) empty -> .

    ELSE            shift and go to state 271
    ID              reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    DO              reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    RBRACK          reduce using rule 138 (empty -> .)

    condition_1                    shift and go to state 270
    empty                          shift and go to state 272

state 261

    (59) c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 59 (c_while -> WHILE LPAREN expression RPAREN LBRACK statutes RBRACK .)


state 262

    (60) c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression . RPAREN SCOLO

    RPAREN          shift and go to state 273


state 263

    (45) assignation -> ID . EQL expression SCOLO

    EQL             shift and go to state 112


state 264

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation . RPAREN LBRACK statutes RBRACK

    RPAREN          shift and go to state 274


state 265

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes                       shift and go to state 275
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 266

    (105) method -> ID DOT method_t LPAREN method_1 RPAREN .

    MUL             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    DIV             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    RESD            reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SUMA            reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SUB             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LESST           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    MORET           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LESSEQUAL       reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    MOREEQUAL       reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    EQUALTO         reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    NOTEQUALTO      reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    AND             reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    OR              reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    SCOLO           reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    RPAREN          reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)
    LPAREN          reduce using rule 105 (method -> ID DOT method_t LPAREN method_1 RPAREN .)


state 267

    (109) method_1_1 -> method_v COMA . method_1_1
    (108) method_1_1 -> . method_v
    (109) method_1_1 -> . method_v COMA method_1_1
    (116) method_v -> . ID
    (117) method_v -> . LBRACK ID COMA ID RBRACK

    ID              shift and go to state 248
    LBRACK          shift and go to state 253

    method_v                       shift and go to state 252
    method_1_1                     shift and go to state 276

state 268

    (117) method_v -> LBRACK ID . COMA ID RBRACK

    COMA            shift and go to state 277


state 269

    (98) arrary_access_2 -> LCORCH arrary_access_1 . RCORCH arrary_access_2

    RCORCH          shift and go to state 278


state 270

    (52) condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .

    ID              reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .)
    PRINT           reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .)
    IF              reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .)
    WHILE           reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .)
    DO              reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .)
    FOR             reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .)
    RBRACK          reduce using rule 52 (condition -> IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1 .)


state 271

    (53) condition_1 -> ELSE . LBRACK statutes RBRACK

    LBRACK          shift and go to state 279


state 272

    (54) condition_1 -> empty .

    ID              reduce using rule 54 (condition_1 -> empty .)
    PRINT           reduce using rule 54 (condition_1 -> empty .)
    IF              reduce using rule 54 (condition_1 -> empty .)
    WHILE           reduce using rule 54 (condition_1 -> empty .)
    DO              reduce using rule 54 (condition_1 -> empty .)
    FOR             reduce using rule 54 (condition_1 -> empty .)
    RBRACK          reduce using rule 54 (condition_1 -> empty .)


state 273

    (60) c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN . SCOLO

    SCOLO           shift and go to state 280


state 274

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN . LBRACK statutes RBRACK

    LBRACK          shift and go to state 281


state 275

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 282


state 276

    (109) method_1_1 -> method_v COMA method_1_1 .

    RPAREN          reduce using rule 109 (method_1_1 -> method_v COMA method_1_1 .)


state 277

    (117) method_v -> LBRACK ID COMA . ID RBRACK

    ID              shift and go to state 283


state 278

    (98) arrary_access_2 -> LCORCH arrary_access_1 RCORCH . arrary_access_2
    (98) arrary_access_2 -> . LCORCH arrary_access_1 RCORCH arrary_access_2
    (99) arrary_access_2 -> . empty
    (138) empty -> .

    LCORCH          shift and go to state 254
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    RESD            reduce using rule 138 (empty -> .)
    SUMA            reduce using rule 138 (empty -> .)
    SUB             reduce using rule 138 (empty -> .)
    LESST           reduce using rule 138 (empty -> .)
    MORET           reduce using rule 138 (empty -> .)
    LESSEQUAL       reduce using rule 138 (empty -> .)
    MOREEQUAL       reduce using rule 138 (empty -> .)
    EQUALTO         reduce using rule 138 (empty -> .)
    NOTEQUALTO      reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SCOLO           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

    arrary_access_2                shift and go to state 284
    empty                          shift and go to state 256

state 279

    (53) condition_1 -> ELSE LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    statutes                       shift and go to state 285
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    assignation                    shift and go to state 91
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 280

    (60) c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .

    ID              reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .)
    PRINT           reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .)
    IF              reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .)
    WHILE           reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .)
    DO              reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .)
    FOR             reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .)
    RBRACK          reduce using rule 60 (c_do -> DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO .)


state 281

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK . statutes RBRACK
    (38) statutes -> . statutes_1 statutes
    (39) statutes -> . empty
    (40) statutes_1 -> . assignation
    (41) statutes_1 -> . writing
    (42) statutes_1 -> . condition
    (43) statutes_1 -> . cycle
    (44) statutes_1 -> . function_call
    (138) empty -> .
    (45) assignation -> . ID EQL expression SCOLO
    (46) writing -> . PRINT LPAREN writing_1 RPAREN SCOLO
    (52) condition -> . IF LPAREN expression RPAREN LBRACK statutes RBRACK condition_1
    (55) cycle -> . c_while
    (56) cycle -> . c_do
    (57) cycle -> . c_for
    (58) cycle -> . c_forin
    (63) function_call -> . ID LPAREN function_call_1 RPAREN SCOLO
    (59) c_while -> . WHILE LPAREN expression RPAREN LBRACK statutes RBRACK
    (60) c_do -> . DO LBRACK statutes RBRACK WHILE LPAREN expression RPAREN SCOLO
    (61) c_for -> . FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK
    (62) c_forin -> . FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK

    RBRACK          reduce using rule 138 (empty -> .)
    ID              shift and go to state 96
    PRINT           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 103
    DO              shift and go to state 104
    FOR             shift and go to state 105

    assignation                    shift and go to state 91
    statutes                       shift and go to state 286
    statutes_1                     shift and go to state 89
    empty                          shift and go to state 90
    writing                        shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94
    function_call                  shift and go to state 95
    c_while                        shift and go to state 99
    c_do                           shift and go to state 100
    c_for                          shift and go to state 101
    c_forin                        shift and go to state 102

state 282

    (62) c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 62 (c_forin -> FOR LPAREN ID IN ID RPAREN LBRACK statutes RBRACK .)


state 283

    (117) method_v -> LBRACK ID COMA ID . RBRACK

    RBRACK          shift and go to state 287


state 284

    (98) arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .

    MUL             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    DIV             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RESD            reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUMA            reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SUB             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESST           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MORET           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LESSEQUAL       reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    MOREEQUAL       reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    EQUALTO         reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    NOTEQUALTO      reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    AND             reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    OR              reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    SCOLO           reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    RPAREN          reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)
    LPAREN          reduce using rule 98 (arrary_access_2 -> LCORCH arrary_access_1 RCORCH arrary_access_2 .)


state 285

    (53) condition_1 -> ELSE LBRACK statutes . RBRACK

    RBRACK          shift and go to state 288


state 286

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes . RBRACK

    RBRACK          shift and go to state 289


state 287

    (117) method_v -> LBRACK ID COMA ID RBRACK .

    COMA            reduce using rule 117 (method_v -> LBRACK ID COMA ID RBRACK .)
    RPAREN          reduce using rule 117 (method_v -> LBRACK ID COMA ID RBRACK .)


state 288

    (53) condition_1 -> ELSE LBRACK statutes RBRACK .

    ID              reduce using rule 53 (condition_1 -> ELSE LBRACK statutes RBRACK .)
    PRINT           reduce using rule 53 (condition_1 -> ELSE LBRACK statutes RBRACK .)
    IF              reduce using rule 53 (condition_1 -> ELSE LBRACK statutes RBRACK .)
    WHILE           reduce using rule 53 (condition_1 -> ELSE LBRACK statutes RBRACK .)
    DO              reduce using rule 53 (condition_1 -> ELSE LBRACK statutes RBRACK .)
    FOR             reduce using rule 53 (condition_1 -> ELSE LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 53 (condition_1 -> ELSE LBRACK statutes RBRACK .)


state 289

    (61) c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .

    ID              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    PRINT           reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    IF              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    WHILE           reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    DO              reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    FOR             reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)
    RBRACK          reduce using rule 61 (c_for -> FOR LPAREN ID SCOLO expression SCOLO assignation RPAREN LBRACK statutes RBRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 129 resolved as shift
WARNING: shift/reduce conflict for SCOLO in state 141 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 148 resolved as shift
WARNING: reduce/reduce conflict in state 141 resolved using rule (function_call_2 -> ID)
WARNING: rejected rule (exp_lv5 -> ID) in state 141
WARNING: reduce/reduce conflict in state 148 resolved using rule (writing_1 -> CTE_STRING)
WARNING: rejected rule (empty -> <empty>) in state 148
